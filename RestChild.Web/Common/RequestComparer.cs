//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using RestChild.Comon;
using RestChild.DAL;
using RestChild.DAL.RepositoryExtensions;
using RestChild.Domain;
using RestChild.Web.Common;

namespace RestChild.Web.Common
{
    public static partial class RequestComparer
    {
        /// <summary>
        ///     Сравнить общие сведения
        /// </summary>
        private static RequestDiff CompareRequestInternal(Request oldRequest, Request newRequest, IUnitOfWork uw)
        {
            var diff = new RequestDiff();
            diff.ObjectName = "Заявление";
            if (oldRequest == null && newRequest == null)
            {
                return null;
            }
            else if (oldRequest == null)
            {
                diff.Action = "Добавление";
                diff.Append("Кем подается заявление", string.Empty, StatusApplicantList.Data.FirstOrDefault(x => x.Value == newRequest.StatusApplicant).Text.FormatEx(val: string.Empty));
                diff.Append("Номер заявления", string.Empty, newRequest.RequestNumber.FormatEx(val: string.Empty));
                diff.Append("Количество основных мест", string.Empty, newRequest.MainPlaces.FormatEx(val: string.Empty));
                diff.Append("Количество дополнительных мест", string.Empty, newRequest.AdditionalPlaces.FormatEx(val: string.Empty));
                diff.Append("Согласие на изменение заявления по сканам", string.Empty, newRequest.ChangeByScan.FormatEx());
                diff.Append("Необходимо отправлять уведомления по Email", string.Empty, newRequest.NeedEmail.FormatEx());
                diff.Append("Необходимо отправлять уведомления по Sms", string.Empty, newRequest.NeedSms.FormatEx());
                diff.Append("Количество детей", string.Empty, newRequest.CountPlace.FormatEx());
                diff.Append("Количество сопровождающих", string.Empty, newRequest.CountAttendants.FormatEx());
                diff.Append("Номер сертификата", string.Empty, newRequest.CertificateNumber.FormatEx(val: string.Empty));
                diff.Append("Заезд с", string.Empty, newRequest.DateIncome.FormatEx(val: string.Empty));
                diff.Append("Заезд по", string.Empty, newRequest.DateOutcome.FormatEx(val: string.Empty));
                diff.Append("Комментарий", string.Empty, newRequest.Commentary.FormatEx(val: string.Empty));
                diff.Append("Фамилия получателя", string.Empty, newRequest.BankLastName.FormatEx(val: string.Empty));
                diff.Append("Имя получателя", string.Empty, newRequest.BankFirstName.FormatEx(val: string.Empty));
                diff.Append("Отчество получателя", string.Empty, newRequest.BankMiddleName.FormatEx(val: string.Empty));
                diff.Append("Наименование банка", string.Empty, newRequest.BankName.FormatEx(val: string.Empty));
                diff.Append("БИК банка", string.Empty, newRequest.BankBik.FormatEx(val: string.Empty));
                diff.Append("ИНН банка", string.Empty, newRequest.BankInn.FormatEx(val: string.Empty));
                diff.Append("Лицевой счет", string.Empty, newRequest.BankAccount.FormatEx(val: string.Empty));
                diff.Append("Кор. счет", string.Empty, newRequest.BankCorr.FormatEx(val: string.Empty));
                diff.Append("Номер карты", string.Empty, newRequest.BankCardNumber.FormatEx(val: string.Empty));
                diff.Append("Комментарий скрытый", string.Empty, newRequest.InternalCommentary.FormatEx(val: string.Empty));
            }
            else if (newRequest == null)
            {
                diff.Action = "Удаление";
                diff.Append("Кем подается заявление", StatusApplicantList.Data.FirstOrDefault(x => x.Value == oldRequest.StatusApplicant).Text.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Номер заявления", oldRequest.RequestNumber.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Количество основных мест", oldRequest.MainPlaces.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Количество дополнительных мест", oldRequest.AdditionalPlaces.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Согласие на изменение заявления по сканам", string.Empty, oldRequest.ChangeByScan.FormatEx());
                diff.Append("Необходимо отправлять уведомления по Email", oldRequest.NeedEmail.FormatEx(), string.Empty);
                diff.Append("Необходимо отправлять уведомления по Sms", oldRequest.NeedSms.FormatEx(), string.Empty);
                diff.Append("Количество детей", oldRequest.CountPlace.FormatEx(), string.Empty);
                diff.Append("Количество сопровождающих", oldRequest.CountAttendants.FormatEx(), string.Empty);
                diff.Append("Номер сертификата", oldRequest.CertificateNumber.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Заезд с", oldRequest.DateIncome.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Заезд по", oldRequest.DateOutcome.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Комментарий", oldRequest.Commentary.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Фамилия получателя", oldRequest.BankLastName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Имя получателя", oldRequest.BankFirstName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Отчество получателя", oldRequest.BankMiddleName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Наименование банка", oldRequest.BankName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("БИК банка", oldRequest.BankBik.FormatEx(val: string.Empty), string.Empty);
                diff.Append("ИНН банка", oldRequest.BankInn.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Лицевой счет", oldRequest.BankAccount.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Кор. счет", oldRequest.BankCorr.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Номер карты", oldRequest.BankCardNumber.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Комментарий скрытый", oldRequest.InternalCommentary.FormatEx(val: string.Empty), string.Empty);
            }
            else
            {
                diff.Action = "Изменение";
                if (oldRequest.StatusApplicant != newRequest.StatusApplicant)
                {
                    diff.Append("Кем подается заявление", StatusApplicantList.Data.FirstOrDefault(x => x.Value == oldRequest.StatusApplicant).Text.FormatEx(val: string.Empty),
                        StatusApplicantList.Data.FirstOrDefault(x => x.Value == newRequest.StatusApplicant).Text.FormatEx(val: string.Empty));
                }

                if (oldRequest.RequestNumber != newRequest.RequestNumber)
                {
                    diff.Append("Номер заявления", oldRequest.RequestNumber.FormatEx(val: string.Empty),
                        newRequest.RequestNumber.FormatEx(val: string.Empty));
                }

                if (oldRequest.MainPlaces != newRequest.MainPlaces)
                {
                    diff.Append("Количество основных мест", oldRequest.MainPlaces.FormatEx(val: string.Empty),
                        newRequest.MainPlaces.FormatEx(val: string.Empty));
                }

                if (oldRequest.AdditionalPlaces != newRequest.AdditionalPlaces)
                {
                    diff.Append("Количество дополнительных мест", oldRequest.AdditionalPlaces.FormatEx(val: string.Empty),
                        newRequest.AdditionalPlaces.FormatEx(val: string.Empty));
                }

                if (oldRequest.ChangeByScan != newRequest.ChangeByScan)
                {
                    diff.Append("Согласие на изменение заявления по сканам", oldRequest.ChangeByScan.FormatEx(),
                        newRequest.ChangeByScan.FormatEx());
                }

                if (oldRequest.NeedEmail != newRequest.NeedEmail)
                {
                    diff.Append("Необходимо отправлять уведомления по Email", oldRequest.NeedEmail.FormatEx(),
                        newRequest.NeedEmail.FormatEx());
                }

                if (oldRequest.NeedSms != newRequest.NeedSms)
                {
                    diff.Append("Необходимо отправлять уведомления по Sms", oldRequest.NeedSms.FormatEx(),
                        newRequest.NeedSms.FormatEx());
                }

                if (oldRequest.CountPlace != newRequest.CountPlace)
                {
                    diff.Append("Количество детей", oldRequest.CountPlace.FormatEx(), newRequest.CountPlace.FormatEx());
                }

                if (oldRequest.CountAttendants != newRequest.CountAttendants)
                {
                    diff.Append("Количество сопровождающих", oldRequest.CountAttendants.FormatEx(),
                        newRequest.CountAttendants.FormatEx());
                }

                if (oldRequest.CertificateNumber != newRequest.CertificateNumber)
                {
                    diff.Append("Номер сертификата", oldRequest.CertificateNumber.FormatEx(val: string.Empty),
                        newRequest.CertificateNumber.FormatEx(val: string.Empty));
                }

                if (oldRequest.Price != newRequest.Price)
                {
                    diff.Append("Стоимость", oldRequest.Price.FormatEx(val: string.Empty),
                        newRequest.Price.FormatEx(val: string.Empty));
                }

                if (oldRequest.DateIncome != newRequest.DateIncome)
                {
                    diff.Append("Заезд с", oldRequest.DateIncome.FormatEx(val: string.Empty),
                        newRequest.DateIncome.FormatEx(val: string.Empty));
                }

                if (oldRequest.DateOutcome != newRequest.DateOutcome)
                {
                    diff.Append("Заезд по", oldRequest.DateOutcome.FormatEx(val: string.Empty),
                        newRequest.DateOutcome.FormatEx(val: string.Empty));
                }

                if (oldRequest.Commentary != newRequest.Commentary)
                {
                    diff.Append("Комментарий", oldRequest.Commentary.FormatEx(val: string.Empty),
                        newRequest.Commentary.FormatEx(val: string.Empty));
                }

                if (oldRequest.BankName != newRequest.BankName)
                {
                    diff.Append("Наименование банка", oldRequest.BankName.FormatEx(val: string.Empty),
                        newRequest.BankName.FormatEx(val: string.Empty));
                }

                if (oldRequest.BankLastName != newRequest.BankLastName)
                {
                    diff.Append("Фамилия получателя", oldRequest.BankLastName.FormatEx(val: string.Empty),
                        newRequest.BankLastName.FormatEx(val: string.Empty));
                }

                if (oldRequest.BankFirstName != newRequest.BankFirstName)
                {
                    diff.Append("Имя получателя", oldRequest.BankFirstName.FormatEx(val: string.Empty),
                        newRequest.BankFirstName.FormatEx(val: string.Empty));
                }

                if (oldRequest.BankMiddleName != newRequest.BankMiddleName)
                {
                    diff.Append("Отчество получателя", oldRequest.BankMiddleName.FormatEx(val: string.Empty),
                        newRequest.BankMiddleName.FormatEx(val: string.Empty));
                }

                if (oldRequest.BankBik != newRequest.BankBik)
                {
                    diff.Append("БИК банка", oldRequest.BankBik.FormatEx(val: string.Empty),
                        newRequest.BankBik.FormatEx(val: string.Empty));
                }

                if (oldRequest.BankInn != newRequest.BankInn)
                {
                    diff.Append("ИНН банка", oldRequest.BankInn.FormatEx(val: string.Empty),
                        newRequest.BankInn.FormatEx(val: string.Empty));
                }

                if (oldRequest.BankAccount != newRequest.BankAccount)
                {
                    diff.Append("Расчетный счет", oldRequest.BankAccount.FormatEx(val: string.Empty),
                        newRequest.BankAccount.FormatEx(val: string.Empty));
                }

                if (oldRequest.BankCorr != newRequest.BankCorr)
                {
                    diff.Append("Номер кор счета", oldRequest.BankCorr.FormatEx(val: string.Empty),
                        newRequest.BankCorr.FormatEx(val: string.Empty));
                }

                if (oldRequest.BankCardNumber != newRequest.BankCardNumber)
                {
                    diff.Append("Номер карты", oldRequest.BankCardNumber.FormatEx(val: string.Empty),
                        newRequest.BankCardNumber.FormatEx(val: string.Empty));
                }

                if (oldRequest.InternalCommentary != newRequest.InternalCommentary)
                {
                    diff.Append("Комментарий скрытый", oldRequest.InternalCommentary.FormatEx(val: string.Empty),
                        newRequest.InternalCommentary.FormatEx(val: string.Empty));
                }
            }

            if (oldRequest.NullSafe(r => r.TypeOfRestId) != newRequest.NullSafe(r => r.TypeOfRestId))
            {
                diff.Append("Вид отдыха", oldRequest.NullSafe(r => r.TypeOfRest.Name).FormatEx(val: string.Empty),
                    newRequest.NullSafe(r => r.TypeOfRest.Name).FormatEx(val: string.Empty));
            }

            if (oldRequest.NullSafe(r => r.TimeOfRestId) != newRequest.NullSafe(r => r.TimeOfRestId))
            {
                diff.Append("Время отдыха", oldRequest?.TimeOfRest?.Name ?? uw.GetById<TimeOfRest>(oldRequest.TimeOfRestId)?.Name,
                    newRequest?.TimeOfRest?.Name ?? uw.GetById<TimeOfRest>(newRequest.TimeOfRestId)?.Name);
            }

            if ((oldRequest.TimesOfRest?.Any() ?? false) || (newRequest.TimesOfRest?.Any() ?? false))
            {
                var oldTorsIds = oldRequest.TimesOfRest?.Select(x => x.TimeOfRestId).ToList();
                var newTorsIds = newRequest.TimesOfRest?.Select(x => x.TimeOfRestId).ToList();
                if (!Enumerable.SequenceEqual(oldTorsIds, newTorsIds))
                {
                    var allIds = oldTorsIds.Union(newTorsIds);
                    var names = uw.GetSet<TimeOfRest>().Where(por => allIds.Contains(por.Id)).Select(a => new {Id = a.Id, Name = a.Name}).ToList();
                    var resOld = new List<string>();
                    var resNew = new List<string>();
                    for (int i = 0; i < oldTorsIds.Count(); i++)
                    {
                        resOld.Add(names.Where(n => n.Id == oldTorsIds[i]).FirstOrDefault().Name);
                    }

                    for (int i = 0; i < newTorsIds.Count(); i++)
                    {
                        resNew.Add(names.Where(n => n.Id == newTorsIds[i]).FirstOrDefault().Name);
                    }

                    diff.Append("Дополнительные времена отдыха", string.Join(", ", resOld), string.Join(", ", resNew));
                }
            }

            if (oldRequest.NullSafe(r => r.SubjectOfRestId) != newRequest.NullSafe(r => r.SubjectOfRestId))
            {
                diff.Append("Тематика смены", oldRequest?.SubjectOfRest?.Name ?? uw.GetById<SubjectOfRest>(oldRequest.SubjectOfRestId)?.Name,
                    newRequest?.SubjectOfRest?.Name ?? uw.GetById<SubjectOfRest>(newRequest.SubjectOfRestId)?.Name);
            }

            if (oldRequest?.TransferToId != newRequest?.TransferToId)
            {
                diff.Append("Проезд из города Москвы к месту отдыха", oldRequest?.TransferTo?.Name ?? uw.GetById<TypeOfTransfer>(oldRequest.TransferToId)?.Name,
                    newRequest?.TransferTo?.Name ?? uw.GetById<TypeOfTransfer>(newRequest.TransferToId)?.Name);
            }

            if (oldRequest?.TransferFromId != newRequest?.TransferFromId)
            {
                diff.Append("Проезд из места отдыха в город Москву", oldRequest?.TransferFrom?.Name ?? uw.GetById<TypeOfTransfer>(oldRequest.TransferFromId)?.Name,
                    newRequest?.TransferFrom?.Name ?? uw.GetById<TypeOfTransfer>(newRequest.TransferFromId)?.Name);
            }

            if (oldRequest.NullSafe(r => r.AttendantTypeId) != newRequest.NullSafe(r => r.AttendantTypeId))
            {
                diff.Append("Тип сопровождения ребёнка",
                    oldRequest.NullSafe(r => r.AttendantType.Name).FormatEx(val: string.Empty),
                    newRequest.NullSafe(r => r.AttendantType.Name).FormatEx(val: string.Empty));
            }

            if (oldRequest?.PlaceOfRestId != newRequest?.PlaceOfRestId)
            {
                diff.Append("Приоритетное направление отдыха", oldRequest?.PlaceOfRest?.Name ?? uw.GetById<PlaceOfRest>(oldRequest.PlaceOfRestId)?.Name,
                    newRequest?.PlaceOfRest?.Name ?? uw.GetById<PlaceOfRest>(newRequest.PlaceOfRestId)?.Name);
            }

            if ((oldRequest.PlacesOfRest?.Any() ?? false) || (newRequest.PlacesOfRest?.Any() ?? false))
            {
                var oldPorsIds = oldRequest.PlacesOfRest?.Select(x => x.PlaceOfRestId).ToList();
                var newPorsIds = newRequest.PlacesOfRest?.Select(x => x.PlaceOfRestId).ToList();
                if (!Enumerable.SequenceEqual(oldPorsIds, newPorsIds))
                {
                    var allIds = oldPorsIds.Union(newPorsIds);
                    var names = uw.GetSet<PlaceOfRest>().Where(por => allIds.Contains(por.Id)).Select(a => new {Id = a.Id, Name = a.Name}).ToList();
                    var resOld = new List<string>();
                    var resNew = new List<string>();
                    for (int i = 0; i < oldPorsIds.Count(); i++)
                    {
                        resOld.Add(names.Where(n => n.Id == oldPorsIds[i]).FirstOrDefault().Name);
                    }
                    for (int i = 0; i < newPorsIds.Count(); i++)
                    {
                        resNew.Add(names.Where(n => n.Id == newPorsIds[i]).FirstOrDefault().Name);
                    }
                    diff.Append("Дополнительные направления отдыха", string.Join(", ", resOld), string.Join(", ", resNew));
                }
            }

            if (oldRequest.NullSafe(r => r.SourceId) != newRequest.NullSafe(r => r.SourceId))
            {
                diff.Append("Источник заявления", oldRequest.NullSafe(r => r.Source.Name).FormatEx(val: string.Empty),
                    newRequest.NullSafe(r => r.Source.Name).FormatEx(val: string.Empty));
            }

            if (oldRequest.NullSafe(r => r.DeclineReasonId) != newRequest.NullSafe(r => r.DeclineReasonId))
            {
                diff.Append("Причина отказа", oldRequest.NullSafe(r => r.DeclineReason.Name).FormatEx(val: string.Empty),
                    newRequest.NullSafe(r => r.DeclineReason.Name).FormatEx(val: string.Empty));
            }

            if (oldRequest.NullSafe(r => r.CreateUserId) != newRequest.NullSafe(r => r.CreateUserId))
            {
                diff.Append("Автор", oldRequest.NullSafe(r => r.CreateUser.Name).FormatEx(val: string.Empty),
                    newRequest.NullSafe(r => r.CreateUser.Name).FormatEx(val: string.Empty));
            }

            if (oldRequest.NullSafe(r => r.RepresentInterestId) != newRequest.NullSafe(r => r.RepresentInterestId))
            {
                diff.Append("Представляет интересы", oldRequest.NullSafe(r => r.RepresentInterest.Name).FormatEx(val: string.Empty),
                    newRequest.NullSafe(r => r.RepresentInterest.Name).FormatEx(val: string.Empty));
            }

            var oldRequestFiles = oldRequest.NullSafe(r => r.Files) ?? new List<RequestFile>();
            var newRequestFiles = newRequest.NullSafe(r => r.Files) ?? new List<RequestFile>();
            var addFiles = newRequestFiles.Where(n => oldRequestFiles.All(o => o.Id != n.Id)).ToList();
            var removedFiles = oldRequestFiles.Where(o => newRequestFiles.All(n => o.Id != n.Id)).ToList();
            if (addFiles.Any())
            {
                diff.AppendMessage("Добавлены файлы: " + string.Join(" ,", addFiles.Select(f => f.FileTitle)));
            }

            if (removedFiles.Any())
            {
                diff.AppendMessage("Удалены файлы: " + string.Join(" ,", removedFiles.Select(f => f.FileTitle)));
            }

            return diff;
        }

        /// <summary>
        ///     Сравнить сведения о заявителе или о сопровождающем
        /// </summary>
        private static RequestDiff CompareApplicantInternal(Applicant oldApplicant, Applicant newApplicant,
            IUnitOfWork unitOfWork, bool isAttendant = false)
        {

            var objName = "Заявитель";

            if (isAttendant)
            {
                objName = "Сопровождающий";
            }

            var diff = new RequestDiff();

            diff.ObjectName = objName;
            if (oldApplicant == null && newApplicant == null)
            {
                return null;
            }
            else if (oldApplicant == null)
            {
                diff.Action = "Добавление";
                diff.Append("Фамилия", string.Empty, newApplicant.LastName.FormatEx(val: string.Empty));
                diff.Append("Имя", string.Empty, newApplicant.FirstName.FormatEx(val: string.Empty));
                diff.Append("Отчество", string.Empty, newApplicant.MiddleName.FormatEx(val: string.Empty));
                diff.Append("Признак что есть отчество", string.Empty, newApplicant.HaveMiddleName.FormatEx());
                diff.Append("Серия документа", string.Empty, newApplicant.DocumentSeria.FormatEx(val: string.Empty));
                diff.Append("Номер документа", string.Empty, newApplicant.DocumentNumber.FormatEx(val: string.Empty));
                diff.Append("Дата выдачи документа", string.Empty,
                    newApplicant.DocumentDateOfIssue.FormatEx(val: string.Empty));
                diff.Append("Кем выдан документ", string.Empty,
                    newApplicant.DocumentSubjectIssue.FormatEx(val: string.Empty));
                diff.Append("Код подразделения", string.Empty, newApplicant.DocumentCode.FormatEx(val: string.Empty));
                diff.Append("Телефон", string.Empty, newApplicant.Phone.FormatEx(val: string.Empty));
                diff.Append("Телефон (дополнительный)", string.Empty, newApplicant.AddonPhone.FormatEx(val: string.Empty));
                diff.Append("Электронная почта", string.Empty, newApplicant.Email.FormatEx(val: string.Empty));
                diff.Append("СНИЛС", string.Empty, newApplicant.Snils.FormatEx(val: string.Empty));
                diff.Append("Признак что заявитель сопровождающий", string.Empty, newApplicant.IsAccomp.FormatEx());
                diff.Append("Признак что заявитель", string.Empty, newApplicant.IsApplicant.FormatEx());
                diff.Append("Серия документа з/п", string.Empty, newApplicant.ForeginSeria.FormatEx(val: string.Empty));
                diff.Append("Номер документа з/п", string.Empty, newApplicant.ForeginNumber.FormatEx(val: string.Empty));
                diff.Append("Дата выдачи документа з/п", string.Empty,
                    newApplicant.ForeginDateOfIssue.FormatEx(val: string.Empty));
                diff.Append("Срок действия загран паспорта", string.Empty,
                    newApplicant.ForeginDateEnd.FormatEx(val: string.Empty));
                diff.Append("Пол", string.Empty, newApplicant.Male.FormatExGender(val: string.Empty));
                diff.Append("Дата рождения", string.Empty, newApplicant.DateOfBirth.FormatEx(val: string.Empty));
                diff.Append("Должность сопровождающего", string.Empty, newApplicant.Position.FormatEx(val: string.Empty));
                diff.Append("Квитанция об оплате имя", string.Empty,
                    newApplicant.PaymentFileTitle.FormatEx(val: string.Empty));
                diff.Append("Место рождения", string.Empty, newApplicant.PlaceOfBirth.FormatEx(val: string.Empty));
                diff.Append("Не явился в место отдыха", string.Empty, newApplicant.NotComeInPlaceOfRest.FormatEx());
                diff.Append("Серия свидетельства о рождении", string.Empty,
                    newApplicant.DocumentSeriaCertOfBirth.FormatEx(val: string.Empty));
                diff.Append("Номер свидетельтсва о рождении", string.Empty,
                    newApplicant.DocumentNumberCertOfBirth.FormatEx(val: string.Empty));
                diff.Append("Ключ для поиска похожих с свидетельством о рождении", string.Empty,
                    newApplicant.KeyOther.FormatEx(val: string.Empty));
                diff.Append("Загран паспорт имя", string.Empty, newApplicant.ForeginName.FormatEx(val: string.Empty));
                diff.Append("Загран паспрт фамилия", string.Empty,
                    newApplicant.ForeginLastName.FormatEx(val: string.Empty));
                diff.Append("Дата выдачи доверенности", string.Empty,
                    newApplicant.ProxyDateOfIssure.FormatEx(val: string.Empty));
                diff.Append("Имя натариуса", string.Empty, newApplicant.NotaryName.FormatEx(val: string.Empty));
                diff.Append("Дата окончания действия доверенности", string.Empty,
                    newApplicant.ProxyEndDate.FormatEx(val: string.Empty));
                diff.Append("Номер доверенности", string.Empty, newApplicant.ProxyNumber.FormatEx(val: string.Empty));

            }
            else if (newApplicant == null)
            {
                diff.Action = "Удаление";
                diff.Append("Фамилия", oldApplicant.LastName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Имя", oldApplicant.FirstName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Отчество", oldApplicant.MiddleName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Признак что есть отчество", oldApplicant.HaveMiddleName.FormatEx(), string.Empty);
                diff.Append("Серия документа", oldApplicant.DocumentSeria.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Номер документа", oldApplicant.DocumentNumber.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата выдачи документа", oldApplicant.DocumentDateOfIssue.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Кем выдан документ", oldApplicant.DocumentSubjectIssue.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Код подразделения", oldApplicant.DocumentCode.FormatEx(val: string.Empty),string.Empty);
                diff.Append("Телефон", oldApplicant.Phone.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Телефон (дополнительный)", oldApplicant.AddonPhone.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Электронная почта", oldApplicant.Email.FormatEx(val: string.Empty), string.Empty);
                diff.Append("СНИЛС", oldApplicant.Snils.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Признак что заявитель сопровождающий", oldApplicant.IsAccomp.FormatEx(), string.Empty);
                diff.Append("Признак что заявитель", oldApplicant.IsApplicant.FormatEx(), string.Empty);
                diff.Append("Серия документа з/п", oldApplicant.ForeginSeria.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Номер документа з/п", oldApplicant.ForeginNumber.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата выдачи документа з/п", oldApplicant.ForeginDateOfIssue.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Срок действия загран паспорта", oldApplicant.ForeginDateEnd.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Пол", oldApplicant.Male.FormatExGender(val: string.Empty), string.Empty);
                diff.Append("Дата рождения", oldApplicant.DateOfBirth.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Должность сопровождающего", oldApplicant.Position.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Квитанция об оплате имя", oldApplicant.PaymentFileTitle.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Место рождения", oldApplicant.PlaceOfBirth.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Не явился в место отдыха", oldApplicant.NotComeInPlaceOfRest.FormatEx(), string.Empty);
                diff.Append("Серия свидетельства о рождении",
                    oldApplicant.DocumentSeriaCertOfBirth.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Номер свидетельтсва о рождении",
                    oldApplicant.DocumentNumberCertOfBirth.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Ключ для поиска похожих с свидетельством о рождении",
                    oldApplicant.KeyOther.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Загран паспорт имя", oldApplicant.ForeginName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Загран паспрт фамилия", oldApplicant.ForeginLastName.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Дата выдачи доверенности", oldApplicant.ProxyDateOfIssure.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Имя натариуса", oldApplicant.NotaryName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата окончания действия доверенности", oldApplicant.ProxyEndDate.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Номер доверенности", oldApplicant.ProxyNumber.FormatEx(val: string.Empty), string.Empty);
            }
            else
            {
                diff.Action = "Изменение";
                if (oldApplicant.LastName != newApplicant.LastName)
                {
                    diff.Append("Фамилия", oldApplicant.LastName.FormatEx(val: string.Empty),
                        newApplicant.LastName.FormatEx(val: string.Empty));
                }

                if (oldApplicant.FirstName != newApplicant.FirstName)
                {
                    diff.Append("Имя", oldApplicant.FirstName.FormatEx(val: string.Empty),
                        newApplicant.FirstName.FormatEx(val: string.Empty));
                }

                if (oldApplicant.MiddleName != newApplicant.MiddleName)
                {
                    diff.Append("Отчество", oldApplicant.MiddleName.FormatEx(val: string.Empty),
                        newApplicant.MiddleName.FormatEx(val: string.Empty));
                }

                if (oldApplicant.HaveMiddleName != newApplicant.HaveMiddleName)
                {
                    diff.Append("Признак что есть отчество", oldApplicant.HaveMiddleName.FormatEx(),
                        newApplicant.HaveMiddleName.FormatEx());
                }

                if (oldApplicant.DocumentSeria != newApplicant.DocumentSeria)
                {
                    diff.Append("Серия документа", oldApplicant.DocumentSeria.FormatEx(val: string.Empty),
                        newApplicant.DocumentSeria.FormatEx(val: string.Empty));
                }

                if (oldApplicant.DocumentNumber != newApplicant.DocumentNumber)
                {
                    diff.Append("Номер документа", oldApplicant.DocumentNumber.FormatEx(val: string.Empty),
                        newApplicant.DocumentNumber.FormatEx(val: string.Empty));
                }

                if (oldApplicant.DocumentDateOfIssue != newApplicant.DocumentDateOfIssue)
                {
                    diff.Append("Дата выдачи документа", oldApplicant.DocumentDateOfIssue.FormatEx(val: string.Empty),
                        newApplicant.DocumentDateOfIssue.FormatEx(val: string.Empty));
                }

                if (oldApplicant.DocumentSubjectIssue != newApplicant.DocumentSubjectIssue)
                {
                    diff.Append("Кем выдан документ", oldApplicant.DocumentSubjectIssue.FormatEx(val: string.Empty),
                        newApplicant.DocumentSubjectIssue.FormatEx(val: string.Empty));
                }

                if (oldApplicant.DocumentCode != newApplicant.DocumentCode)
                {
                    diff.Append("Код подразделения", oldApplicant.DocumentCode.FormatEx(val: string.Empty),
                        newApplicant.DocumentCode.FormatEx(val: string.Empty));
                }

                if (oldApplicant.Phone != newApplicant.Phone)
                {
                    diff.Append("Телефон", oldApplicant.Phone.FormatEx(val: string.Empty),
                        newApplicant.Phone.FormatEx(val: string.Empty));
                }

                if (oldApplicant.AddonPhone != newApplicant.AddonPhone)
                {
                    diff.Append("Телефон (дополнительный)", oldApplicant.AddonPhone.FormatEx(val: string.Empty),
                        newApplicant.AddonPhone.FormatEx(val: string.Empty));
                }

                if (oldApplicant.Email != newApplicant.Email)
                {
                    diff.Append("Электронная почта", oldApplicant.Email.FormatEx(val: string.Empty),
                        newApplicant.Email.FormatEx(val: string.Empty));
                }

                if (oldApplicant.Snils != newApplicant.Snils)
                {
                    diff.Append("СНИЛС", oldApplicant.Snils.FormatEx(val: string.Empty),
                        newApplicant.Snils.FormatEx(val: string.Empty));
                }

                if (oldApplicant.IsAccomp != newApplicant.IsAccomp)
                {
                    diff.Append("Признак что заявитель сопровождающий", oldApplicant.IsAccomp.FormatEx(),
                        newApplicant.IsAccomp.FormatEx());
                }

                if (oldApplicant.IsApplicant != newApplicant.IsApplicant)
                {
                    diff.Append("Признак что заявитель", oldApplicant.IsApplicant.FormatEx(),
                        newApplicant.IsApplicant.FormatEx());
                }

                if (oldApplicant.ForeginSeria != newApplicant.ForeginSeria)
                {
                    diff.Append("Серия документа з/п", oldApplicant.ForeginSeria.FormatEx(val: string.Empty),
                        newApplicant.ForeginSeria.FormatEx(val: string.Empty));
                }

                if (oldApplicant.ForeginNumber != newApplicant.ForeginNumber)
                {
                    diff.Append("Номер документа з/п", oldApplicant.ForeginNumber.FormatEx(val: string.Empty),
                        newApplicant.ForeginNumber.FormatEx(val: string.Empty));
                }

                if (oldApplicant.ForeginSubjectIssue != newApplicant.ForeginSubjectIssue)
                {
                }

                if (oldApplicant.ForeginDateOfIssue != newApplicant.ForeginDateOfIssue)
                {
                    diff.Append("Дата выдачи документа з/п", oldApplicant.ForeginDateOfIssue.FormatEx(val: string.Empty),
                        newApplicant.ForeginDateOfIssue.FormatEx(val: string.Empty));
                }

                if (oldApplicant.ForeginDateEnd != newApplicant.ForeginDateEnd)
                {
                    diff.Append("Срок действия загран паспорта", oldApplicant.ForeginDateEnd.FormatEx(val: string.Empty),
                        newApplicant.ForeginDateEnd.FormatEx(val: string.Empty));
                }

                if (oldApplicant.Male != newApplicant.Male)
                {
                    diff.Append("Пол", oldApplicant.Male.FormatExGender(val: string.Empty),
                        newApplicant.Male.FormatExGender(val: string.Empty));
                }

                if (oldApplicant.DateOfBirth != newApplicant.DateOfBirth)
                {
                    diff.Append("Дата рождения", oldApplicant.DateOfBirth.FormatEx(val: string.Empty),
                        newApplicant.DateOfBirth.FormatEx(val: string.Empty));
                }

                if (oldApplicant.Position != newApplicant.Position)
                {
                    diff.Append("Должность сопровождающего", oldApplicant.Position.FormatEx(val: string.Empty),
                        newApplicant.Position.FormatEx(val: string.Empty));
                }

                if (oldApplicant.PaymentFileTitle != newApplicant.PaymentFileTitle)
                {
                    diff.Append("Квитанция об оплате имя", oldApplicant.PaymentFileTitle.FormatEx(val: string.Empty),
                        newApplicant.PaymentFileTitle.FormatEx(val: string.Empty));
                }

                if (oldApplicant.PlaceOfBirth != newApplicant.PlaceOfBirth)
                {
                    diff.Append("Место рождения", oldApplicant.PlaceOfBirth.FormatEx(val: string.Empty),
                        newApplicant.PlaceOfBirth.FormatEx(val: string.Empty));
                }

                if (oldApplicant.NotComeInPlaceOfRest != newApplicant.NotComeInPlaceOfRest)
                {
                    diff.Append("Не явился в место отдыха", oldApplicant.NotComeInPlaceOfRest.FormatEx(),
                        newApplicant.NotComeInPlaceOfRest.FormatEx());
                }

                if (oldApplicant.DocumentSeriaCertOfBirth != newApplicant.DocumentSeriaCertOfBirth)
                {
                    diff.Append("Серия свидетельства о рождении",
                        oldApplicant.DocumentSeriaCertOfBirth.FormatEx(val: string.Empty),
                        newApplicant.DocumentSeriaCertOfBirth.FormatEx(val: string.Empty));
                }

                if (oldApplicant.DocumentNumberCertOfBirth != newApplicant.DocumentNumberCertOfBirth)
                {
                    diff.Append("Номер свидетельтсва о рождении",
                        oldApplicant.DocumentNumberCertOfBirth.FormatEx(val: string.Empty),
                        newApplicant.DocumentNumberCertOfBirth.FormatEx(val: string.Empty));
                }

                if (oldApplicant.KeyOther != newApplicant.KeyOther)
                {
                    diff.Append("Ключ для поиска похожих с свидетельством о рождении",
                        oldApplicant.KeyOther.FormatEx(val: string.Empty), newApplicant.KeyOther.FormatEx(val: string.Empty));
                }

                if (oldApplicant.ForeginName != newApplicant.ForeginName)
                {
                    diff.Append("Загран паспорт имя", oldApplicant.ForeginName.FormatEx(val: string.Empty),
                        newApplicant.ForeginName.FormatEx(val: string.Empty));
                }

                if (oldApplicant.ForeginLastName != newApplicant.ForeginLastName)
                {
                    diff.Append("Загран паспрт фамилия", oldApplicant.ForeginLastName.FormatEx(val: string.Empty),
                        newApplicant.ForeginLastName.FormatEx(val: string.Empty));
                }

                if (oldApplicant.ProxyDateOfIssure != newApplicant.ProxyDateOfIssure)
                {
                    diff.Append("Дата выдачи доверенности", oldApplicant.ProxyDateOfIssure.FormatEx(val: string.Empty),
                        newApplicant.ProxyDateOfIssure.FormatEx(val: string.Empty));
                }

                if (oldApplicant.NotaryName != newApplicant.NotaryName)
                {
                    diff.Append("Имя натариуса", oldApplicant.NotaryName.FormatEx(val: string.Empty),
                        newApplicant.NotaryName.FormatEx(val: string.Empty));
                }

                if (oldApplicant.ProxyEndDate != newApplicant.ProxyEndDate)
                {
                    diff.Append("Дата окончания действия доверенности", oldApplicant.ProxyEndDate.FormatEx(val: string.Empty),
                        newApplicant.ProxyEndDate.FormatEx(val: string.Empty));
                }

                if (oldApplicant.ProxyNumber != newApplicant.ProxyNumber)
                {
                    diff.Append("Номер доверенности", oldApplicant.ProxyNumber.FormatEx(val: string.Empty),
                        newApplicant.ProxyNumber.FormatEx(val: string.Empty));
                }
            }

            if (oldApplicant.NullSafe(r => r.DocumentTypeId) != newApplicant.NullSafe(r => r.DocumentTypeId))
            {
                diff.Append("Вид документа заявителя",
                    oldApplicant.NullSafe(r => r.DocumentType.Name).FormatEx(val: string.Empty),
                    newApplicant.NullSafe(r => r.DocumentType.Name).FormatEx(val: string.Empty));
            }

            if (oldApplicant.NullSafe(r => r.ApplicantTypeId) != newApplicant.NullSafe(r => r.ApplicantTypeId))
            {
                diff.Append("Вид представительства",
                    oldApplicant.NullSafe(r => r.ApplicantType.Name).FormatEx(val: string.Empty),
                    newApplicant.NullSafe(r => r.ApplicantType.Name).FormatEx(val: string.Empty));
            }

            if (oldApplicant.NullSafe(r => r.ForeginTypeId) != newApplicant.NullSafe(r => r.ForeginTypeId))
            {
                diff.Append("Вид заграничного документа",
                    oldApplicant.NullSafe(r => r.ForeginType.Name).FormatEx(val: string.Empty),
                    newApplicant.NullSafe(r => r.ForeginType.Name).FormatEx(val: string.Empty));
            }

            if (oldApplicant.NullSafe(r => r.ChildListId) != newApplicant.NullSafe(r => r.ChildListId))
            {
                diff.Append("Список детей", oldApplicant.NullSafe(r => r.ChildList.Name).FormatEx(val: string.Empty),
                    newApplicant.NullSafe(r => r.ChildList.Name).FormatEx(val: string.Empty));
            }

            if (oldApplicant.NullSafe(r => r.ExcludeReasonId) != newApplicant.NullSafe(r => r.ExcludeReasonId))
            {
                diff.Append("Причина исключения из списка",
                    oldApplicant.NullSafe(r => r.ExcludeReason.Reason).FormatEx(val: string.Empty),
                    newApplicant.NullSafe(r => r.ExcludeReason.Reason).FormatEx(val: string.Empty));
            }

            if (oldApplicant.NullSafe(r => r.IncludeReasonId) != newApplicant.NullSafe(r => r.IncludeReasonId))
            {
                diff.Append("Причина включения в список",
                    oldApplicant.NullSafe(r => r.IncludeReason.Reason).FormatEx(val: string.Empty),
                    newApplicant.NullSafe(r => r.IncludeReason.Reason).FormatEx(val: string.Empty));
            }

            if (oldApplicant.NullSafe(r => r.TypeViolationId) != newApplicant.NullSafe(r => r.TypeViolationId))
            {
                var old = TypeViolationName(oldApplicant?.TypeViolationId, oldApplicant?.TypeViolation, unitOfWork);
                var cur = TypeViolationName(newApplicant?.TypeViolationId, newApplicant?.TypeViolation, unitOfWork);
                diff.Append("Вид нарушения", old, cur);
            }

            return diff;
        }

        /// <summary>
        ///     Сравнить сведения о представителе
        /// </summary>
        private static RequestDiff CompareAgentInternal(Agent oldAgent, Agent newAgent)
        {
            var diff = new RequestDiff();
            diff.ObjectName = "Представитель заявителя";
            if (oldAgent == null && newAgent == null)
            {
                return null;
            }
            else if (oldAgent == null)
            {
                diff.Action = "Добавление";
                diff.Append("Фамилия", string.Empty, newAgent.LastName.FormatEx(val: string.Empty));
                diff.Append("Имя", string.Empty, newAgent.FirstName.FormatEx(val: string.Empty));
                diff.Append("Отчество", string.Empty, newAgent.MiddleName.FormatEx(val: string.Empty));
                diff.Append("Дата рождения", string.Empty, newAgent.DateOfBirth.FormatEx(val: string.Empty));
                diff.Append("Серия документа", string.Empty, newAgent.DocumentSeria.FormatEx(val: string.Empty));
                diff.Append("Номер документа", string.Empty, newAgent.DocumentNumber.FormatEx(val: string.Empty));
                diff.Append("Дата выдачи документа", string.Empty,
                    newAgent.DocumentDateOfIssue.FormatEx(val: string.Empty));
                diff.Append("Кем выдан документ", string.Empty, newAgent.DocumentSubjectIssue.FormatEx(val: string.Empty));
                diff.Append("Телефон", string.Empty, newAgent.Phone.FormatEx(val: string.Empty));
                diff.Append("Электронная почта", string.Empty, newAgent.Email.FormatEx(val: string.Empty));
                diff.Append("Дата выдачи доверенности", string.Empty,
                    newAgent.ProxyDateOfIssure.FormatEx(val: string.Empty));
                diff.Append("Имя натариуса", string.Empty, newAgent.NotaryName.FormatEx(val: string.Empty));
                diff.Append("Дата окончания действия доверенности", string.Empty,
                    newAgent.ProxyEndDate.FormatEx(val: string.Empty));
                diff.Append("Номер доверенности", string.Empty, newAgent.ProxyNumber.FormatEx(val: string.Empty));
                diff.Append("СНИЛС", string.Empty, newAgent.Snils.FormatEx(val: string.Empty));
                diff.Append("Признак что есть отчество", string.Empty, newAgent.HaveMiddleName.FormatEx());
                diff.Append("Код подразделения", string.Empty, newAgent.DocumentCode.FormatEx(val: string.Empty));
            }
            else if (newAgent == null)
            {
                diff.Action = "Удаление";
                diff.Append("Фамилия", oldAgent.LastName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Имя", oldAgent.FirstName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Отчество", oldAgent.MiddleName.FormatEx(val: string.Empty), string.Empty);

                diff.Append("Дата рождения", oldAgent.DateOfBirth.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Серия документа", oldAgent.DocumentSeria.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Номер документа", oldAgent.DocumentNumber.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата выдачи документа", oldAgent.DocumentDateOfIssue.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Кем выдан документ", oldAgent.DocumentSubjectIssue.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Телефон", oldAgent.Phone.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Электронная почта", oldAgent.Email.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата выдачи доверенности", oldAgent.ProxyDateOfIssure.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Имя натариуса", oldAgent.NotaryName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата окончания действия доверенности", oldAgent.ProxyEndDate.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Номер доверенности", oldAgent.ProxyNumber.FormatEx(val: string.Empty), string.Empty);
                diff.Append("СНИЛС", oldAgent.Snils.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Признак что есть отчество", oldAgent.HaveMiddleName.FormatEx(), string.Empty);
                diff.Append("Код подразделения", oldAgent.DocumentCode.FormatEx(val: string.Empty), string.Empty);
            }
            else
            {
                diff.Action = "Изменение";
                if (oldAgent.LastName != newAgent.LastName)
                {
                    diff.Append("Фамилия", oldAgent.LastName.FormatEx(val: string.Empty),
                        newAgent.LastName.FormatEx(val: string.Empty));
                }

                if (oldAgent.FirstName != newAgent.FirstName)
                {
                    diff.Append("Имя", oldAgent.FirstName.FormatEx(val: string.Empty),
                        newAgent.FirstName.FormatEx(val: string.Empty));
                }

                if (oldAgent.MiddleName != newAgent.MiddleName)
                {
                    diff.Append("Отчество", oldAgent.MiddleName.FormatEx(val: string.Empty),
                        newAgent.MiddleName.FormatEx(val: string.Empty));
                }

                if (oldAgent.DateOfBirth != newAgent.DateOfBirth)
                {
                    diff.Append("Дата рождения", oldAgent.DateOfBirth.FormatEx(val: string.Empty),
                        newAgent.DateOfBirth.FormatEx(val: string.Empty));
                }

                if (oldAgent.DocumentSeria != newAgent.DocumentSeria)
                {
                    diff.Append("Серия документа", oldAgent.DocumentSeria.FormatEx(val: string.Empty),
                        newAgent.DocumentSeria.FormatEx(val: string.Empty));
                }

                if (oldAgent.DocumentNumber != newAgent.DocumentNumber)
                {
                    diff.Append("Номер документа", oldAgent.DocumentNumber.FormatEx(val: string.Empty),
                        newAgent.DocumentNumber.FormatEx(val: string.Empty));
                }

                if (oldAgent.DocumentDateOfIssue != newAgent.DocumentDateOfIssue)
                {
                    diff.Append("Дата выдачи документа", oldAgent.DocumentDateOfIssue.FormatEx(val: string.Empty),
                        newAgent.DocumentDateOfIssue.FormatEx(val: string.Empty));
                }

                if (oldAgent.DocumentSubjectIssue != newAgent.DocumentSubjectIssue)
                {
                    diff.Append("Кем выдан документ", oldAgent.DocumentSubjectIssue.FormatEx(val: string.Empty),
                        newAgent.DocumentSubjectIssue.FormatEx(val: string.Empty));
                }

                if (oldAgent.Phone != newAgent.Phone)
                {
                    diff.Append("Телефон", oldAgent.Phone.FormatEx(val: string.Empty),
                        newAgent.Phone.FormatEx(val: string.Empty));
                }

                if (oldAgent.Email != newAgent.Email)
                {
                    diff.Append("Электронная почта", oldAgent.Email.FormatEx(val: string.Empty),
                        newAgent.Email.FormatEx(val: string.Empty));
                }

                if (oldAgent.ProxyDateOfIssure != newAgent.ProxyDateOfIssure)
                {
                    diff.Append("Дата выдачи доверенности", oldAgent.ProxyDateOfIssure.FormatEx(val: string.Empty),
                        newAgent.ProxyDateOfIssure.FormatEx(val: string.Empty));
                }

                if (oldAgent.NotaryName != newAgent.NotaryName)
                {
                    diff.Append("Имя натариуса", oldAgent.NotaryName.FormatEx(val: string.Empty),
                        newAgent.NotaryName.FormatEx(val: string.Empty));
                }

                if (oldAgent.ProxyEndDate != newAgent.ProxyEndDate)
                {
                    diff.Append("Дата окончания действия доверенности", oldAgent.ProxyEndDate.FormatEx(val: string.Empty),
                        newAgent.ProxyEndDate.FormatEx(val: string.Empty));
                }

                if (oldAgent.ProxyNumber != newAgent.ProxyNumber)
                {
                    diff.Append("Номер доверенности", oldAgent.ProxyNumber.FormatEx(val: string.Empty),
                        newAgent.ProxyNumber.FormatEx(val: string.Empty));
                }

                if (oldAgent.Snils != newAgent.Snils)
                {
                    diff.Append("СНИЛС", oldAgent.Snils.FormatEx(val: string.Empty),
                        newAgent.Snils.FormatEx(val: string.Empty));
                }

                if (oldAgent.HaveMiddleName != newAgent.HaveMiddleName)
                {
                    diff.Append("Признак что есть отчество", oldAgent.HaveMiddleName.FormatEx(),
                        newAgent.HaveMiddleName.FormatEx());
                }

                if (oldAgent.DocumentCode != newAgent.DocumentCode)
                {
                    diff.Append("Код подразделения", oldAgent.DocumentCode.FormatEx(val: string.Empty),
                        newAgent.DocumentCode.FormatEx(val: string.Empty));
                }
            }

            if (oldAgent.NullSafe(r => r.DocumentTypeId) != newAgent.NullSafe(r => r.DocumentTypeId))
            {
                diff.Append("Вид документа заявителя",
                    oldAgent.NullSafe(r => r.DocumentType.Name).FormatEx(val: string.Empty),
                    newAgent.NullSafe(r => r.DocumentType.Name).FormatEx(val: string.Empty));
            }

            return diff;
        }

        /// <summary>
        ///     Сравнить сведения о ребенке
        /// </summary>
        private static RequestDiff CompareChildInternal(Child oldChild, Child newChild, IUnitOfWork unitOfWork)
        {
            var diff = new RequestDiff();
            diff.ObjectName = "Ребёнок";
            if (oldChild == null && newChild == null)
            {
                return null;
            }
            else if (oldChild == null)
            {
                diff.Action = "Добавление";
                diff.Append("Фамилия", string.Empty, newChild.LastName.FormatEx(val: string.Empty));
                diff.Append("Имя", string.Empty, newChild.FirstName.FormatEx(val: string.Empty));
                diff.Append("Отчество", string.Empty, newChild.MiddleName.FormatEx(val: string.Empty));
                diff.Append("Признак что есть отчество", string.Empty, newChild.HaveMiddleName.FormatEx());
                diff.Append("Серия документа", string.Empty, newChild.DocumentSeria.FormatEx(val: string.Empty));
                diff.Append("Номер документа", string.Empty, newChild.DocumentNumber.FormatEx(val: string.Empty));
                diff.Append("Дата выдачи документа", string.Empty,
                    newChild.DocumentDateOfIssue.FormatEx(val: string.Empty));
                diff.Append("Кем выдан документ", string.Empty, newChild.DocumentSubjectIssue.FormatEx(val: string.Empty));
                diff.Append("Дата рождения", string.Empty, newChild.DateOfBirth.FormatEx(val: string.Empty));
                diff.Append("Дата возникновления льготы", string.Empty, newChild.BenefitDate.FormatEx(val: string.Empty));
                diff.Append("Признак что льгота бессрочная", string.Empty, newChild.BenefitNeverEnd.FormatEx());
                diff.Append("Дата окончания льготы", string.Empty, newChild.BenefitEndDate.FormatEx(val: string.Empty));
                diff.Append("Номер документа льготы", string.Empty, newChild.BenefitNumber.FormatEx(val: string.Empty));
                diff.Append("Дата документа льготы", string.Empty,
                    newChild.BenefitSubjectIssue.FormatEx(val: string.Empty));
                diff.Append("Дата выдачи документа льготы", string.Empty,
                    newChild.BenefitDateOfIssure.FormatEx(val: string.Empty));
                diff.Append("Серия документа з/п", string.Empty, newChild.ForeginSeria.FormatEx(val: string.Empty));
                diff.Append("Номер документа з/п", string.Empty, newChild.ForeginNumber.FormatEx(val: string.Empty));
                diff.Append("Дата выдачи документа з/п", string.Empty,
                    newChild.ForeginDateOfIssue.FormatEx(val: string.Empty));
                diff.Append("Срок действия загран паспорта", string.Empty,
                    newChild.ForeginDateEnd.FormatEx(val: string.Empty));
                diff.Append("Школы нет в списке", string.Empty, newChild.SchoolNotPresent.FormatEx());
                diff.Append("Ребёнок зарегистрирован по месту жительства в Москве", string.Empty,
                    newChild.RegisteredInMoscow.FormatEx());
                diff.Append("Пол", string.Empty, newChild.Male.FormatExGender());
                diff.Append("СНИЛС", string.Empty, newChild.Snils.FormatEx(val: string.Empty));
                diff.Append("Документ подтверждающий льготу имя", string.Empty,
                    newChild.DocumentFileTitle.FormatEx(val: string.Empty));
                diff.Append("Контактный телефон", string.Empty, newChild.ContactPhone.FormatEx(val: string.Empty));
                diff.Append("Фамилия представителя", string.Empty, newChild.ContactLastName.FormatEx(val: string.Empty));
                diff.Append("Имя представителя", string.Empty, newChild.ContactFirstName.FormatEx(val: string.Empty));
                diff.Append("Отчество представителя", string.Empty, newChild.ContactMiddleName.FormatEx(val: string.Empty));
                diff.Append("Признак что есть отчество у представителя", string.Empty,
                    newChild.ContactHaveMiddleName.FormatEx());
                diff.Append("Место рождения", string.Empty, newChild.PlaceOfBirth.FormatEx(val: string.Empty));
                diff.Append("Серия свидетельства о рождении", string.Empty,
                    newChild.DocumentSeriaCertOfBirth.FormatEx(val: string.Empty));
                diff.Append("Номер свидетельтсва о рождении", string.Empty,
                    newChild.DocumentNumberCertOfBirth.FormatEx(val: string.Empty));
                diff.Append("Загран паспорт имя", string.Empty, newChild.ForeginName.FormatEx(val: string.Empty));
                diff.Append("Загран паспрт фамилия", string.Empty, newChild.ForeginLastName.FormatEx(val: string.Empty));
                diff.Append("Размер компенсации", string.Empty, newChild.AmountOfCompensation.FormatEx(val: string.Empty));
                diff.Append("Стоимость проезда ребёнка", string.Empty, newChild.CostOfRide.FormatEx(val: string.Empty));
                diff.Append("Стоимость путевки", string.Empty, newChild.CostOfTour.FormatEx(val: string.Empty));
                diff.Append("Код подразделения", string.Empty, newChild.DocumentCode.FormatEx(val: string.Empty));
            }
            else if (newChild == null)
            {
                diff.Action = "Удаление";
                diff.Append("Фамилия", oldChild.LastName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Имя", oldChild.FirstName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Отчество", oldChild.MiddleName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Признак что есть отчество", oldChild.HaveMiddleName.FormatEx(), string.Empty);
                diff.Append("Серия документа", oldChild.DocumentSeria.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Номер документа", oldChild.DocumentNumber.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата выдачи документа", oldChild.DocumentDateOfIssue.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Кем выдан документ", oldChild.DocumentSubjectIssue.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата рождения", oldChild.DateOfBirth.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата возникновления льготы", oldChild.BenefitDate.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Признак что льгота бессрочная", oldChild.BenefitNeverEnd.FormatEx(), string.Empty);
                diff.Append("Дата окончания льготы", oldChild.BenefitEndDate.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Номер документа льготы", oldChild.BenefitNumber.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата документа льготы", oldChild.BenefitSubjectIssue.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Дата выдачи документа льготы", oldChild.BenefitDateOfIssure.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Серия документа з/п", oldChild.ForeginSeria.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Номер документа з/п", oldChild.ForeginNumber.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата выдачи документа з/п", oldChild.ForeginDateOfIssue.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Срок действия загран паспорта", oldChild.ForeginDateEnd.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Школы нет в списке", oldChild.SchoolNotPresent.FormatEx(), string.Empty);
                diff.Append("Ребенок зарегистрирован по месту жительства в Москве", oldChild.RegisteredInMoscow.FormatEx(),
                    string.Empty);
                diff.Append("Пол", oldChild.Male.FormatExGender(), string.Empty);
                diff.Append("СНИЛС", oldChild.Snils.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Документ подтверждающий льготу имя", oldChild.DocumentFileTitle.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Контактный телефон", oldChild.ContactPhone.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Фамилия представителя", oldChild.ContactLastName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Имя представителя", oldChild.ContactFirstName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Отчество представителя", oldChild.ContactMiddleName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Признак что есть отчество у представителя", oldChild.ContactHaveMiddleName.FormatEx(),
                    string.Empty);
                diff.Append("Место рождения", oldChild.PlaceOfBirth.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Серия свидетельства о рождении", oldChild.DocumentSeriaCertOfBirth.FormatEx(val: string.Empty),
                    string.Empty);
                diff.Append("Номер свидетельтсва о рождении",
                    oldChild.DocumentNumberCertOfBirth.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Загран паспорт имя", oldChild.ForeginName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Загран паспрт фамилия", oldChild.ForeginLastName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Размер компенсации", oldChild.AmountOfCompensation.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Стоимость проезда ребёнка", oldChild.CostOfRide.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Стоимость путевки", oldChild.CostOfTour.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Код подразделения", oldChild.DocumentCode.FormatEx(val: string.Empty), string.Empty);
            }
            else
            {
                diff.Action = "Изменение";
                if (oldChild.LastName != newChild.LastName)
                {
                    diff.Append("Фамилия", oldChild.LastName.FormatEx(val: string.Empty),
                        newChild.LastName.FormatEx(val: string.Empty));
                }

                if (oldChild.FirstName != newChild.FirstName)
                {
                    diff.Append("Имя", oldChild.FirstName.FormatEx(val: string.Empty),
                        newChild.FirstName.FormatEx(val: string.Empty));
                }

                if (oldChild.MiddleName != newChild.MiddleName)
                {
                    diff.Append("Отчество", oldChild.MiddleName.FormatEx(val: string.Empty),
                        newChild.MiddleName.FormatEx(val: string.Empty));
                }

                if (oldChild.HaveMiddleName != newChild.HaveMiddleName)
                {
                    diff.Append("Признак что есть отчество", oldChild.HaveMiddleName.FormatEx(),
                        newChild.HaveMiddleName.FormatEx());
                }

                if (oldChild.DocumentSeria != newChild.DocumentSeria)
                {
                    diff.Append("Серия документа", oldChild.DocumentSeria.FormatEx(val: string.Empty),
                        newChild.DocumentSeria.FormatEx(val: string.Empty));
                }

                if (oldChild.DocumentNumber != newChild.DocumentNumber)
                {
                    diff.Append("Номер документа", oldChild.DocumentNumber.FormatEx(val: string.Empty),
                        newChild.DocumentNumber.FormatEx(val: string.Empty));
                }

                if (oldChild.DocumentDateOfIssue != newChild.DocumentDateOfIssue)
                {
                    diff.Append("Дата выдачи документа", oldChild.DocumentDateOfIssue.FormatEx(val: string.Empty),
                        newChild.DocumentDateOfIssue.FormatEx(val: string.Empty));
                }

                if (oldChild.DocumentSubjectIssue != newChild.DocumentSubjectIssue)
                {
                    diff.Append("Кем выдан документ", oldChild.DocumentSubjectIssue.FormatEx(val: string.Empty),
                        newChild.DocumentSubjectIssue.FormatEx(val: string.Empty));
                }

                if (oldChild.DateOfBirth != newChild.DateOfBirth)
                {
                    diff.Append("Дата рождения", oldChild.DateOfBirth.FormatEx(val: string.Empty),
                        newChild.DateOfBirth.FormatEx(val: string.Empty));
                }

                if (oldChild.BenefitDate != newChild.BenefitDate)
                {
                    diff.Append("Дата возникновления льготы", oldChild.BenefitDate.FormatEx(val: string.Empty),
                        newChild.BenefitDate.FormatEx(val: string.Empty));
                }

                if (oldChild.BenefitNeverEnd != newChild.BenefitNeverEnd)
                {
                    diff.Append("Признак что льгота бессрочная", oldChild.BenefitNeverEnd.FormatEx(),
                        newChild.BenefitNeverEnd.FormatEx());
                }

                if (oldChild.BenefitEndDate != newChild.BenefitEndDate)
                {
                    diff.Append("Дата окончания льготы", oldChild.BenefitEndDate.FormatEx(val: string.Empty),
                        newChild.BenefitEndDate.FormatEx(val: string.Empty));
                }

                if (oldChild.BenefitNumber != newChild.BenefitNumber)
                {
                    diff.Append("Номер документа льготы", oldChild.BenefitNumber.FormatEx(val: string.Empty),
                        newChild.BenefitNumber.FormatEx(val: string.Empty));
                }

                if (oldChild.BenefitSubjectIssue != newChild.BenefitSubjectIssue)
                {
                    diff.Append("Дата документа льготы", oldChild.BenefitSubjectIssue.FormatEx(val: string.Empty),
                        newChild.BenefitSubjectIssue.FormatEx(val: string.Empty));
                }

                if (oldChild.BenefitDateOfIssure != newChild.BenefitDateOfIssure)
                {
                    diff.Append("Дата выдачи документа льготы", oldChild.BenefitDateOfIssure.FormatEx(val: string.Empty),
                        newChild.BenefitDateOfIssure.FormatEx(val: string.Empty));
                }

                if (oldChild.ForeginSeria != newChild.ForeginSeria)
                {
                    diff.Append("Серия документа з/п", oldChild.ForeginSeria.FormatEx(val: string.Empty),
                        newChild.ForeginSeria.FormatEx(val: string.Empty));
                }

                if (oldChild.ForeginNumber != newChild.ForeginNumber)
                {
                    diff.Append("Номер документа з/п", oldChild.ForeginNumber.FormatEx(val: string.Empty),
                        newChild.ForeginNumber.FormatEx(val: string.Empty));
                }

                if (oldChild.ForeginDateOfIssue != newChild.ForeginDateOfIssue)
                {
                    diff.Append("Дата выдачи документа з/п", oldChild.ForeginDateOfIssue.FormatEx(val: string.Empty),
                        newChild.ForeginDateOfIssue.FormatEx(val: string.Empty));
                }

                if (oldChild.ForeginDateEnd != newChild.ForeginDateEnd)
                {
                    diff.Append("Срок действия загран паспорта", oldChild.ForeginDateEnd.FormatEx(val: string.Empty),
                        newChild.ForeginDateEnd.FormatEx(val: string.Empty));
                }

                if (oldChild.SchoolNotPresent != newChild.SchoolNotPresent)
                {
                    diff.Append("Школы нет в списке", oldChild.SchoolNotPresent.FormatEx(),
                        newChild.SchoolNotPresent.FormatEx());
                }

                if (oldChild.RegisteredInMoscow != newChild.RegisteredInMoscow)
                {
                    diff.Append("Ребёнок зарегистрирован по месту жительства в Москве",
                        oldChild.RegisteredInMoscow.FormatEx(), newChild.RegisteredInMoscow.FormatEx());
                }

                if (oldChild.Male != newChild.Male)
                {
                    diff.Append("Пол", oldChild.Male.FormatExGender(), newChild.Male.FormatExGender());
                }

                if (oldChild.Snils != newChild.Snils)
                {
                    diff.Append("СНИЛС", oldChild.Snils.FormatEx(val: string.Empty),
                        newChild.Snils.FormatEx(val: string.Empty));
                }

                if (oldChild.IsInvalid != newChild.IsInvalid)
                {
                }

                if (oldChild.DocumentFileTitle != newChild.DocumentFileTitle)
                {
                    diff.Append("Документ подтверждающий льготу имя", oldChild.DocumentFileTitle.FormatEx(val: string.Empty),
                        newChild.DocumentFileTitle.FormatEx(val: string.Empty));
                }

                if (oldChild.ContactPhone != newChild.ContactPhone)
                {
                    diff.Append("Контактный телефон", oldChild.ContactPhone.FormatEx(val: string.Empty),
                        newChild.ContactPhone.FormatEx(val: string.Empty));
                }

                if (oldChild.ContactLastName != newChild.ContactLastName)
                {
                    diff.Append("Фамилия представителя", oldChild.ContactLastName.FormatEx(val: string.Empty),
                        newChild.ContactLastName.FormatEx(val: string.Empty));
                }

                if (oldChild.ContactFirstName != newChild.ContactFirstName)
                {
                    diff.Append("Имя представителя", oldChild.ContactFirstName.FormatEx(val: string.Empty),
                        newChild.ContactFirstName.FormatEx(val: string.Empty));
                }

                if (oldChild.ContactMiddleName != newChild.ContactMiddleName)
                {
                    diff.Append("Отчество представителя", oldChild.ContactMiddleName.FormatEx(val: string.Empty),
                        newChild.ContactMiddleName.FormatEx(val: string.Empty));
                }

                if (oldChild.ContactHaveMiddleName != newChild.ContactHaveMiddleName)
                {
                    diff.Append("Признак что есть отчество у представителя", oldChild.ContactHaveMiddleName.FormatEx(),
                        newChild.ContactHaveMiddleName.FormatEx());
                }

                if (oldChild.PlaceOfBirth != newChild.PlaceOfBirth)
                {
                    diff.Append("Место рождения", oldChild.PlaceOfBirth.FormatEx(val: string.Empty),
                        newChild.PlaceOfBirth.FormatEx(val: string.Empty));
                }

                if (oldChild.DocumentSeriaCertOfBirth != newChild.DocumentSeriaCertOfBirth)
                {
                    diff.Append("Серия свидетельства о рождении",
                        oldChild.DocumentSeriaCertOfBirth.FormatEx(val: string.Empty),
                        newChild.DocumentSeriaCertOfBirth.FormatEx(val: string.Empty));
                }

                if (oldChild.DocumentNumberCertOfBirth != newChild.DocumentNumberCertOfBirth)
                {
                    diff.Append("Номер свидетельтсва о рождении",
                        oldChild.DocumentNumberCertOfBirth.FormatEx(val: string.Empty),
                        newChild.DocumentNumberCertOfBirth.FormatEx(val: string.Empty));
                }

                if (oldChild.ForeginName != newChild.ForeginName)
                {
                    diff.Append("Загран паспорт имя", oldChild.ForeginName.FormatEx(val: string.Empty),
                        newChild.ForeginName.FormatEx(val: string.Empty));
                }

                if (oldChild.ForeginLastName != newChild.ForeginLastName)
                {
                    diff.Append("Загран паспрт фамилия", oldChild.ForeginLastName.FormatEx(val: string.Empty),
                        newChild.ForeginLastName.FormatEx(val: string.Empty));
                }

                if (oldChild.AmountOfCompensation != newChild.AmountOfCompensation)
                {
                    diff.Append("Размер компенсации", oldChild.AmountOfCompensation.FormatEx(val: string.Empty),
                        newChild.AmountOfCompensation.FormatEx(val: string.Empty));
                }

                if (oldChild.CostOfRide != newChild.CostOfRide)
                {
                    diff.Append("Стоимость проезда ребёнка", oldChild.CostOfRide.FormatEx(val: string.Empty),
                        newChild.CostOfRide.FormatEx(val: string.Empty));
                }

                if (oldChild.CostOfTour != newChild.CostOfTour)
                {
                    diff.Append("Стоимость путевки", oldChild.CostOfTour.FormatEx(val: string.Empty),
                        newChild.CostOfTour.FormatEx(val: string.Empty));
                }

                if (oldChild.DocumentCode != newChild.DocumentCode)
                {
                    diff.Append("Код подразделения", oldChild.DocumentCode.FormatEx(val: string.Empty),
                        newChild.DocumentCode.FormatEx(val: string.Empty));
                }

            }

            if (oldChild.NullSafe(r => r.SchoolId) != newChild.NullSafe(r => r.SchoolId))
            {
                diff.Append("Школа",
                    oldChild?.School?.Name ?? unitOfWork.GetById<School>(oldChild?.SchoolId)?.Name,
                    newChild?.School?.Name ?? unitOfWork.GetById<School>(newChild?.SchoolId)?.Name);
            }

            if (oldChild.NullSafe(r => r.DocumentTypeId) != newChild.NullSafe(r => r.DocumentTypeId))
            {
                diff.Append("Вид документа",
                    oldChild?.DocumentType?.Name ?? unitOfWork.GetById<DocumentType>(oldChild?.DocumentTypeId)?.Name,
                    newChild?.DocumentType?.Name ?? unitOfWork.GetById<DocumentType>(newChild?.DocumentTypeId)?.Name);
            }

            if (oldChild.NullSafe(r => r.BenefitTypeId) != newChild.NullSafe(r => r.BenefitTypeId))
            {
                diff.Append("Вид льготы",
                    oldChild?.BenefitType?.Name ?? unitOfWork.GetById<BenefitType>(oldChild?.BenefitTypeId)?.Name,
                    newChild?.BenefitType?.Name ?? unitOfWork.GetById<BenefitType>(newChild?.BenefitTypeId)?.Name);
            }

            if (oldChild.NullSafe(r => r.AddressId) != newChild.NullSafe(r => r.AddressId))
            {
                diff.Append("Адрес регистрации",
                    oldChild.NullSafe(r => r.Address.BtiAddress.FullAddress ?? r.Address.Name).FormatEx(val: string.Empty),
                    newChild.NullSafe(r => r.Address.BtiAddress.FullAddress ?? r.Address.Name).FormatEx(val: string.Empty));
            }
            else if (!string.Equals(oldChild.NullSafe(r => r.Address.Name), newChild.NullSafe(r => r.Address.Name), StringComparison.OrdinalIgnoreCase)
                || !string.Equals(oldChild.NullSafe(r => r.Address.Appartment), newChild.NullSafe(r => r.Address.Appartment), StringComparison.OrdinalIgnoreCase))
            {
                diff.Append("Адрес регистрации",
                    $"{oldChild.NullSafe(r => r.Address.Name)}, квартира: {oldChild.NullSafe(r => r.Address.Appartment)}",
                    $"{newChild.NullSafe(r => r.Address.Name)}, квартира: {newChild.NullSafe(r => r.Address.Appartment)}");
            }

            if (oldChild.NullSafe(r => r.BenefitDocTypeId) != newChild.NullSafe(r => r.BenefitDocTypeId))
            {
                diff.Append("Вид документа подтверждающего льготу",
                    oldChild.NullSafe(r => r.BenefitDocType.Name).FormatEx(val: string.Empty),
                    newChild.NullSafe(r => r.BenefitDocType.Name).FormatEx(val: string.Empty));
            }

            if (oldChild.NullSafe(r => r.ForeginTypeId) != newChild.NullSafe(r => r.ForeginTypeId))
            {
                diff.Append("Вид документ удостоверяющего личность за рубежом",
                    oldChild.NullSafe(r => r.ForeginType.Name).FormatEx(val: string.Empty),
                    newChild.NullSafe(r => r.ForeginType.Name).FormatEx(val: string.Empty));
            }

            if (oldChild.NullSafe(r => r.StatusByChildId) != newChild.NullSafe(r => r.StatusByChildId))
            {
                diff.Append("Статус по отношению к ребёнку",
                    oldChild?.StatusByChild?.Name ?? unitOfWork.GetById<StatusByChild>(oldChild?.StatusByChildId)?.Name,
                    newChild?.StatusByChild?.Name ?? unitOfWork.GetById<StatusByChild>(newChild?.StatusByChildId)?.Name);
            }

            if (oldChild.NullSafe(r => r.BenefitApproveTypeId) != newChild.NullSafe(r => r.BenefitApproveTypeId))
            {
                diff.Append("Тип подтверждения льготы",
                    oldChild.NullSafe(r => r.BenefitApproveType.Name).FormatEx(val: string.Empty),
                    newChild.NullSafe(r => r.BenefitApproveType.Name).FormatEx(val: string.Empty));
            }

            if (oldChild.NullSafe(r => r.TypeOfRestrictionId) != newChild.NullSafe(r => r.TypeOfRestrictionId))
            {
                diff.Append("Вид ограничения",
                    oldChild?.TypeOfRestriction?.Name ?? unitOfWork.GetById<TypeOfRestriction>(oldChild?.TypeOfRestrictionId)?.Name,
                    newChild?.TypeOfRestriction?.Name ?? unitOfWork.GetById<TypeOfSubRestriction>(newChild?.TypeOfRestrictionId)?.Name);
            }

            if (oldChild.NullSafe(r => r.TypeOfSubRestrictionId) != newChild.NullSafe(r => r.TypeOfSubRestrictionId))
            {
                diff.Append("Подвид ограничения",
                    oldChild?.TypeOfSubRestriction?.Name ?? unitOfWork.GetById<TypeOfSubRestriction>(oldChild?.TypeOfSubRestrictionId)?.Name,
                    newChild?.TypeOfSubRestriction?.Name ?? unitOfWork.GetById<TypeOfSubRestriction>(newChild?.TypeOfSubRestrictionId)?.Name);
            }

            if (oldChild.NullSafe(r => r.BenefitGroupInvalidId) != newChild.NullSafe(r => r.BenefitGroupInvalidId))
            {
                diff.Append("Группа инвалидности",
                    oldChild.NullSafe(r => r.BenefitGroupInvalid.Name).FormatEx(val: string.Empty),
                    newChild.NullSafe(r => r.BenefitGroupInvalid.Name).FormatEx(val: string.Empty));
            }

            if (oldChild.NullSafe(r => r.TypeViolationId) != newChild.NullSafe(r => r.TypeViolationId))
            {
                var old = TypeViolationName(oldChild?.TypeViolationId, oldChild?.TypeViolation, unitOfWork);
                var cur = TypeViolationName(newChild?.TypeViolationId, newChild?.TypeViolation, unitOfWork);
                diff.Append("Вид нарушения", old, cur);
            }

            if (oldChild.NullSafe(r => r.RequestInformationVoucherId) != newChild.NullSafe(r => r.RequestInformationVoucherId))
            {
                var oldVoucher = oldChild.RequestInformationVoucher ?? unitOfWork.GetById<RequestInformationVoucher>(oldChild?.RequestInformationVoucherId);
                var newVoucher = newChild.RequestInformationVoucher ?? unitOfWork.GetById<RequestInformationVoucher>(newChild?.RequestInformationVoucherId);
                if (oldVoucher != null && newVoucher != null)
                {
                    diff.Append("Путевка",
                        $"{oldVoucher.OrganizationName} {oldVoucher.DateFrom?.ToString("dd.mm.yyyy")} - {oldVoucher.DateTo?.ToString("dd.mm.yyyy")}",
                        $"{newVoucher.OrganizationName} {newVoucher.DateFrom?.ToString("dd.mm.yyyy")} - {newVoucher.DateTo?.ToString("dd.mm.yyyy")}");
                }
            }

            return diff;
        }

        /// <summary>
        ///     Сравнить сведения о дополнительных услугах
        /// </summary>
        private static RequestDiff CompareAddonServiceInternal(AddonServicesLink oldService, AddonServicesLink newService)
        {
            var diff = new RequestDiff();
            diff.ObjectName = "Услуга";
            if (oldService == null && newService == null)
            {
                return null;
            }
            else if (oldService == null)
            {
                diff.Action = "Добавление";
                diff.Append("Цена", string.Empty, newService.Price.FormatEx(val: string.Empty));
                diff.Append("Количество услуг", string.Empty, newService.CountService.FormatEx(val: string.Empty));
                diff.Append("Дата создания", string.Empty, newService.DateCreate.FormatEx(val: string.Empty));
                diff.Append("Дата изменения", string.Empty, newService.DateChange.FormatEx(val: string.Empty));
                diff.Append("Дата действия с", string.Empty, newService.DateFrom.FormatEx(val: string.Empty));
                diff.Append("Дата действия по", string.Empty, newService.DateTo.FormatEx(val: string.Empty));
            }
            else if (newService == null)
            {
                diff.Action = "Удаление";
                diff.Append("Цена", oldService.Price.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Количество услуг", oldService.CountService.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата создания", oldService.DateCreate.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата изменения", oldService.DateChange.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата действия с", oldService.DateFrom.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата действия по", oldService.DateTo.FormatEx(val: string.Empty), string.Empty);
            }
            else
            {
                diff.Action = "Изменение";
                if (oldService.Price != newService.Price)
                {
                    diff.Append("Цена", oldService.Price.FormatEx(val: string.Empty),
                        newService.Price.FormatEx(val: string.Empty));
                }

                if (oldService.CountService != newService.CountService)
                {
                    diff.Append("Количество услуг", oldService.CountService.FormatEx(val: string.Empty),
                        newService.CountService.FormatEx(val: string.Empty));
                }

                if (oldService.DateCreate != newService.DateCreate)
                {
                    diff.Append("Дата создания", oldService.DateCreate.FormatEx(val: string.Empty),
                        newService.DateCreate.FormatEx(val: string.Empty));
                }

                if (oldService.DateChange != newService.DateChange)
                {
                    diff.Append("Дата изменения", oldService.DateChange.FormatEx(val: string.Empty),
                        newService.DateChange.FormatEx(val: string.Empty));
                }

                if (oldService.DateFrom != newService.DateFrom)
                {
                    diff.Append("Дата действия с", oldService.DateFrom.FormatEx(val: string.Empty),
                        newService.DateFrom.FormatEx(val: string.Empty));
                }

                if (oldService.DateTo != newService.DateTo)
                {
                    diff.Append("Дата действия по", oldService.DateTo.FormatEx(val: string.Empty),
                        newService.DateTo.FormatEx(val: string.Empty));
                }
            }

            if (oldService.NullSafe(r => r.AddonServices) != newService.NullSafe(r => r.AddonServices))
            {
                diff.Append("Услуга", oldService.NullSafe(r => r.AddonServices.Name).FormatEx(val: string.Empty),
                    newService.NullSafe(r => r.AddonServices.Name).FormatEx(val: string.Empty));
            }

            if (oldService.NullSafe(r => r.ChildId) != newService.NullSafe(r => r.ChildId))
            {
                diff.Append("Ребёнок",
                    (oldService.NullSafe(r => r.Child.LastName) + " " + oldService.NullSafe(r => r.Child.FirstName) + " " +
                     oldService.NullSafe(r => r.Child.MiddleName)).FormatEx(val: string.Empty),
                    (newService.NullSafe(r => r.Child.LastName) + " " + newService.NullSafe(r => r.Child.FirstName) + " " +
                     newService.NullSafe(r => r.Child.MiddleName)).FormatEx(val: string.Empty));
            }

            if (oldService.NullSafe(r => r.ApplicantId) != newService.NullSafe(r => r.ApplicantId))
            {
                diff.Append("Сопровождающий",
                    (oldService.NullSafe(r => r.Applicant.LastName) + " " + oldService.NullSafe(r => r.Applicant.FirstName) +
                     " " + oldService.NullSafe(r => r.Applicant.MiddleName)).FormatEx(val: string.Empty),
                    (newService.NullSafe(r => r.Applicant.LastName) + " " + newService.NullSafe(r => r.Applicant.FirstName) +
                     " " + newService.NullSafe(r => r.Applicant.MiddleName)).FormatEx(val: string.Empty));
            }

            return diff;
        }

        /// <summary>
        ///     Сравнить путевки
        /// </summary>
        private static RequestDiff CompareInformationVoucherInternal(RequestInformationVoucher oldVoucher, RequestInformationVoucher newVoucher, IUnitOfWork unitOfWork)
        {
            var diff = new RequestDiff();
            diff.ObjectName = "Путевка";
            if (oldVoucher == null && newVoucher == null)
            {
                return null;
            }
            else if (oldVoucher == null)
            {
                diff.Action = "Добавление";
                diff.Append("Цель обращения", string.Empty, newVoucher.Type?.Name.FormatEx(val: string.Empty));
                diff.Append("Наименование организации", string.Empty, newVoucher.OrganizationName.FormatEx(val: string.Empty));
                diff.Append("Дата начала", string.Empty, newVoucher.DateFrom.FormatEx(val: string.Empty));
                diff.Append("Дата окончания", string.Empty, newVoucher.DateTo.FormatEx(val: string.Empty));
                diff.Append("Стоимость (руб.)", string.Empty, newVoucher.Price.FormatEx(val: string.Empty));
                diff.Append("Стоимость дороги (руб.)", string.Empty, newVoucher.CostOfRide.FormatEx(val: string.Empty));
                diff.Append("Количество отдохнувших", string.Empty, newVoucher.CountPeople.FormatEx(val: string.Empty));
            }
            else if (newVoucher == null)
            {
                diff.Action = "Удаление";
                diff.Append("Цель обращения", oldVoucher.Type?.Name.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Наименование организации", oldVoucher.OrganizationName.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата начала", oldVoucher.DateFrom.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Дата окончания", oldVoucher.DateTo.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Стоимость (руб.)", oldVoucher.Price.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Стоимость дороги (руб.)", oldVoucher.CostOfRide.FormatEx(val: string.Empty), string.Empty);
                diff.Append("Количество отдохнувших", oldVoucher.CountPeople.FormatEx(val: string.Empty), string.Empty);
            }
            else
            {
                diff.Action = "Изменение";

                if (oldVoucher.NullSafe(r => r.TypeId) != newVoucher.NullSafe(r => r.TypeId))
                {
                    diff.Append("Цель обращения", oldVoucher.NullSafe(r => r.Type.Name).FormatEx(val: string.Empty),
                        newVoucher.NullSafe(r => r.Type.Name).FormatEx(val: string.Empty));
                }

                if (oldVoucher.OrganizationName != newVoucher.OrganizationName)
                {
                    diff.Append("Наименование организации", oldVoucher.OrganizationName.FormatEx(val: string.Empty),
                        newVoucher.OrganizationName.FormatEx(val: string.Empty));
                }

                if (oldVoucher.DateFrom != newVoucher.DateFrom)
                {
                    diff.Append("Дата начала", oldVoucher.DateFrom.FormatEx(val: string.Empty),
                        newVoucher.DateFrom.FormatEx(val: string.Empty));
                }

                if (oldVoucher.DateTo != newVoucher.DateTo)
                {
                    diff.Append("Дата окончания", oldVoucher.DateTo.FormatEx(val: string.Empty),
                        newVoucher.DateTo.FormatEx(val: string.Empty));
                }

                if (oldVoucher.Price != newVoucher.Price)
                {
                    diff.Append("Стоимость (руб.)", oldVoucher.Price.FormatEx(val: string.Empty),
                        newVoucher.Price.FormatEx(val: string.Empty));
                }

                if (oldVoucher.CostOfRide != newVoucher.CostOfRide)
                {
                    diff.Append("Стоимость дороги (руб.)", oldVoucher.CostOfRide.FormatEx(val: string.Empty),
                        newVoucher.CostOfRide.FormatEx(val: string.Empty));
                }

                if (oldVoucher.CountPeople != newVoucher.CountPeople)
                {
                    diff.Append("Количество отдохнувших", oldVoucher.CountPeople.FormatEx(val: string.Empty),
                        newVoucher.CountPeople.FormatEx(val: string.Empty));
                }

                if ((oldVoucher.AttendantsPrice?.Any() ?? false) || (newVoucher.AttendantsPrice?.Any() ?? false))
                {
                    var oldAttendsIds = oldVoucher.AttendantsPrice?.Select(x => x.Id).ToList();
                    var newAttendsIds = newVoucher.AttendantsPrice?.Select(x => x.Id).ToList();
                    var oldNotInNewAttendsIds = oldAttendsIds?.Except(newAttendsIds).ToList();
                    var newNotInOldAttendsIds = newAttendsIds?.Except(oldAttendsIds).ToList();
                    var inBothAttendsIds = oldAttendsIds?.Intersect(newAttendsIds).ToList();

                    foreach (var oldAp in oldNotInNewAttendsIds.Select(i => oldVoucher.AttendantsPrice?.Where(a => a.Id == i).FirstOrDefault()).Where(ss => ss != null))
                    {
                        var oldPerson = oldAp?.Applicant;
                        var personStr = oldPerson != null ? $"{oldPerson?.FirstName} {oldPerson?.LastName}" : "Не выбрано";
                        diff.Append("Отдыхающий", personStr, string.Empty);
                        diff.Append("Стоимость путевки", oldAp?.Price?.ToString(), string.Empty);
                        diff.Append("Стоимость дороги", oldAp?.CostOfRide?.ToString(), string.Empty);
                        diff.Append("Стоимость компенсации", oldAp?.AmountOfCompensation?.ToString(), string.Empty);
                    }
                    foreach (var newAp in newNotInOldAttendsIds.Select(i => newVoucher.AttendantsPrice?.Where(a => a.Id == i).FirstOrDefault()).Where(ss => ss != null))
                    {
                        var newPerson = newAp?.Applicant;
                        var personStr = newPerson != null ? $"{newPerson?.FirstName} {newPerson?.LastName}" : "Не выбрано";
                        diff.Append("Отдыхающий", string.Empty, personStr);
                        diff.Append("Стоимость путевки", string.Empty, newAp?.Price?.ToString());
                        diff.Append("Стоимость дороги", string.Empty, newAp?.CostOfRide?.ToString());
                        diff.Append("Стоимость компенсации", string.Empty, newAp?.AmountOfCompensation?.ToString());
                    }
                    foreach (var i in inBothAttendsIds)
                    {
                        var oldAp = oldVoucher.AttendantsPrice?.Where(a => a.Id == i).FirstOrDefault();
                        var newAp = newVoucher.AttendantsPrice?.Where(a => a.Id == i).FirstOrDefault();
                        var oldPerson = oldAp?.Applicant;
                        var newPerson = newAp?.Applicant;
                        var oldPersonStr = oldPerson != null ? $"{oldPerson?.FirstName} {oldPerson?.LastName}" : "Не выбрано";
                        var newPersonStr = newPerson != null ? $"{newPerson?.FirstName} {newPerson?.LastName}" : "Не выбрано";

                        if (oldPerson?.Id != newPerson?.Id)
                        {
                            diff.Append("Отдыхающий", oldPersonStr, newPersonStr);
                        }
                        if (oldAp?.Price != newAp?.Price)
                        {
                            diff.Append("Стоимость путевки", oldAp?.Price?.ToString(), newAp?.Price?.ToString());
                        }
                        if (oldAp?.CostOfRide != newAp?.CostOfRide)
                        {
                            diff.Append("Стоимость дороги", oldAp?.CostOfRide?.ToString(), newAp?.CostOfRide?.ToString());
                        }
                        if (oldAp?.AmountOfCompensation != newAp?.AmountOfCompensation)
                        {
                            diff.Append("Стоимость компенсации", oldAp?.AmountOfCompensation?.ToString(), newAp?.AmountOfCompensation?.ToString());
                        }
                    }
                }

            }

            return diff;
        }

        /// <summary>
        ///     Поиск отличий в коллекции сопровождающих
        /// </summary>
        private static List<RequestDiff> ApplicantCollectionDiff(Request oldRequest, Request newRequest,
            IUnitOfWork unitOfWork)
        {
            var diff = new List<RequestDiff>();
            if (oldRequest != null && oldRequest.Attendant != null && newRequest != null && newRequest.Attendant != null)
            {
                foreach (var oldObj in oldRequest.Attendant)
                {
                    var newObj = newRequest.Attendant.FirstOrDefault(a => a.Id == oldObj.Id);
                    if (newObj != null)
                    {
                        diff.Add(CompareApplicantInternal(oldObj, newObj, unitOfWork, true));
                    }
                    else
                    {
                        diff.Add(CompareApplicantInternal(oldObj, null, unitOfWork, true));
                    }
                }

                foreach (var newObj in newRequest.Attendant)
                {
                    if (oldRequest.Attendant.All(a => a.Id != newObj.Id))
                    {
                        diff.Add(CompareApplicantInternal(null, newObj, unitOfWork, true));
                    }
                }
            }
            else if (oldRequest != null && oldRequest.Attendant != null &&
                     (newRequest == null || newRequest.Attendant == null))
            {
                diff.AddRange(oldRequest.Attendant.Select(oldObj => CompareApplicantInternal(oldObj, null, unitOfWork, true)));
            }
            else if (newRequest != null && newRequest.Attendant != null &&
                     (oldRequest == null || oldRequest.Attendant == null))
            {
                diff.AddRange(newRequest.Attendant.Select(newObj => CompareApplicantInternal(null, newObj, unitOfWork, true)));
            }

            return diff;
        }

        /// <summary>
        ///     Поиск отличий в коллекции детей
        /// </summary>
        private static List<RequestDiff> ChildCollectionDiff(Request oldRequest, Request newRequest,
            IUnitOfWork unitOfWork)
        {
            var diff = new List<RequestDiff>();
            if (oldRequest != null && oldRequest.Child != null && newRequest != null && newRequest.Child != null)
            {
                foreach (var oldObj in oldRequest.Child)
                {
                    var newObj = newRequest.Child.FirstOrDefault(a => a.Id == oldObj.Id);
                    if (newObj != null)
                    {
                        diff.Add(CompareChildInternal(oldObj, newObj, unitOfWork));
                    }
                    else
                    {
                        diff.Add(CompareChildInternal(oldObj, null, unitOfWork));
                    }
                }

                foreach (var newObj in newRequest.Child)
                {
                    if (oldRequest.Child.All(a => a.Id != newObj.Id))
                    {
                        diff.Add(CompareChildInternal(null, newObj, unitOfWork));
                    }
                }
            }
            else if (oldRequest != null && oldRequest.Child != null && (newRequest == null || newRequest.Child == null))
            {
                diff.AddRange(oldRequest.Child.Select(oldObj => CompareChildInternal(oldObj, null, unitOfWork)));
            }
            else if (newRequest != null && newRequest.Child != null && (oldRequest == null || oldRequest.Child == null))
            {
                diff.AddRange(newRequest.Child.Select(newObj => CompareChildInternal(null, newObj, unitOfWork)));
            }

            return diff;
        }

        /// <summary>
        ///     Поиск отличий в коллекции дополнительных услуг
        /// </summary>
        private static List<RequestDiff> AddonServiceCollectionDiff(Request oldRequest, Request newRequest)
        {
            var diff = new List<RequestDiff>();
            if (oldRequest != null && oldRequest.AddonServicesLinks != null && newRequest != null &&
                newRequest.AddonServicesLinks != null)
            {
                foreach (var oldObj in oldRequest.AddonServicesLinks)
                {
                    var newObj = newRequest.AddonServicesLinks.FirstOrDefault(a => a.Id == oldObj.Id);
                    if (newObj != null)
                    {
                        diff.Add(CompareAddonServiceInternal(oldObj, newObj));
                    }
                    else
                    {
                        diff.Add(CompareAddonServiceInternal(oldObj, null));
                    }
                }

                foreach (var newObj in newRequest.AddonServicesLinks)
                {
                    if (oldRequest.AddonServicesLinks.All(a => a.Id != newObj.Id))
                    {
                        diff.Add(CompareAddonServiceInternal(null, newObj));
                    }
                }
            }
            else if (oldRequest != null && oldRequest.AddonServicesLinks != null &&
                     (newRequest == null || newRequest.AddonServicesLinks == null))
            {
                diff.AddRange(oldRequest.AddonServicesLinks.Select(oldObj => CompareAddonServiceInternal(oldObj, null)));
            }
            else if (newRequest != null && newRequest.AddonServicesLinks != null &&
                     (oldRequest == null || oldRequest.AddonServicesLinks == null))
            {
                diff.AddRange(newRequest.AddonServicesLinks.Select(newObj => CompareAddonServiceInternal(null, newObj)));
            }

            return diff;
        }

        /// <summary>
        ///     Поиск отличий в коллекции путевок
        /// </summary>
        private static List<RequestDiff> InformationVouchersCollectionDiff(Request oldRequest, Request newRequest, IUnitOfWork unitOfWork)
        {
            var diff = new List<RequestDiff>();
            if (oldRequest != null && oldRequest.InformationVouchers != null && newRequest != null &&
                newRequest.InformationVouchers != null)
            {
                foreach (var oldObj in oldRequest.InformationVouchers)
                {
                    var newObj = newRequest.InformationVouchers.FirstOrDefault(a => a.Id == oldObj.Id);
                    if (newObj != null)
                    {
                        diff.Add(CompareInformationVoucherInternal(oldObj, newObj, unitOfWork));
                    }
                    else
                    {
                        diff.Add(CompareInformationVoucherInternal(oldObj, null, unitOfWork));
                    }
                }

                foreach (var newObj in newRequest.InformationVouchers)
                {
                    if (oldRequest.InformationVouchers.All(a => a.Id != newObj.Id))
                    {
                        diff.Add(CompareInformationVoucherInternal(null, newObj, unitOfWork));
                    }
                }
            }
            else if (oldRequest != null && oldRequest.InformationVouchers != null &&
                     (newRequest == null || newRequest.InformationVouchers == null))
            {
                diff.AddRange(oldRequest.InformationVouchers.Select(oldObj => CompareInformationVoucherInternal(oldObj, null, unitOfWork)));
            }
            else if (newRequest != null && newRequest.InformationVouchers != null &&
                     (oldRequest == null || oldRequest.InformationVouchers == null))
            {
                diff.AddRange(newRequest.InformationVouchers.Select(newObj => CompareInformationVoucherInternal(null, newObj, unitOfWork)));
            }

            return diff;
        }

        /// <summary>
        ///     Получить название заезда
        /// </summary>
        private static string GetBoutName(Bout bout)
        {
            if (bout == null)
            {
                return string.Empty;
            }

            var hotelName = bout.NullSafe(b => b.Hotels.Name).FormatEx(val: string.Empty);
            var time = bout.NullSafe(b => b.GroupedTimeOfRest.Name) ?? string.Format("{0} - {1}",
                           bout.DateIncome.FormatEx(val: string.Empty), bout.DateOutcome.FormatEx(val: string.Empty));

            return string.Format("{0} {1}", hotelName, time);
        }

        /// <summary>
        ///     Получить ФИО заявителя/сопровождающего одной строкой
        /// </summary>
        private static string GetApplicantName(Applicant applicant)
        {
            if (applicant == null)
            {
                return string.Empty;
            }

            var str = new List<string>();
            str.Add(applicant.LastName);
            str.Add(applicant.FirstName);
            if (!applicant.HaveMiddleName)
            {
                str.Add(applicant.MiddleName);
            }

            return string.Join(" ", str.Where(s => s != null).ToList()).FormatEx(val: string.Empty);
        }

        /// <summary>
        ///     Получить вид нарушения
        /// </summary>
        private static string TypeViolationName(long? typeViolationId, TypeViolation typeViolation,
            IUnitOfWork unitOfWork)
        {
            if (!typeViolationId.HasValue)
                return null;

            if (typeViolation != null)
                return typeViolation.Name;

            return
                unitOfWork.GetSet<TypeViolation>().FirstOrDefault(i => i.Id == typeViolationId)?.Name;
        }
    }
}
