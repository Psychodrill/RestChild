@using RestChild.Comon
@using RestChild.Domain
@using RestChild.Comon.Enumeration
@using RestChild.Extensions.Extensions
@using RestChild.Web.Controllers
@using RestChild.Web.Extensions
@model List<RestChild.Web.Models.ChildViewModel>

@{
    var canExclude = Security.HasRight(AccessRightEnum.ExcludeChild);
}


@for (var index = 0; index < Model.Count; index++)
{
    var i = index;
    long? typeOfRestId = null;
    var isFirstCompany = false;
    if (Model[i] != null && Model[i].Data != null && Model[i].Data.Request != null)
    {
        typeOfRestId = Model[i].Data.Request.TypeOfRestId;
        isFirstCompany = Model[i].Data.Request.IsFirstCompany;
        if (Model[i].Data.Request.CountPlace <= 1)
        {
            canExclude = false;
        }
    }

    var violations = (ViewBag.TypeViolations as List<TypeViolation>).ToList();
    if (violations.All(d => d.Id != Model[i].Data.TypeViolationId) && Model[i].Data.TypeViolation != null)
    {
        violations.Add(Model[i].Data.TypeViolation);
    }

    var docs = (ViewBag.DocumentsTypeChild as List<DocumentType>).ToList();

    if (docs.All(d => d.Id != Model[i].Data.DocumentTypeId) && Model[i].Data.DocumentType != null)
    {
        docs.Add(Model[i].Data.DocumentType);
    }

    <fieldset class="bs-callout bs-callout-info request-block child-info-block">
    <div class="row">
        <div class="col-md-1 col-md-offset-11 anchor-list name-ref">
            <button class="btn btn-danger @(Model[i].NotForDelete ?? false ? " hidden" : null) remove-child-button" title="Удалить" onclick="removeChildElement(this);" type="button">
                <i class="glyphicon glyphicon-remove"></i>
            </button>
        </div>
    </div>

    @{
        var ageRestriction = (Model[i].MinAge.HasValue && Model[i].MaxAge.HasValue) && (Model[i].MinAge != 0 || Model[i].MaxAge != 0);
    }
    <div class="row">
        <div class="col-md-5  child-age-restriction @(!ageRestriction ? " hidden" : string.Empty)">
            <div class="panel panel-default">
                <div class="panel-body">
                    @if (ageRestriction)
                    {
                        <strong class="child-age-restriction-val">Допустимый возраст: @Model[i].MinAge.Value.FormatEx()-@Model[i].MaxAge.Value.FormatEx() лет</strong>
                    }
                    else
                    {
                        <strong class="child-age-restriction-val"></strong>
                    }
                </div>
            </div>
        </div>
        @if (Model[i].Data != null && Model[i].Data.Request != null && !Model[i].Data.Request.RequestOnMoney &&
             new[]
             {
                 (long) StatusEnum.CertificateIssued, (long) StatusEnum.DecisionMaking, (long) StatusEnum.DecisionMakingCovid
             }.Contains(Model[i].Data.Request.StatusId ?? 0)
             &&
             new[]
             {
                 (long) TypeOfRestEnum.ChildRestFederalCamps,
                 (long) TypeOfRestEnum.ChildRestCamps,
                 (long) TypeOfRestEnum.TentChildrenCamp,
                 (long) TypeOfRestEnum.ChildRest,
                 (long) TypeOfRestEnum.RestWithParents,
                 (long) TypeOfRestEnum.RestWithParentsPoor,
                 (long) TypeOfRestEnum.RestWithParentsOther,
                 (long) TypeOfRestEnum.RestWithParentsOrphan,
                 (long) TypeOfRestEnum.RestWithParentsComplex,
                 (long) TypeOfRestEnum.RestWithParentsInvalid,
                 (long) TypeOfRestEnum.RestWithParentsInvalidOrphanComplex
             }.Contains(typeOfRestId ?? 0)
            )
        {
            <div class="pull-right col-md-3">
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m[i].Data.IsDeleted, new {@class = "exclude-from-request exclude-child"}).DisableIf(Model[i].Data.IsDeleted || !canExclude) Исключен из заявления
                        @Html.Hidden("ExcludeFromRequestHidden" + i, Model[i].Data.IsDeleted, new {@class = "exclude-from-request-hidden"})
                    </label>
                </div>
            </div>
        }
    </div>


    @Html.HiddenFor(r => r[i].Data.Id, new {@class = "id"})
    @Html.HiddenFor(r => r[i].Data.EntityId)
    @Html.HiddenFor(r => r[i].Data.Payed)
    @Html.HiddenFor(r => r[i].Data.BenefitApproveComment)
    @Html.HiddenFor(r => r[i].Data.BenefitApprove)
    @Html.HiddenFor(r => r[i].Data.BenefitApproveTypeId)
    @Html.HiddenFor(r => r[i].Data.BenefitRequestDate)
    @Html.HiddenFor(r => r[i].Data.IsApprovedInInteragency)
    @Html.HiddenFor(r => r[i].Data.IsIncludeInInteragency)
    @Html.HiddenFor(r => r[i].BenefitApproveHtml)
    @Html.HiddenFor(r => r[i].Data.EkisId)
    @Html.HiddenFor(r => r[i].Data.EkisNeedSend)


    <div class="row form-group">
        <label class="col-md-3 control-label">Фамилия<span class="requared">*</span></label>
        <div class="@Html.Raw(Model[i].Data.ChildUniqeId.HasValue ? "col-md-6" : "col-md-9")">
            @Html.TextBoxFor(r => r[i].Data.LastName, new { @class = "form-control name-input child-info-lastname info-lastname", autocomplete = "off" }).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].LastNameEm.FormatEx(string.Empty)</span>
        </div>
        @if (Model[i].Data.ChildUniqeId.HasValue)
        {
            <div class="col-md-3 text-right">
                <a class="btn btn-info" href="@Url.Action("Child", "UniqueCard", new {@id = Model[i].Data.ChildUniqeId})" target="_blank">Карточка ребёнка</a>
            </div>
        }
    </div>
    <div class="row form-group">
        <label class="col-md-3 control-label">Имя<span class="requared">*</span></label>
        <div class="col-md-9">
            @Html.TextBoxFor(r => r[i].Data.FirstName, new {@class = "form-control name-input child-info-firstname info-firstname", autocomplete = "off"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].FirstNameEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group">
        <div class="col-md-offset-3 col-md-9">
            <div class="checkbox">
                <label>
                    @Html.CheckBoxFor(r => r[i].HasNotMiddlename, new {@class = "middlename-havenot"}).DisableIf(Model[i].Data.IsDeleted)
                    Нет отчества
                </label>
            </div>
        </div>
    </div>
    <div class="row form-group">
        <label class="col-md-3 control-label">Отчество</label>
        <div class="col-md-9">
            @Html.TextBoxFor(r => r[i].Data.MiddleName, new {@class = "form-control name-input middlename  child-info-middlename info-middlename", autocomplete = "off", Value = Model.NullSafe(m => m[i].HasNotMiddlename) ? string.Empty : Model.NullSafe(m => m[i].Data.MiddleName)}).DisableIf(Model.NullSafe(m => m[i].HasNotMiddlename)).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].MiddleNameEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group">
        <label class="col-md-3 control-label">Пол<span class="requared">*</span></label>
        <div class="col-md-9">
            <label>
                @Html.RadioButtonFor(r => r[i].Data.Male, true).DisableIf(Model[i].Data.IsDeleted)
                Мужской
            </label>&nbsp;
            <label>
                @Html.RadioButtonFor(r => r[i].Data.Male, false).DisableIf(Model[i].Data.IsDeleted)
                Женский
            </label>
        </div>
    </div>
    <div class="row form-group">
        <label class="col-md-3 control-label">СНИЛС<span class="requared">*</span></label>
        <div class="col-md-9">
            @Html.TextBoxFor(r => r[i].Data.Snils, new {@class = "form-control required snils", maxlength = "100"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].SnilsEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group">
        <label class="col-md-3 control-label">Дата рождения<span class="requared">*</span></label>
        <div class="col-md-9">
            <div class='input-group datepicker-my datepicker'>
                @Html.TextBoxFor(r => r[i].Data.DateOfBirth, new {@class = "form-control required input-mask-date", placeholder = "", @Value = Model[i].Data.DateOfBirth.FormatEx(string.Empty, string.Empty), autocomplete = "off"}).DisableIf(Model[i].Data.IsDeleted)
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-calendar"></span>
                </span>
            </div>
            <span class="field-validation-error">@Model[i].DateOfBirthEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group">
        <label class="col-md-3 control-label">Место рождения<span class="requared">*</span></label>
        <div class="col-md-9">
            @Html.TextBoxFor(r => r[i].Data.PlaceOfBirth, new {@class = "form-control required", placeholder = "", autocomplete = "off"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].PlaceOfBirthEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group">
        <label class="col-md-3 control-label">Тип документа удостоверяющего личность<span class="requared">*</span></label>
        <div class="col-md-9">
            @Html.DropDownListFor(r => r[i].Data.DocumentTypeId, new SelectList(docs, "Id", "Name", Model[i].Data.DocumentTypeId), new {@class = "form-control select2  document-dropdown"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].DocumentTypeEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group">
        <label class="col-md-3 col-xs-12 col-sm-12 control-label">Серия и номер<span class="requared">*</span></label>
        <div class="col-md-3 col-xs-4 col-sm-4">
            @Html.TextBoxFor(r => r[i].Data.DocumentSeria, new {@class = "form-control  required input-mask-passport-series", autocomplete = "off"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].DocumentSeriaEm.FormatEx(string.Empty)</span>
        </div>
        <div class="col-xs-8 col-md-6 col-sm-8">
            @Html.TextBoxFor(r => r[i].Data.DocumentNumber, new {@class = "form-control  required input-mask-passport-number", autocomplete = "off"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].DocumentNumberEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group">
        <label class="col-md-3 control-label">Когда выдан документ<span class="requared">*</span></label>
        <div class="col-md-9">
            <div class='input-group datepicker-my datepicker'>
                @Html.TextBoxFor(r => r[i].Data.DocumentDateOfIssue, new {@class = "form-control required input-mask-date", placeholder = "", @Value = Model[i].Data.DocumentDateOfIssue.FormatEx(string.Empty, string.Empty), autocomplete = "off"}).DisableIf(Model[i].Data.IsDeleted)
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-calendar"></span>
                </span>
            </div>
            <span class="field-validation-error">@Model[i].DocumentDateOfIssueEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group">
        <label class="col-md-3 control-label">Кем выдан документ<span class="requared">*</span></label>
        <div class="col-md-9">
            @Html.TextBoxFor(r => r[i].Data.DocumentSubjectIssue, new {@class = "form-control  required"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].DocumentSubjectIssueEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group">
        <label class="col-md-3 control-label">Код подразделения</label>
        <div class="col-md-9">
            @Html.TextBoxFor(r => r[i].Data.DocumentCode, new {@class = "form-control document-code", autocomplete = "off", maxlength = "500"}).DisableIf(Model[i].Data.IsDeleted)
        </div>
    </div>
    @{
        var viewCertBirth = Model[i].Data.DocumentTypeId != 22 && Model[i].Data.DocumentTypeId != 23 && !isFirstCompany;
    }
    <div class="row form-group cert-birth-block @(viewCertBirth ? " " : " hidden")">
        <div class="col-md-12">
            <h4>Сведения о свидетельстве о рождении ребёнка</h4>
        </div>
    </div>
    <div class="row form-group cert-birth-block @(viewCertBirth ? " " : " hidden")">
        <label class="col-md-3 control-label">Тип документа удостоверяющего личность</label>
        <div class="col-md-9">
            @Html.DropDownListFor(r => r[i].Data.DocumentTypeCertOfBirthId, new SelectList((docs).Where(d => d.Id != 50001 && d.Id != 30001).ToList(), "Id", "Name", Model[i].Data.DocumentTypeCertOfBirthId), new {@class = "form-control select2  document-cert-dropdown"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].DocumentTypeEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group cert-birth-block @(viewCertBirth ? " " : " hidden")">
        <label class="col-md-3 col-xs-12 col-sm-12 control-label">Серия и номер</label>
        <div class="col-md-3 col-xs-4 col-sm-4">
            @Html.TextBoxFor(r => r[i].Data.DocumentSeriaCertOfBirth, new {@class = "form-control  required input-mask-cert-series", autocomplete = "off"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].DocumentSeriaEm.FormatEx(string.Empty)</span>
        </div>
        <div class="col-xs-8 col-md-6 col-sm-8">
            @Html.TextBoxFor(r => r[i].Data.DocumentNumberCertOfBirth, new {@class = "form-control required input-mask-cert-number", autocomplete = "off"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].DocumentNumberEm.FormatEx(string.Empty)</span>
        </div>
    </div>

    <div class="row form-group">
        <div class="col-md-12">
            <h4>Сведения о категории льготы ребенка</h4>
        </div>
    </div>
    <div class="row form-group">
        <label class="col-md-3 control-label">Категория<span class="requared">*</span></label>
        <div class="col-md-9">
            @Html.DropDownList("r[" + i + "].Data.BenefitTypeId", new SelectList(((IEnumerable<BenefitType>
                ) ViewBag.BenefitType).Select(x => new {Val = x.Id, Text = x.Name}), "Val", "Text", Model[i].Data.BenefitTypeId), new {@class = "form-control select2 benefit-type-dropdown"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Html.Raw(Model[i].BenefitTypeEm.FormatEx(string.Empty))</span>
        </div>
    </div>
    <div class="row form-group">
        <div class="col-md-offset-3 col-md-9">

            @if (Model[i].NullSafe(m => m.Data.BenefitType.NeedTypeOfRestriction))
            {
                Model[i].Data.IsInvalid = true;
                @Html.CheckBoxFor(r => r[i].Data.IsInvalid, new {@class = "child-is-invalid", disabled = "disabled"}).DisableIf(Model[i].Data.IsDeleted)
            }
            else
            {
                @Html.CheckBoxFor(r => r[i].Data.IsInvalid, new {@class = "child-is-invalid"}).DisableIf(Model[i].Data.IsDeleted)
            }
            @Html.HiddenFor(r => r[i].Data.IsInvalid, new {@class = "child-is-invalid-hidden"})

            Ребенок имеет ограничения здоровья - недостатки в физическом и (или) психическом развитии
        </div>
    </div>
    <div class="row form-group">
        <div class="col-md-offset-3 col-md-9">
            @Html.CheckBoxFor(r => r[i].Data.IsCPMPK, new {@class = "hasCPMPKConclusion"}).DisableIf(Model[i].Data.IsCPMPK)
            Ребенок имеет заключение ЦПМПК города Москвы (адаптированная основная общеобразовательная программа)
        </div>
    </div>
    <div class="row form-group type-of-restriction @(!Model[i].Data.IsInvalid ? " hidden" : string.Empty)">
        <label class="col-md-3 control-label">Вид ограничения<span class="requared">*</span></label>
        <div class="col-md-9">
            @Html.DropDownListFor(r => r[i].Data.TypeOfRestrictionId, new SelectList(ViewBag.TypeOfRestriction, "Id", "Name", Model[i].Data.TypeOfRestrictionId), new {@class = "form-control select2 restriction-select"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].TypeOfRestrictionEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group type-of-subrestriction @(!Model[i].Data.IsInvalid || Model[i].Data.TypeOfRestriction == null || !Model[i].Data.TypeOfRestriction.Subs.Any() ? " hidden" : string.Empty)">
        <label class="col-md-3 control-label">Подвид ограничения<span class="requared">*</span></label>
        <div class="col-md-9">
            @Html.HiddenFor(r => r[i].Data.TypeOfSubRestrictionId, new {@class = "form-control subrestriction-select", titleText = Model[i].Data.TypeOfSubRestriction != null ? Model[i].Data.TypeOfSubRestriction.Name : "--Не указано--"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].TypeOfSubRestrictionEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    @{
        var codes = new string[0];
        var brPaymentDocument = ViewBag.BrPaymentDocument as string[];
        if (Model[i].Data.BenefitType != null && !string.IsNullOrWhiteSpace(Model[i].Data.BenefitType.ExnternalUid))
        {
            codes = Model[i].Data.BenefitType.ExnternalUid.Split(',').ToArray();
        }
    }
    @foreach (var e in (Model[i].Data.BaseRegistryInfo ?? new List<ExchangeBaseRegistry>()).Where(b => !b.NotActual).OrderBy(b => b.ExchangeBaseRegistryTypeId).ThenBy(b => b.Id).ToList())
    {
        var res = e.Parse(codes, brPaymentDocument, Model[i].LowIncomeTypes);
        Html.RenderPartial("BaseRegistryBenefitResult", res);
    }

    @if (Model[i].Data.BenefitApproveType != null)
    {
        <div class="row form-group">
            <label class="col-md-3 control-label">Статус проверки льготы</label>
            <div class="col-md-9 line-height35">
                @Model[i].Data.BenefitApproveType.Name.FormatEx()
            </div>
        </div>
    }
    @if (Model[i].Results != null && Model[i].Results.Any())
    {
        <div class="row form-group">
            <div class="col-md-12">
                <h4>Межведомственный запрос</h4>
            </div>
        </div>
        <table class="table table-striped table-bordered table-hover">
            <thead>
            <tr>
                <th>Номер запроса</th>
                <th>Дата запроса</th>
                <th>Номер ответа</th>
                <th>Дата ответа</th>
                <th>Статус запроса</th>
                <th>Статус подтверждения</th>
                <th>Комментарий</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var check in Model[i].Results)
            {
                <tr class="row-clicable" onclick="openRequest('@Url.Action("Edit", "InteragencyRequest", new {id = check.Data.InteragencyRequestId})');">
                    <th>@check.Data.InteragencyRequest.NullSafe(r => r.RequestNumber).FormatEx()</th>
                    <th>@check.Data.InteragencyRequest.NullSafe(r => r.RequsetDate).FormatEx()</th>
                    <th>@check.Data.InteragencyRequest.NullSafe(r => r.AnswerNumber).FormatEx()</th>
                    <th>@check.Data.InteragencyRequest.NullSafe(r => r.AnswerDate).FormatEx()</th>
                    <th>@check.Data.InteragencyRequest.NullSafe(r => r.StatusInteragencyRequest.NullSafe(s => s.Name)).FormatEx()</th>
                    <th>@check.Data.StatusResult.NullSafe(s => s.Name).FormatEx()</th>
                    <th>@check.Data.InteragencyRequest.NullSafe(s => s.AnswerComment).FormatEx()</th>
                </tr>
            }
            </tbody>
        </table>
    }
    <div class="row form-group benefit @((Model[i].Data.BenefitType ?? new BenefitType()).NeedApproveDocument ? string.Empty : " hidden")">
        <div class="col-md-12">
            <h4>Документ, подтверждающий, что ребенок находится в трудной жизненной ситуации</h4>
        </div>
    </div>
    <div class="row form-group benefit hidden">
        <label class="col-md-3 control-label">Кем выдан документ<span class="requared">*</span></label>
        <div class="col-md-9">
            @Html.TextBoxFor(r => r[i].Data.BenefitSubjectIssue, new {@class = "form-control  required", placeholder = ""})
            <span class="field-validation-error">@Model[i].BenefitSubjectIssueEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group benefit hidden">
        <label class="col-md-3 control-label">Дата документа<span class="requared">*</span></label>
        <div class="col-md-9">
            <div class='input-group datepicker-my datepicker'>
                @Html.TextBoxFor(r => r[i].Data.BenefitDateOfIssure, new {@class = "form-control required input-mask-date", placeholder = "", @Value = Model[i].Data.BenefitDateOfIssure.FormatEx(string.Empty, string.Empty)}).DisableIf(Model[i].Data.IsDeleted)
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-calendar"></span>
                </span>
            </div>
            <span class="field-validation-error">@Model[i].BenefitDateOfIssureEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group benefit hidden">
        <label class="col-md-3 control-label">Номер документа<span class="requared">*</span></label>
        <div class="col-md-9">
            @Html.TextBoxFor(r => r[i].Data.BenefitNumber, new {@class = "form-control  required", placeholder = ""}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].BenefitNumberEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group">
        <div class="col-md-offset-3 col-md-9">
            @{
                var checkboxparams = new Dictionary<string, object>
                    ();
                checkboxparams.Add("class", "registered-in-Moscow");
            }
            @if (Model[i].Data.BenefitTypeId.HasValue && Model[i].Data.BenefitTypeId != 0 && Model[i].Data.BenefitTypeId != 1 && Model[i].Data.BenefitTypeId != 12 && (Model[i].Data.Request == null || Model[i].Data.Request.StatusId == (long) StatusEnum.Draft))
            {
                Model[i].Data.RegisteredInMoscow = true;
                @Html.HiddenFor(r => r[i].Data.RegisteredInMoscow, new {@class = "registered-in-Moscow-hidden"})
            }
            @Html.CheckBoxFor(r => r[i].Data.RegisteredInMoscow, checkboxparams).DisableIf(Model[i].Data.IsDeleted)
            Ребенок зарегистрирован по месту жительства в Москве
        </div>
    </div>
    <div class="row form-group address-control @(Model[i].Data.RegisteredInMoscow ? string.Empty : " hidden")">
        <div class="col-md-12">
            <h4>Адрес регистрации</h4>
        </div>
    </div>

    <div class="address-control @(Model[i].Data.RegisteredInMoscow ? string.Empty : " hidden")">
        <!-- -------AddressControlView--------- -->
        @{
            ViewBag.AddressControlViewPrefix = String.Format("Child[{0}].Address.", i);
        }
        @Html.Partial("Assets/AddressControlFIASView", Model[i].Address, new ViewDataDictionary
        {
            new KeyValuePair<string, object>
                ("IsDisabled", Model[i].Data.IsDeleted),
            new KeyValuePair<string, object>
                ("ViewBag", ViewBag)
        })
        <!-- -------AddressControlView--------- -->
        <span class="field-validation-error">@Model[i].AddressEm.FormatEx(string.Empty)</span>
    </div>

    <div class="row form-group attendant-row firstRequestCompanyHide @(ViewBag.NeedAttendant && !isFirstCompany ? string.Empty : " hidden")">
        <div class="col-md-12">
            <h4>Сопровождающий</h4>
        </div>
    </div>
    <div class="row form-group attendant-row firstRequestCompanyHide @(ViewBag.NeedAttendant && !isFirstCompany ? string.Empty : " hidden")">
        <label class="col-md-3 control-label">ФИО</label>
        <div class="col-md-9">
            @{
                var attendantFio = Model[i].Data.Applicant != null ? String.Format("{0} {1} {2}", Model[i].Data.Applicant.LastName, Model[i].Data.Applicant.FirstName, Model[i].Data.Applicant.MiddleName) : string.Empty;
            }
            @Html.TextBoxFor(r => r[i].AttendantGuid, new {@class = "form-control child-attendant-fio", data_fio = attendantFio}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].AttendantGuidEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group attendant-row firstRequestCompanyHide @(ViewBag.NeedAttendant && !isFirstCompany ? string.Empty : " hidden")">
        <label class="col-md-3 control-label">Статус по отношению к ребенку</label>
        <div class="col-md-9">
            @Html.DropDownListFor(r => r[i].Data.StatusByChildId, new SelectList(Model[i].StatusByChild, "Id", "Name", Model[i].Data.StatusByChildId), new {@class = "form-control select2"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].StatusByChildEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="RequestInformationVoucherChild @(typeOfRestId == (long) TypeOfRestEnum.Compensation ? " " : "hidden")">
        <div class="row form-group attendant-row @(ViewBag.NeedAttendant ? string.Empty : " hidden")">
            <div class="col-md-12">
                <h4>Путевка</h4>
            </div>
        </div>
        <div class="row form-group attendant-row">
            <label class="col-md-3 control-label">Путевка<span class="requared">*</span></label>
            <div class="col-md-9">
                @{
                    var voucherName = Model[i].Data.RequestInformationVoucher != null ? string.Format("{0} - {1}", Model[i].Data.RequestInformationVoucher.OrganizationName.FormatEx(), Model[i].Data.RequestInformationVoucher.DateFrom.FormatEx()) : string.Empty;
                }
                @Html.TextBoxFor(r => r[i].Data.RequestInformationVoucherId, new {@class = "form-control child-voucher-name", data_voucher = voucherName}).DisableIf(Model[i].Data.IsDeleted)
                <span class="field-validation-error">@Model[i].RequestInformationVoucherEm.FormatEx(string.Empty)</span>
            </div>
        </div>
        <div class="row form-group attendant-row">
            <label class="col-md-3 control-label">Стоимость путевки ребенка (руб)<span class="requared">*</span></label>
            <div class="col-md-9">
                @Html.TextBoxFor(r => r[i].Data.CostOfTour, new {maxlength = 10, @class = "form-control decimal"}).DisableIf(Model[i].Data.IsDeleted)
                <span class="field-validation-error">@Model[i].CostOfTourEm.FormatEx(string.Empty)</span>
            </div>
        </div>
        <div class="row form-group attendant-row">
            <label class="col-md-3 control-label">Стоимость проезда ребенка (руб)</label>
            <div class="col-md-9">
                @Html.TextBoxFor(r => r[i].Data.CostOfRide, new {maxlength = 10, @class = "form-control decimal"}).DisableIf(Model[i].Data.IsDeleted)
                <span class="field-validation-error">@Model[i].CostOfRideEm.FormatEx(string.Empty)</span>
            </div>
        </div>
        <div class="row form-group attendant-row">
            <label class="col-md-3 control-label">Сумма компенсации за ребенка (руб)<span class="requared">*</span></label>
            <div class="col-md-9">
                @Html.TextBoxFor(r => r[i].Data.AmountOfCompensation, new {maxlength = 10, @class = "form-control decimal"}).DisableIf(Model[i].Data.IsDeleted)
                <span class="field-validation-error">@Model[i].AmountOfCompensationEm.FormatEx(string.Empty)</span>
            </div>
        </div>
    </div>
    <div class="row form-group firstRequestCompanyHide @(!isFirstCompany ? string.Empty : " hidden")">
        <div class="col-md-12">
            <h4>Образовательное учреждение</h4>
        </div>
    </div>
    <div class="row form-group firstRequestCompanyHide @(Model[i].Data.SchoolNotPresent || isFirstCompany ? " hidden" : string.Empty)">
        <label class="col-md-3 control-label">Укажите образовательное учреждение<span class="requared">*</span></label>
        <div class="col-md-9">
            @{
                var School = Model[i].Data.School ?? new School() { Id = 0, Name = "-- Не выбрано --" };
            }
            @Html.TextBoxFor(r => r[i].Data.SchoolId, new { @class = "form-control school-select2", data_default_id = School.Id, data_default_text = School.Name }).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].SchoolEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group firstRequestCompanyHide @(!isFirstCompany ? string.Empty : " hidden")">
        <div class="col-md-offset-3 col-md-9">
            @Html.CheckBoxFor(r => r[i].Data.SchoolNotPresent, new {@class = "school-not-present"}).DisableIf(Model[i].Data.IsDeleted)
            Учреждения нет в списке
        </div>
    </div>
    <div class="row form-group foreign-document @(Model[i].NullSafe(m => m.Data.Request.PlaceOfRest.IsForegin) ? string.Empty : " hidden")">
        <div class="col-md-12">
            <h4>Документ, удостоверяющий личность ребенка за рубежом</h4>
        </div>
    </div>
    <div class="row form-group foreign-document @(Model[i].NullSafe(m => m.Data.Request.PlaceOfRest.IsForegin) ? string.Empty : " hidden")">
        <label class="col-md-3 control-label">Фамилия в документе</label>
        <div class="col-md-9">
            @Html.TextBoxFor(r => r[i].Data.ForeginLastName, new {@class = "form-control", maxlength = 1000}).DisableIf(Model[i].Data.IsDeleted)
        </div>
    </div>
    <div class="row form-group foreign-document @(Model[i].NullSafe(m => m.Data.Request.PlaceOfRest.IsForegin) ? string.Empty : " hidden")">
        <label class="col-md-3 control-label">Имя в документе</label>
        <div class="col-md-9">
            @Html.TextBoxFor(r => r[i].Data.ForeginName, new {@class = "form-control", maxlength = 1000}).DisableIf(Model[i].Data.IsDeleted)
        </div>
    </div>
    <div class="row form-group foreign-document @(Model[i].NullSafe(m => m.Data.Request.PlaceOfRest.IsForegin) ? string.Empty : " hidden")">
        <label class="col-md-3 control-label">Тип документа, удостоверяющего личность ребенка за рубежом<span class="requared">*</span></label>
        <div class="col-md-9">
            @Html.DropDownListFor(r => r[i].Data.ForeginTypeId, new SelectList(ViewBag.DocumentsTypeForeign, "Id", "Name", Model[i].Data.ForeginTypeId), new {@class = "form-control select2"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].ForeginTypeEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group foreign-document @(Model[i].NullSafe(m => m.Data.Request.PlaceOfRest.IsForegin) ? string.Empty : " hidden")">
        <label class="col-md-3 col-xs-12 col-sm-12 control-label">Серия и номер<span class="requared">*</span></label>
        <div class="col-md-3 col-xs-4 col-sm-4">
            @Html.TextBoxFor(r => r[i].Data.ForeginSeria, new {@class = "form-control"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].ForeginSeriaEm.FormatEx(string.Empty)</span>
        </div>
        <div class="col-xs-8 col-md-6 col-sm-8 foreign-document @(Model[i].NullSafe(m => m.Data.Request.PlaceOfRest.IsForegin) ? string.Empty : " hidden")">
            @Html.TextBoxFor(r => r[i].Data.ForeginNumber, new {@class = "form-control"}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].ForeginNumberEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group foreign-document @(Model[i].NullSafe(m => m.Data.Request.PlaceOfRest.IsForegin) ? string.Empty : " hidden")">
        <label class="col-md-3 control-label">Дата выдачи<span class="requared">*</span></label>
        <div class="col-md-9">
            <div class='input-group datepicker-my datepicker'>
                @Html.TextBoxFor(r => r[i].Data.ForeginDateOfIssue, new {@class = "form-control required input-mask-date", placeholder = "", @Value = Model[i].Data.ForeginDateOfIssue.FormatEx(string.Empty, string.Empty)}).DisableIf(Model[i].Data.IsDeleted)
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-calendar"></span>
                </span>
            </div>
            <span class="field-validation-error">@Model[i].ForeginDateOfIssueEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group foreign-document @(Model[i].NullSafe(m => m.Data.Request.PlaceOfRest.IsForegin) ? string.Empty : " hidden")">
        <label class="col-md-3 control-label">Срок действия<span class="requared">*</span></label>
        <div class="col-md-9">
            <div class='input-group datepicker datepicker-future'>
                @Html.TextBoxFor(r => r[i].Data.ForeginDateEnd, new {@class = "form-control required", placeholder = "", @Value = Model[i].Data.ForeginDateEnd.FormatEx(string.Empty, string.Empty)}).DisableIf(Model[i].Data.IsDeleted)
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-calendar"></span>
                </span>
            </div>
            <span class="field-validation-error">@Model[i].ForeginDateEndEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    <div class="row form-group foreign-document @(Model[i].NullSafe(m => m.Data.Request.PlaceOfRest.IsForegin) ? string.Empty : " hidden")">
        <label class="col-md-3 control-label">Кем выдан<span class="requared">*</span></label>
        <div class="col-md-9">
            @Html.TextBoxFor(r => r[i].Data.ForeginSubjectIssue, new {@class = "form-control  required", placeholder = ""}).DisableIf(Model[i].Data.IsDeleted)
            <span class="field-validation-error">@Model[i].ForeginSubjectIssueEm.FormatEx(string.Empty)</span>
        </div>
    </div>
    @if (ViewBag.ModelStatusId == (long) StatusEnum.CertificateIssued)
    {
        <div class="row form-group">
            <label class="col-md-3 control-label">Вид нарушения</label>
            <div class="col-md-9">
                @Html.DropDownListFor(r => r[i].Data.TypeViolationId, new SelectList(violations, "Id", "Name", Model[i].Data.TypeViolationId), new {@class = "form-control select2 type-violation"}).DisableIf(!Security.HasRight(AccessRightEnum.RequestEditTypeViolation))
            </div>
        </div>
    }

    <span class="field-validation-error foreign-document @(Model[i].NullSafe(m => m.Data.Request.PlaceOfRest.IsForegin) ? string.Empty : " hidden")">@Model[i].AddressEm.FormatEx(string.Empty)</span>
    </fieldset>
}
