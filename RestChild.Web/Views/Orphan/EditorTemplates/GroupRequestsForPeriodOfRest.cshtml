@using RestChild.Domain
@using RestChild.Comon
@using RestChild.Comon.Enumeration
@using RestChild.Domain
@using RestChild.Web.Extensions

@model  RestChild.Domain.RequestForPeriodOfRest

@{
    bool hasLimit = (bool?)ViewData["HasLimit"] ?? false;
    bool isSummerVacationPeriod = ((long?)ViewData["vacationPeriod"] ?? 0) == (long)OrphanagePupilGroupVacationPeriodEnum.SummerVacation;
}

<div class="request-for-period-of-rest">
    <h4><hr /></h4>
    @Html.HiddenFor(m => m.Id, new { @class = "rfporId" })
    <div class="row form-group">
        <label class="col-md-2 control-label">Период отдыха</label>
        <div class="col-md-4">
            @Html.HiddenFor(r => r.TimeOfRestId, new { @class = "form-control timesofrest" }).DisableIf(Model.Id > 0 || (Model.PupilGroupId.HasValue && Model.PupilGroup.StateId != StateMachineStateEnum.PupilGroup.Formation))
            @Html.HiddenFor(r => r.TimeOfRest.Name)
        </div>
        <label class="col-md-2 control-label">Размещение для отдыха</label>
        <div class="col-md-4">
            @Html.HiddenFor(r => r.TourId, new { @class = "form-control tours" }).DisableIf(Model.Id < 1 || !Model.PupilGroupId.HasValue || Model.PupilGroup.StateId != StateMachineStateEnum.PupilGroup.Agreed)
            @Html.Hidden("Tour.Name", Html.Raw(Model.Id > 0 && Model.TourId.HasValue ? Model.Tour.Hotels.Name + Model.Tour.Name : string.Empty))
        </div>
    </div>
    <div class="form-group vacationPeriod@(isSummerVacationPeriod ? " hidden" : string.Empty )">
        <label class="col-md-2 control-label text-right">Каникулы с</label>
        <div class="col-md-2">
            <div class='input-group date datepicker-anytime'>
                @Html.TextBoxFor(r => r.VacationFrom, new { @class = "form-control input-mask-date-anytime request-period-start", tabindex = "9", autocomplete = "off", Value = Model.NullSafe(m => m.VacationFrom).FormatEx(string.Empty, string.Empty) }).DisableIf(Model.Id > 0 || (Model.PupilGroupId.HasValue && Model.PupilGroup.StateId != StateMachineStateEnum.PupilGroup.Formation))
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-calendar"></span>
                </span>
            </div>
        </div>
        <label class="col-md-1 control-label text-right">по</label>
        <div class="col-md-2">
            <div class='input-group date datepicker-anytime'>
                @Html.TextBoxFor(r => r.VacationTo, new { @class = "form-control input-mask-date-anytime request-period-start", tabindex = "9", autocomplete = "off", Value = Model.NullSafe(m => m.VacationTo).FormatEx(string.Empty, string.Empty) }).DisableIf(Model.Id > 0 || (Model.PupilGroupId.HasValue && Model.PupilGroup.StateId != StateMachineStateEnum.PupilGroup.Formation))
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-calendar"></span>
                </span>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label class="col-md-2 control-label text-right">Регион</label>
        <div class="col-md-4">
            @Html.HiddenFor(r => r.PlaceOfRestId, new { @class = "form-control placesofrest" }).DisableIf(Model.Id > 0 || (Model.PupilGroupId.HasValue && Model.PupilGroup.StateId != StateMachineStateEnum.PupilGroup.Formation))
            @Html.HiddenFor(r => r.PlaceOfRest.Name)
        </div>
    </div>
    <div class="form-group">
        <label class="col-md-3 control-label text-right">Кол-во воспитанников</label>
        <div class="col-md-1">
            @Html.TextBoxFor(model => model.PupilsCount, new { @class = "form-control pcount", maxlength = 1000, autocomplete = "off" }).ReadOnlyIf(Model.Id > 0 || (Model.PupilGroupId.HasValue && Model.PupilGroup.StateId != StateMachineStateEnum.PupilGroup.Formation))
        </div>
        <label class="col-md-3 control-label text-right">Кол-во сопровождающих от учреждения</label>
        <div class="col-md-1">
            @Html.TextBoxFor(model => model.CollaboratorsCount, new { @class = "form-control ccount", maxlength = 1000, autocomplete = "off" }).ReadOnlyIf(Model.Id > 0 || (Model.PupilGroupId.HasValue && Model.PupilGroup.StateId != StateMachineStateEnum.PupilGroup.Formation))
        </div>
    </div>
    <div class="form-group">
        @if (!Model.PupilGroupId.HasValue || Model.PupilGroup.StateId == StateMachineStateEnum.PupilGroup.Formation)
        {
            <div class="col-md-1 pull-right text-right">
                <button type="button" class="btn btn-danger btn-primary form-control request-for-period-of-rest-remove">
                    <i class="glyphicon glyphicon-trash"></i>
                </button>
            </div>
        }
        @if (Model.PupilGroupId.HasValue && Model.PupilGroup.StateId == StateMachineStateEnum.PupilGroup.Approved && Model.TourId.HasValue)
        {
            if (Model.ListsId.HasValue && Model.Lists.StateId != StateMachineStateEnum.PupilGroupList.Deleted)
            {
                <div class="col-md-2 pull-right text-right">
                    <a href="@Url.Action("OrphanagePupilGroupListEdit", "Orphan", new { listId = Model.ListsId })" target="_blank" class="btn btn-default btn-primary form-control">Перейти в список</a>
                </div>
            }
            else if (hasLimit)
            {
                <div class="col-md-2 pull-right text-right">
                    <a href="@Url.Action("OrphanagePupilGroupListNew", "Orphan", new { requestForPeriodOfRestId = Model.Id })" target="_blank" class="btn btn-default btn-primary form-control">Сформировать список</a>
                </div>
            }
        }
    </div>
</div>
