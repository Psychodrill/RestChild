@using RestChild.Comon
@using RestChild.Comon.Enumeration
@using RestChild.Web.Controllers
@model RestChild.Web.Models.AccountManageViewModel
@{
	ViewBag.Title = "Изменение данных пользователя";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
	<div class="col-md-12">
		<h2>Изменение данных пользователя</h2>
	</div>
</div>
<div class="row">
	<div class="col-md-12">
		Вы можете скорректировать информацию о пользователе, а так же сменить пароль.
	</div>
</div>
@using (Html.BeginForm("SaveAccount", "Account", null, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
	@Html.HiddenFor(m => m.Data.DateCreate)
	@Html.HiddenFor(m => m.Data.DateUpdate)
	@Html.HiddenFor(m => m.Data.Id)
	<legend>Общие сведения о пользователе</legend>
	<div class="error">
		<div class="error-ul-block">
			@if (!string.IsNullOrEmpty(Model.ErrorMessage))
			{
            <text>@Html.Raw(Model.ErrorMessage)</text>
			}
		</div>
	</div>
	<div class="form-group">
		<label class="col-sm-2 control-label">Логин<span class="requared">*</span></label>
		<div class="col-md-10">
			@Html.TextBoxFor(m => m.Data.Login, new { @class = "form-control", autocomplete = "off", @readonly = "readonly", maxlength = 1000, @data_toggle = "tooltip", @data_placement = "right", @title = "Имя пользоватлея используемое при входе в систему" })
			@Html.ValidationMessageFor(m => m.Data.Login)
		</div>
	</div>
	<div class="form-group">
		<label class="col-sm-2 control-label">ФИО<span class="requared">*</span></label>
		<div class="col-md-10">
			@Html.TextBoxFor(m => m.Data.Name, new { @class = "form-control", autocomplete = "off", maxlength = 1000, @data_toggle = "tooltip", @data_placement = "right", @title = "Фамилия, имя, отчество пользователя системы" })
			@Html.ValidationMessageFor(m => m.Data.Name)
		</div>
	</div>
	<div class="form-group">
		<label class="col-sm-2 control-label">Должность</label>
		<div class="col-md-10">
			@Html.TextBoxFor(m => m.Data.Position, new { @class = "form-control", autocomplete = "off", maxlength = 1000 })
			@Html.ValidationMessageFor(m => m.Data.Position)
		</div>
	</div>
	<div class="form-group">
		<label class="col-sm-2 control-label">E-Mail</label>
		<div class="col-md-10">
			@Html.TextBoxFor(m => m.Data.Email, new { @class = "form-control", autocomplete = "off", maxlength = 1000 })
			@Html.ValidationMessageFor(m => m.Data.Email)
		</div>
	</div>
	<div class="form-group">
		<label class="col-sm-2 control-label">Телефон</label>
		<div class="col-md-10">
			@Html.TextBoxFor(m => m.Data.Phone, new { @class = "form-control" })
			@Html.ValidationMessageFor(m => m.Data.Phone)
		</div>
	</div>
	<div class="form-group">
		<div class="col-md-offset-2 col-md-10">
			<button type="submit" class="btn btn-default btn-primary @(Model.Data.Id == 0 ? "password-check" : string.Empty)">
				<i class="glyphicon glyphicon-ok"></i> Сохранить
			</button>
		</div>
	</div>
}
@if (Model.Data.Id > 0)
{
	using (Html.BeginForm("ChangePassword", "Account", null, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
	{
		<input type="hidden" name="id" value="@Html.ValueFor(m=>m.Data.Id)"/>
		<legend>Изменение пароля</legend>
		<div class="form-group">
			<label class="col-sm-2 control-label">Пароль</label>
			<div class="col-md-10">
				@Html.Password("password", string.Empty, new { @class = "form-control", placeholder = "Введите новый пароль" })
			</div>
		</div>
		<div class="form-group">
			<label class="col-sm-2 control-label">Подтверждение пароля</label>
			<div class="col-md-10">
				@Html.Password("passwordConfirm", string.Empty, new { @class = "form-control", placeholder = "Подтвердите пароль" })
				<span style="color: red; display: none" class="passwordNotEqual">Подтверждение не совпадает с паролем</span>
			</div>
		</div>
		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<button type="submit" class="btn btn-default btn-primary password-check">
					<i class="glyphicon glyphicon-ok"></i> Сохранить пароль
				</button>
			</div>
		</div>
	}
}

@section styles
{
	@Styles.Render("~/Content/bootstrap-multiselect.css")
	@Styles.Render("~/Content/css/select2.css")
	@Styles.Render("~/Content/css/select2-bootstrap.css")
}


@section Scripts {
	@Scripts.Render("~/bundles/global")
	@Scripts.Render("~/bundles/jqueryval")
	@Scripts.Render("~/Scripts/bootstrap-multiselect.js")
	@Scripts.Render("~/Scripts/assets/multipleSelect.js")
	@Scripts.Render("~/Scripts/select2.min.js")
	@Scripts.Render("~/Scripts/select2_locale_ru.js")

	<script type="text/javascript" language="javascript">

		function changeIndexInNames(parent, name) {
			var childs = parent.children();
			var regExp = new RegExp("(.*\[[0-9]+\])", "g");
			for (var i = 0; i < childs.length; i++) {
				$(childs[i]).find('*').each(function () {
					if ($(this).attr('name')) {
						$(this).attr('name', $(this).attr('name').replace(regExp, name + '[' + i + ']'));
					}
				});
			}
		}

		$(function () {
			$('input[data-toggle="tooltip"]').tooltip();

			if ($($('input[type="password"]')[0]).val() === '') {
				$('.password-check').prop("disabled", true);;
			}

			$('input[type="password"]').keyup(function () {
				if ($($('input[type="password"]')[0]).val() !== $($('input[type="password"]')[1]).val()) {
					$('.passwordNotEqual').show();
					$('.password-check').prop("disabled", true);;
				} else {
					$('.passwordNotEqual').hide();
					$('.password-check').prop("disabled", false);
				}
			});

			$('select.select2').select2();
		});
	</script>
}


