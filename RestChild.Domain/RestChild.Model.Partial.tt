<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Reflection"#>
<#@ output extension=".cs" #>
<#
var solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)");

if (File.Exists(solutionsPath + "RestChild.Domain\\bin\\Debug\\RestChild.Domain.dll"))
{
	var setup = AppDomain.CurrentDomain.SetupInformation;
	setup.ApplicationBase = solutionsPath;

	var domain = AppDomain.CreateDomain("templateDomain", null, setup);
	var assembly = AppDomain.CurrentDomain.Load(AssemblyName.GetAssemblyName(solutionsPath + "RestChild.Domain\\bin\\Debug\\RestChild.Domain.dll"));

	var types = assembly.GetTypes().Where(t=>t.Name!="IEntityBase" && t.Name != "IStateEntity" && t.Name != "Numerator" && !t.IsSealed);
#>//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using RestChild.Comon;
using System.Linq;

namespace RestChild.Domain
{
<#

// Emit Entity Types
foreach (var entity in types)
{
#>
	public partial class <#=entity.Name#> <#= entity.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).Any(p=>p.Name =="LastUpdateTick") ? ": ILastUpdateTick" : ""#>
	{
		public <#=entity.Name#>()
		{
		}

		public <#=entity.Name#>(<#=entity.Name#> entity) : this(entity, null)
		{
		}

		public <#=entity.Name#>(<#=entity.Name#> entity, int? deep)
		{
			if (entity == null) return;

<#
	foreach(var prop in entity.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance))
	{
		if ((prop.PropertyType.IsPrimitive || prop.PropertyType.IsValueType || (prop.PropertyType == typeof(string))) && prop.CanWrite)
		{
#>
			<#=prop.Name#> = entity.<#=prop.Name#>;
<#
		}

		if (!(prop.PropertyType.IsPrimitive || prop.PropertyType.IsValueType || (prop.PropertyType == typeof(string))) && prop.CanWrite && prop.PropertyType.Namespace == "RestChild.Domain")
		{
#>
			if (deep > 0 && entity.<#=prop.Name#> != null)
			{
				<#=prop.Name#> = new <#=prop.PropertyType.Name#>(entity.<#=prop.Name#>, deep - 1);
			}

<#
		}
	}
#>
		}

		public <#=entity.Name#> CreateCopy()
		{
			var res = new <#=entity.Name#>(this);
<#
	foreach(var prop in entity.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance))
	{
		if (!(prop.PropertyType.IsPrimitive || prop.PropertyType.IsValueType || (prop.PropertyType == typeof(string))) && prop.CanWrite && prop.PropertyType.Namespace == "RestChild.Domain")
		{
#>
			if (<#=prop.Name#> != null)
			{
				res.<#=prop.Name#> = new <#=prop.PropertyType.Name#>{Id=<#=prop.Name#>.Id, Eid=<#=prop.Name#>.Eid};
			}
<#
		}
	}
	foreach(var prop in entity.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance))
	{
		if (prop.PropertyType.IsGenericType && prop.PropertyType.GetGenericTypeDefinition() == typeof(ICollection<>))
		{
#>
			res.<#=prop.Name#> = <#=prop.Name#>?.Select(p=>new <#=prop.PropertyType.GetGenericArguments()[0].Name#> {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
<#
		}
	}
#>
			return res;
		}

		public void CopyEntity(<#=entity.Name#> entity)
		{
<#
	foreach(var prop in entity.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance))
	{
		if ((prop.PropertyType.IsPrimitive || prop.PropertyType.IsValueType || (prop.PropertyType == typeof(string))) && prop.CanWrite && !prop.Name.StartsWith("Eid"))
		{
#>
			<#=prop.Name#> = entity.<#=prop.Name#>;
<#
		}
	}
#>
		}
	}
<#
}
#>
}
<#
	AppDomain.Unload(domain);
}
#>
