//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using RestChild.Comon;
using System.Linq;

namespace RestChild.Domain
{
	public partial class AccessRight : ILastUpdateTick
	{
		public AccessRight()
		{
		}

		public AccessRight(AccessRight entity) : this(entity, null)
		{
		}

		public AccessRight(AccessRight entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Code = entity.Code;
			Name = entity.Name;
			ForOrganization = entity.ForOrganization;
			GroupCode = entity.GroupCode;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AccessRight CreateCopy()
		{
			var res = new AccessRight(this);
			res.Roles = Roles?.Select(p=>new Role {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Rights = Rights?.Select(p=>new AccountRights {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(AccessRight entity)
		{
			Id = entity.Id;
			Code = entity.Code;
			Name = entity.Name;
			ForOrganization = entity.ForOrganization;
			GroupCode = entity.GroupCode;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Accommodation : ILastUpdateTick
	{
		public Accommodation()
		{
		}

		public Accommodation(Accommodation entity) : this(entity, null)
		{
		}

		public Accommodation(Accommodation entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Adult = entity.Adult;
			Name = entity.Name;
			HotelId = entity.HotelId;
			if (deep > 0 && entity.Hotel != null)
			{
				Hotel = new Hotels(entity.Hotel, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Accommodation CreateCopy()
		{
			var res = new Accommodation(this);
			if (Hotel != null)
			{
				res.Hotel = new Hotels{Id=Hotel.Id, Eid=Hotel.Eid};
			}
			res.AccommodationChildren = AccommodationChildren?.Select(p=>new AccommodationChildren {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Accommodation entity)
		{
			Id = entity.Id;
			Adult = entity.Adult;
			Name = entity.Name;
			HotelId = entity.HotelId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AccommodationChildren : ILastUpdateTick
	{
		public AccommodationChildren()
		{
		}

		public AccommodationChildren(AccommodationChildren entity) : this(entity, null)
		{
		}

		public AccommodationChildren(AccommodationChildren entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			CountChildren = entity.CountChildren;
			AccommodationId = entity.AccommodationId;
			if (deep > 0 && entity.Accommodation != null)
			{
				Accommodation = new Accommodation(entity.Accommodation, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AccommodationChildren CreateCopy()
		{
			var res = new AccommodationChildren(this);
			if (Accommodation != null)
			{
				res.Accommodation = new Accommodation{Id=Accommodation.Id, Eid=Accommodation.Eid};
			}
			return res;
		}

		public void CopyEntity(AccommodationChildren entity)
		{
			Id = entity.Id;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			CountChildren = entity.CountChildren;
			AccommodationId = entity.AccommodationId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Account : ILastUpdateTick
	{
		public Account()
		{
		}

		public Account(Account entity) : this(entity, null)
		{
		}

		public Account(Account entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Login = entity.Login;
			Name = entity.Name;
			Password = entity.Password;
			Salt = entity.Salt;
			DateCreate = entity.DateCreate;
			IsActive = entity.IsActive;
			DateUpdate = entity.DateUpdate;
			Email = entity.Email;
			Phone = entity.Phone;
			Position = entity.Position;
			DateDelete = entity.DateDelete;
			IsDeleted = entity.IsDeleted;
			IsTemporyPassword = entity.IsTemporyPassword;
			DateLastChangePassword = entity.DateLastChangePassword;
			CountUnsuccess = entity.CountUnsuccess;
			DateLastUnsuccess = entity.DateLastUnsuccess;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			CreateUserId = entity.CreateUserId;
			if (deep > 0 && entity.CreateUser != null)
			{
				CreateUser = new Account(entity.CreateUser, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Account CreateCopy()
		{
			var res = new Account(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (CreateUser != null)
			{
				res.CreateUser = new Account{Id=CreateUser.Id, Eid=CreateUser.Eid};
			}
			res.Roles = Roles?.Select(p=>new AccountRoles {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.MGTWorkingDaysHistory = MGTWorkingDaysHistory?.Select(p=>new MGTWorkingDaysHistory {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Rights = Rights?.Select(p=>new AccountRights {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Account entity)
		{
			Id = entity.Id;
			Login = entity.Login;
			Name = entity.Name;
			Password = entity.Password;
			Salt = entity.Salt;
			DateCreate = entity.DateCreate;
			IsActive = entity.IsActive;
			DateUpdate = entity.DateUpdate;
			Email = entity.Email;
			Phone = entity.Phone;
			Position = entity.Position;
			DateDelete = entity.DateDelete;
			IsDeleted = entity.IsDeleted;
			IsTemporyPassword = entity.IsTemporyPassword;
			DateLastChangePassword = entity.DateLastChangePassword;
			CountUnsuccess = entity.CountUnsuccess;
			DateLastUnsuccess = entity.DateLastUnsuccess;
			HistoryLinkId = entity.HistoryLinkId;
			CreateUserId = entity.CreateUserId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AccountHistoryLogin : ILastUpdateTick
	{
		public AccountHistoryLogin()
		{
		}

		public AccountHistoryLogin(AccountHistoryLogin entity) : this(entity, null)
		{
		}

		public AccountHistoryLogin(AccountHistoryLogin entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateEnter = entity.DateEnter;
			DateLastActivity = entity.DateLastActivity;
			DateExit = entity.DateExit;
			SessionUid = entity.SessionUid;
			RemoteAddr = entity.RemoteAddr;
			UserAgent = entity.UserAgent;
			StopSession = entity.StopSession;
			Login = entity.Login;
			IsAuthorized = entity.IsAuthorized;
			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AccountHistoryLogin CreateCopy()
		{
			var res = new AccountHistoryLogin(this);
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			return res;
		}

		public void CopyEntity(AccountHistoryLogin entity)
		{
			Id = entity.Id;
			DateEnter = entity.DateEnter;
			DateLastActivity = entity.DateLastActivity;
			DateExit = entity.DateExit;
			SessionUid = entity.SessionUid;
			RemoteAddr = entity.RemoteAddr;
			UserAgent = entity.UserAgent;
			StopSession = entity.StopSession;
			Login = entity.Login;
			IsAuthorized = entity.IsAuthorized;
			AccountId = entity.AccountId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AccountRights : ILastUpdateTick
	{
		public AccountRights()
		{
		}

		public AccountRights(AccountRights entity) : this(entity, null)
		{
		}

		public AccountRights(AccountRights entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			AccessRightId = entity.AccessRightId;
			if (deep > 0 && entity.AccessRight != null)
			{
				AccessRight = new AccessRight(entity.AccessRight, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AccountRights CreateCopy()
		{
			var res = new AccountRights(this);
			if (AccessRight != null)
			{
				res.AccessRight = new AccessRight{Id=AccessRight.Id, Eid=AccessRight.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			return res;
		}

		public void CopyEntity(AccountRights entity)
		{
			Id = entity.Id;
			AccessRightId = entity.AccessRightId;
			AccountId = entity.AccountId;
			OrganizationId = entity.OrganizationId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AccountRoles : ILastUpdateTick
	{
		public AccountRoles()
		{
		}

		public AccountRoles(AccountRoles entity) : this(entity, null)
		{
		}

		public AccountRoles(AccountRoles entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			RoleId = entity.RoleId;
			if (deep > 0 && entity.Role != null)
			{
				Role = new Role(entity.Role, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AccountRoles CreateCopy()
		{
			var res = new AccountRoles(this);
			if (Role != null)
			{
				res.Role = new Role{Id=Role.Id, Eid=Role.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			return res;
		}

		public void CopyEntity(AccountRoles entity)
		{
			Id = entity.Id;
			RoleId = entity.RoleId;
			AccountId = entity.AccountId;
			OrganizationId = entity.OrganizationId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AddonServices : ILastUpdateTick
	{
		public AddonServices()
		{
		}

		public AddonServices(AddonServices entity) : this(entity, null)
		{
		}

		public AddonServices(AddonServices entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Code = entity.Code;
			Name = entity.Name;
			Requared = entity.Requared;
			GeneralService = entity.GeneralService;
			ForForeign = entity.ForForeign;
			IsActive = entity.IsActive;
			Description = entity.Description;
			ByDefault = entity.ByDefault;
			OnlyWithRequest = entity.OnlyWithRequest;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Volume = entity.Volume;
			NeedApprove = entity.NeedApprove;
			DateBookingFrom = entity.DateBookingFrom;
			DateBookingTo = entity.DateBookingTo;
			AnnouncementEvent = entity.AnnouncementEvent;
			ConditionsForAccompanying = entity.ConditionsForAccompanying;
			SizeMin = entity.SizeMin;
			SizeMax = entity.SizeMax;
			DurationHour = entity.DurationHour;
			DurationDay = entity.DurationDay;
			DurationMonth = entity.DurationMonth;
			DurationYear = entity.DurationYear;
			IsGroup = entity.IsGroup;
			Hidden = entity.Hidden;
			NotFixedDate = entity.NotFixedDate;
			ProcentOver = entity.ProcentOver;
			NotForSite = entity.NotForSite;
			ContractId = entity.ContractId;
			if (deep > 0 && entity.Contract != null)
			{
				Contract = new Contract(entity.Contract, deep - 1);
			}

			PartnerId = entity.PartnerId;
			if (deep > 0 && entity.Partner != null)
			{
				Partner = new Organization(entity.Partner, deep - 1);
			}

			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			ParentId = entity.ParentId;
			if (deep > 0 && entity.Parent != null)
			{
				Parent = new AddonServices(entity.Parent, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			TypeOfServiceId = entity.TypeOfServiceId;
			if (deep > 0 && entity.TypeOfService != null)
			{
				TypeOfService = new TypeOfService(entity.TypeOfService, deep - 1);
			}

			CuratorId = entity.CuratorId;
			if (deep > 0 && entity.Curator != null)
			{
				Curator = new Account(entity.Curator, deep - 1);
			}

			AddonServicesPaymentTypeId = entity.AddonServicesPaymentTypeId;
			if (deep > 0 && entity.AddonServicesPaymentType != null)
			{
				AddonServicesPaymentType = new AddonServicesPaymentType(entity.AddonServicesPaymentType, deep - 1);
			}

			TypeOfRoomsId = entity.TypeOfRoomsId;
			if (deep > 0 && entity.TypeOfRooms != null)
			{
				TypeOfRooms = new TypeOfRooms(entity.TypeOfRooms, deep - 1);
			}

			TypeOfRestSubtypeId = entity.TypeOfRestSubtypeId;
			if (deep > 0 && entity.TypeOfRestSubtype != null)
			{
				TypeOfRestSubtype = new TypeOfRestSubtype(entity.TypeOfRestSubtype, deep - 1);
			}

			TypePriceCalculationId = entity.TypePriceCalculationId;
			if (deep > 0 && entity.TypePriceCalculation != null)
			{
				TypePriceCalculation = new TypePriceCalculation(entity.TypePriceCalculation, deep - 1);
			}

			TourTransportId = entity.TourTransportId;
			if (deep > 0 && entity.TourTransport != null)
			{
				TourTransport = new TourTransport(entity.TourTransport, deep - 1);
			}

			LinkServiceId = entity.LinkServiceId;
			if (deep > 0 && entity.LinkService != null)
			{
				LinkService = new AddonServices(entity.LinkService, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
			InRequest = entity.InRequest;
		}

		public AddonServices CreateCopy()
		{
			var res = new AddonServices(this);
			if (Contract != null)
			{
				res.Contract = new Contract{Id=Contract.Id, Eid=Contract.Eid};
			}
			if (Partner != null)
			{
				res.Partner = new Organization{Id=Partner.Id, Eid=Partner.Eid};
			}
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			if (Parent != null)
			{
				res.Parent = new AddonServices{Id=Parent.Id, Eid=Parent.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (TypeOfService != null)
			{
				res.TypeOfService = new TypeOfService{Id=TypeOfService.Id, Eid=TypeOfService.Eid};
			}
			if (Curator != null)
			{
				res.Curator = new Account{Id=Curator.Id, Eid=Curator.Eid};
			}
			if (AddonServicesPaymentType != null)
			{
				res.AddonServicesPaymentType = new AddonServicesPaymentType{Id=AddonServicesPaymentType.Id, Eid=AddonServicesPaymentType.Eid};
			}
			if (TypeOfRooms != null)
			{
				res.TypeOfRooms = new TypeOfRooms{Id=TypeOfRooms.Id, Eid=TypeOfRooms.Eid};
			}
			if (TypeOfRestSubtype != null)
			{
				res.TypeOfRestSubtype = new TypeOfRestSubtype{Id=TypeOfRestSubtype.Id, Eid=TypeOfRestSubtype.Eid};
			}
			if (TypePriceCalculation != null)
			{
				res.TypePriceCalculation = new TypePriceCalculation{Id=TypePriceCalculation.Id, Eid=TypePriceCalculation.Eid};
			}
			if (TourTransport != null)
			{
				res.TourTransport = new TourTransport{Id=TourTransport.Id, Eid=TourTransport.Eid};
			}
			if (LinkService != null)
			{
				res.LinkService = new AddonServices{Id=LinkService.Id, Eid=LinkService.Eid};
			}
			res.Photos = Photos?.Select(p=>new AddonServicesPhoto {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Childs = Childs?.Select(p=>new AddonServices {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.EventGeographys = EventGeographys?.Select(p=>new EventGeography {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Prices = Prices?.Select(p=>new AddonServicesPrice {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.LinkServices = LinkServices?.Select(p=>new AddonServices {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.ServiceBlocks = ServiceBlocks?.Select(p=>new ServiceBlock {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Hotels = Hotels?.Select(p=>new Hotels {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Tags = Tags?.Select(p=>new Tag {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.PlaceOfRests = PlaceOfRests?.Select(p=>new PlaceOfRest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(AddonServices entity)
		{
			Id = entity.Id;
			Code = entity.Code;
			Name = entity.Name;
			Requared = entity.Requared;
			GeneralService = entity.GeneralService;
			ForForeign = entity.ForForeign;
			IsActive = entity.IsActive;
			Description = entity.Description;
			ByDefault = entity.ByDefault;
			OnlyWithRequest = entity.OnlyWithRequest;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Volume = entity.Volume;
			NeedApprove = entity.NeedApprove;
			DateBookingFrom = entity.DateBookingFrom;
			DateBookingTo = entity.DateBookingTo;
			AnnouncementEvent = entity.AnnouncementEvent;
			ConditionsForAccompanying = entity.ConditionsForAccompanying;
			SizeMin = entity.SizeMin;
			SizeMax = entity.SizeMax;
			DurationHour = entity.DurationHour;
			DurationDay = entity.DurationDay;
			DurationMonth = entity.DurationMonth;
			DurationYear = entity.DurationYear;
			IsGroup = entity.IsGroup;
			Hidden = entity.Hidden;
			NotFixedDate = entity.NotFixedDate;
			ProcentOver = entity.ProcentOver;
			NotForSite = entity.NotForSite;
			ContractId = entity.ContractId;
			PartnerId = entity.PartnerId;
			TourId = entity.TourId;
			HistoryLinkId = entity.HistoryLinkId;
			AccountId = entity.AccountId;
			ParentId = entity.ParentId;
			StateId = entity.StateId;
			TypeOfServiceId = entity.TypeOfServiceId;
			CuratorId = entity.CuratorId;
			AddonServicesPaymentTypeId = entity.AddonServicesPaymentTypeId;
			TypeOfRoomsId = entity.TypeOfRoomsId;
			TypeOfRestSubtypeId = entity.TypeOfRestSubtypeId;
			TypePriceCalculationId = entity.TypePriceCalculationId;
			TourTransportId = entity.TourTransportId;
			LinkServiceId = entity.LinkServiceId;
			LastUpdateTick = entity.LastUpdateTick;
			InRequest = entity.InRequest;
		}
	}
	public partial class AddonServicesLink : ILastUpdateTick
	{
		public AddonServicesLink()
		{
		}

		public AddonServicesLink(AddonServicesLink entity) : this(entity, null)
		{
		}

		public AddonServicesLink(AddonServicesLink entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			CountService = entity.CountService;
			DateCreate = entity.DateCreate;
			DateChange = entity.DateChange;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			Commentary = entity.Commentary;
			Approved = entity.Approved;
			ForCalculation = entity.ForCalculation;
			ManualPrice = entity.ManualPrice;
			AddonServicesId = entity.AddonServicesId;
			if (deep > 0 && entity.AddonServices != null)
			{
				AddonServices = new AddonServices(entity.AddonServices, deep - 1);
			}

			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			ChildId = entity.ChildId;
			if (deep > 0 && entity.Child != null)
			{
				Child = new Child(entity.Child, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			TicketId = entity.TicketId;
			if (deep > 0 && entity.Ticket != null)
			{
				Ticket = new Ticket(entity.Ticket, deep - 1);
			}

			ServiceId = entity.ServiceId;
			if (deep > 0 && entity.Service != null)
			{
				Service = new RequestService(entity.Service, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AddonServicesLink CreateCopy()
		{
			var res = new AddonServicesLink(this);
			if (AddonServices != null)
			{
				res.AddonServices = new AddonServices{Id=AddonServices.Id, Eid=AddonServices.Eid};
			}
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			if (Child != null)
			{
				res.Child = new Child{Id=Child.Id, Eid=Child.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			if (Ticket != null)
			{
				res.Ticket = new Ticket{Id=Ticket.Id, Eid=Ticket.Eid};
			}
			if (Service != null)
			{
				res.Service = new RequestService{Id=Service.Id, Eid=Service.Eid};
			}
			res.Calculations = Calculations?.Select(p=>new Calculation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(AddonServicesLink entity)
		{
			Id = entity.Id;
			CountService = entity.CountService;
			DateCreate = entity.DateCreate;
			DateChange = entity.DateChange;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			Commentary = entity.Commentary;
			Approved = entity.Approved;
			ForCalculation = entity.ForCalculation;
			ManualPrice = entity.ManualPrice;
			AddonServicesId = entity.AddonServicesId;
			RequestId = entity.RequestId;
			ApplicantId = entity.ApplicantId;
			ChildId = entity.ChildId;
			StateId = entity.StateId;
			HistoryLinkId = entity.HistoryLinkId;
			AccountId = entity.AccountId;
			TicketId = entity.TicketId;
			ServiceId = entity.ServiceId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AddonServicesPaymentType : ILastUpdateTick
	{
		public AddonServicesPaymentType()
		{
		}

		public AddonServicesPaymentType(AddonServicesPaymentType entity) : this(entity, null)
		{
		}

		public AddonServicesPaymentType(AddonServicesPaymentType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AddonServicesPaymentType CreateCopy()
		{
			var res = new AddonServicesPaymentType(this);
			return res;
		}

		public void CopyEntity(AddonServicesPaymentType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AddonServicesPhoto : ILastUpdateTick
	{
		public AddonServicesPhoto()
		{
		}

		public AddonServicesPhoto(AddonServicesPhoto entity) : this(entity, null)
		{
		}

		public AddonServicesPhoto(AddonServicesPhoto entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FileName = entity.FileName;
			FileTitle = entity.FileTitle;
			DataCreate = entity.DataCreate;
			AddonServicesId = entity.AddonServicesId;
			if (deep > 0 && entity.AddonServices != null)
			{
				AddonServices = new AddonServices(entity.AddonServices, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AddonServicesPhoto CreateCopy()
		{
			var res = new AddonServicesPhoto(this);
			if (AddonServices != null)
			{
				res.AddonServices = new AddonServices{Id=AddonServices.Id, Eid=AddonServices.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			return res;
		}

		public void CopyEntity(AddonServicesPhoto entity)
		{
			Id = entity.Id;
			FileName = entity.FileName;
			FileTitle = entity.FileTitle;
			DataCreate = entity.DataCreate;
			AddonServicesId = entity.AddonServicesId;
			AccountId = entity.AccountId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AddonServicesPrice : ILastUpdateTick
	{
		public AddonServicesPrice()
		{
		}

		public AddonServicesPrice(AddonServicesPrice entity) : this(entity, null)
		{
		}

		public AddonServicesPrice(AddonServicesPrice entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			AddonServicesId = entity.AddonServicesId;
			if (deep > 0 && entity.AddonServices != null)
			{
				AddonServices = new AddonServices(entity.AddonServices, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AddonServicesPrice CreateCopy()
		{
			var res = new AddonServicesPrice(this);
			if (AddonServices != null)
			{
				res.AddonServices = new AddonServices{Id=AddonServices.Id, Eid=AddonServices.Eid};
			}
			return res;
		}

		public void CopyEntity(AddonServicesPrice entity)
		{
			Id = entity.Id;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			AddonServicesId = entity.AddonServicesId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Address : ILastUpdateTick
	{
		public Address()
		{
		}

		public Address(Address entity) : this(entity, null)
		{
		}

		public Address(Address entity, int? deep)
		{
			if (entity == null) return;

			District = entity.District;
			Region = entity.Region;
			Id = entity.Id;
			Name = entity.Name;
			Appartment = entity.Appartment;
			Street = entity.Street;
			House = entity.House;
			Corpus = entity.Corpus;
			Stroenie = entity.Stroenie;
			Latitude = entity.Latitude;
			Longitude = entity.Longitude;
			Vladenie = entity.Vladenie;
			FiasId = entity.FiasId;
			BtiAddressId = entity.BtiAddressId;
			if (deep > 0 && entity.BtiAddress != null)
			{
				BtiAddress = new BtiAddress(entity.BtiAddress, deep - 1);
			}

			BtiDistrictId = entity.BtiDistrictId;
			if (deep > 0 && entity.BtiDistrict != null)
			{
				BtiDistrict = new BtiDistrict(entity.BtiDistrict, deep - 1);
			}

			BtiRegionId = entity.BtiRegionId;
			if (deep > 0 && entity.BtiRegion != null)
			{
				BtiRegion = new BtiRegion(entity.BtiRegion, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Address CreateCopy()
		{
			var res = new Address(this);
			if (BtiAddress != null)
			{
				res.BtiAddress = new BtiAddress{Id=BtiAddress.Id, Eid=BtiAddress.Eid};
			}
			if (BtiDistrict != null)
			{
				res.BtiDistrict = new BtiDistrict{Id=BtiDistrict.Id, Eid=BtiDistrict.Eid};
			}
			if (BtiRegion != null)
			{
				res.BtiRegion = new BtiRegion{Id=BtiRegion.Id, Eid=BtiRegion.Eid};
			}
			return res;
		}

		public void CopyEntity(Address entity)
		{
			District = entity.District;
			Region = entity.Region;
			Id = entity.Id;
			Name = entity.Name;
			Appartment = entity.Appartment;
			Street = entity.Street;
			House = entity.House;
			Corpus = entity.Corpus;
			Stroenie = entity.Stroenie;
			Latitude = entity.Latitude;
			Longitude = entity.Longitude;
			Vladenie = entity.Vladenie;
			FiasId = entity.FiasId;
			BtiAddressId = entity.BtiAddressId;
			BtiDistrictId = entity.BtiDistrictId;
			BtiRegionId = entity.BtiRegionId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AdministratorTour : ILastUpdateTick
	{
		public AdministratorTour()
		{
		}

		public AdministratorTour(AdministratorTour entity) : this(entity, null)
		{
		}

		public AdministratorTour(AdministratorTour entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			HaveMiddleName = entity.HaveMiddleName;
			DocumentSeria = entity.DocumentSeria;
			DocumentNumber = entity.DocumentNumber;
			DocumentDateOfIssue = entity.DocumentDateOfIssue;
			DocumentSubjectIssue = entity.DocumentSubjectIssue;
			DateOfBirth = entity.DateOfBirth;
			Male = entity.Male;
			DateCreate = entity.DateCreate;
			DateUpdate = entity.DateUpdate;
			PlaceOfBirth = entity.PlaceOfBirth;
			Phone = entity.Phone;
			Email = entity.Email;
			ExternalUid = entity.ExternalUid;
			Password = entity.Password;
			Salt = entity.Salt;
			StopListReasonText = entity.StopListReasonText;
			DocumentTypeId = entity.DocumentTypeId;
			if (deep > 0 && entity.DocumentType != null)
			{
				DocumentType = new DocumentType(entity.DocumentType, deep - 1);
			}

			LinkedAccountId = entity.LinkedAccountId;
			if (deep > 0 && entity.LinkedAccount != null)
			{
				LinkedAccount = new Account(entity.LinkedAccount, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			StopListReasonId = entity.StopListReasonId;
			if (deep > 0 && entity.StopListReason != null)
			{
				StopListReason = new CounselorsStopListReason(entity.StopListReason, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AdministratorTour CreateCopy()
		{
			var res = new AdministratorTour(this);
			if (DocumentType != null)
			{
				res.DocumentType = new DocumentType{Id=DocumentType.Id, Eid=DocumentType.Eid};
			}
			if (LinkedAccount != null)
			{
				res.LinkedAccount = new Account{Id=LinkedAccount.Id, Eid=LinkedAccount.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (StopListReason != null)
			{
				res.StopListReason = new CounselorsStopListReason{Id=StopListReason.Id, Eid=StopListReason.Eid};
			}
			res.Bouts = Bouts?.Select(p=>new Bout {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Results = Results?.Select(p=>new TrainingCounselorsResult {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.ForeginPassports = ForeginPassports?.Select(p=>new ForeginPassport {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(AdministratorTour entity)
		{
			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			HaveMiddleName = entity.HaveMiddleName;
			DocumentSeria = entity.DocumentSeria;
			DocumentNumber = entity.DocumentNumber;
			DocumentDateOfIssue = entity.DocumentDateOfIssue;
			DocumentSubjectIssue = entity.DocumentSubjectIssue;
			DateOfBirth = entity.DateOfBirth;
			Male = entity.Male;
			DateCreate = entity.DateCreate;
			DateUpdate = entity.DateUpdate;
			PlaceOfBirth = entity.PlaceOfBirth;
			Phone = entity.Phone;
			Email = entity.Email;
			ExternalUid = entity.ExternalUid;
			Password = entity.Password;
			Salt = entity.Salt;
			StopListReasonText = entity.StopListReasonText;
			DocumentTypeId = entity.DocumentTypeId;
			LinkedAccountId = entity.LinkedAccountId;
			StateId = entity.StateId;
			StopListReasonId = entity.StopListReasonId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Agent : ILastUpdateTick
	{
		public Agent()
		{
		}

		public Agent(Agent entity) : this(entity, null)
		{
		}

		public Agent(Agent entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			DocumentSeria = entity.DocumentSeria;
			DocumentNumber = entity.DocumentNumber;
			DocumentDateOfIssue = entity.DocumentDateOfIssue;
			DocumentSubjectIssue = entity.DocumentSubjectIssue;
			Phone = entity.Phone;
			Email = entity.Email;
			ProxyDateOfIssure = entity.ProxyDateOfIssure;
			NotaryName = entity.NotaryName;
			ProxyEndDate = entity.ProxyEndDate;
			ProxyNumber = entity.ProxyNumber;
			Snils = entity.Snils;
			IsLast = entity.IsLast;
			HaveMiddleName = entity.HaveMiddleName;
			Male = entity.Male;
			DateOfBirth = entity.DateOfBirth;
			DocumentCode = entity.DocumentCode;
			PlaceOfBirth = entity.PlaceOfBirth;
			DocumentTypeId = entity.DocumentTypeId;
			if (deep > 0 && entity.DocumentType != null)
			{
				DocumentType = new DocumentType(entity.DocumentType, deep - 1);
			}

			StatusByChildId = entity.StatusByChildId;
			if (deep > 0 && entity.StatusByChild != null)
			{
				StatusByChild = new StatusByChild(entity.StatusByChild, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Agent CreateCopy()
		{
			var res = new Agent(this);
			if (DocumentType != null)
			{
				res.DocumentType = new DocumentType{Id=DocumentType.Id, Eid=DocumentType.Eid};
			}
			if (StatusByChild != null)
			{
				res.StatusByChild = new StatusByChild{Id=StatusByChild.Id, Eid=StatusByChild.Eid};
			}
			return res;
		}

		public void CopyEntity(Agent entity)
		{
			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			DocumentSeria = entity.DocumentSeria;
			DocumentNumber = entity.DocumentNumber;
			DocumentDateOfIssue = entity.DocumentDateOfIssue;
			DocumentSubjectIssue = entity.DocumentSubjectIssue;
			Phone = entity.Phone;
			Email = entity.Email;
			ProxyDateOfIssure = entity.ProxyDateOfIssure;
			NotaryName = entity.NotaryName;
			ProxyEndDate = entity.ProxyEndDate;
			ProxyNumber = entity.ProxyNumber;
			Snils = entity.Snils;
			IsLast = entity.IsLast;
			HaveMiddleName = entity.HaveMiddleName;
			Male = entity.Male;
			DateOfBirth = entity.DateOfBirth;
			DocumentCode = entity.DocumentCode;
			PlaceOfBirth = entity.PlaceOfBirth;
			DocumentTypeId = entity.DocumentTypeId;
			StatusByChildId = entity.StatusByChildId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AnalyticsViewRow : ILastUpdateTick
	{
		public AnalyticsViewRow()
		{
		}

		public AnalyticsViewRow(AnalyticsViewRow entity) : this(entity, null)
		{
		}

		public AnalyticsViewRow(AnalyticsViewRow entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			ByDay = entity.ByDay;
			ByHour = entity.ByHour;
			ByWeek = entity.ByWeek;
			Total = entity.Total;
			ByDayColor = entity.ByDayColor;
			ByHourColor = entity.ByHourColor;
			ByWeekColor = entity.ByWeekColor;
			TotalColor = entity.TotalColor;
			ByDay2 = entity.ByDay2;
			ByHour2 = entity.ByHour2;
			ByWeek2 = entity.ByWeek2;
			Total2 = entity.Total2;
			Day1 = entity.Day1;
			Day2 = entity.Day2;
			Day3 = entity.Day3;
			Day4 = entity.Day4;
			Day5 = entity.Day5;
			Day6 = entity.Day6;
			DataDay1 = entity.DataDay1;
			DataDay2 = entity.DataDay2;
			DataDay3 = entity.DataDay3;
			DataDay4 = entity.DataDay4;
			DataDay5 = entity.DataDay5;
			DataDay6 = entity.DataDay6;
			AnalyticsViewRowTypeId = entity.AnalyticsViewRowTypeId;
			if (deep > 0 && entity.AnalyticsViewRowType != null)
			{
				AnalyticsViewRowType = new AnalyticsViewRowType(entity.AnalyticsViewRowType, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AnalyticsViewRow CreateCopy()
		{
			var res = new AnalyticsViewRow(this);
			if (AnalyticsViewRowType != null)
			{
				res.AnalyticsViewRowType = new AnalyticsViewRowType{Id=AnalyticsViewRowType.Id, Eid=AnalyticsViewRowType.Eid};
			}
			return res;
		}

		public void CopyEntity(AnalyticsViewRow entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			ByDay = entity.ByDay;
			ByHour = entity.ByHour;
			ByWeek = entity.ByWeek;
			Total = entity.Total;
			ByDayColor = entity.ByDayColor;
			ByHourColor = entity.ByHourColor;
			ByWeekColor = entity.ByWeekColor;
			TotalColor = entity.TotalColor;
			ByDay2 = entity.ByDay2;
			ByHour2 = entity.ByHour2;
			ByWeek2 = entity.ByWeek2;
			Total2 = entity.Total2;
			Day1 = entity.Day1;
			Day2 = entity.Day2;
			Day3 = entity.Day3;
			Day4 = entity.Day4;
			Day5 = entity.Day5;
			Day6 = entity.Day6;
			DataDay1 = entity.DataDay1;
			DataDay2 = entity.DataDay2;
			DataDay3 = entity.DataDay3;
			DataDay4 = entity.DataDay4;
			DataDay5 = entity.DataDay5;
			DataDay6 = entity.DataDay6;
			AnalyticsViewRowTypeId = entity.AnalyticsViewRowTypeId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AnalyticsViewRowType : ILastUpdateTick
	{
		public AnalyticsViewRowType()
		{
		}

		public AnalyticsViewRowType(AnalyticsViewRowType entity) : this(entity, null)
		{
		}

		public AnalyticsViewRowType(AnalyticsViewRowType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AnalyticsViewRowType CreateCopy()
		{
			var res = new AnalyticsViewRowType(this);
			return res;
		}

		public void CopyEntity(AnalyticsViewRowType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Applicant : ILastUpdateTick
	{
		public Applicant()
		{
		}

		public Applicant(Applicant entity) : this(entity, null)
		{
		}

		public Applicant(Applicant entity, int? deep)
		{
			if (entity == null) return;

			IndexField = entity.IndexField;
			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			HaveMiddleName = entity.HaveMiddleName;
			DocumentSeria = entity.DocumentSeria;
			DocumentNumber = entity.DocumentNumber;
			DocumentDateOfIssue = entity.DocumentDateOfIssue;
			DocumentSubjectIssue = entity.DocumentSubjectIssue;
			DocumentCode = entity.DocumentCode;
			Phone = entity.Phone;
			Email = entity.Email;
			Snils = entity.Snils;
			IsAccomp = entity.IsAccomp;
			IsApplicant = entity.IsApplicant;
			ForeginSeria = entity.ForeginSeria;
			ForeginNumber = entity.ForeginNumber;
			ForeginSubjectIssue = entity.ForeginSubjectIssue;
			ForeginDateOfIssue = entity.ForeginDateOfIssue;
			ForeginDateEnd = entity.ForeginDateEnd;
			Key = entity.Key;
			IntervalStart = entity.IntervalStart;
			IntervalEnd = entity.IntervalEnd;
			IsLast = entity.IsLast;
			Male = entity.Male;
			DateOfBirth = entity.DateOfBirth;
			Position = entity.Position;
			PaymentFileUrl = entity.PaymentFileUrl;
			PaymentFileTitle = entity.PaymentFileTitle;
			PlaceOfBirth = entity.PlaceOfBirth;
			NotNeedTicketForward = entity.NotNeedTicketForward;
			NotNeedTicketBackward = entity.NotNeedTicketBackward;
			Payed = entity.Payed;
			NotComeInPlaceOfRest = entity.NotComeInPlaceOfRest;
			DocumentSeriaCertOfBirth = entity.DocumentSeriaCertOfBirth;
			DocumentNumberCertOfBirth = entity.DocumentNumberCertOfBirth;
			KeyOther = entity.KeyOther;
			ForeginName = entity.ForeginName;
			ForeginLastName = entity.ForeginLastName;
			IsDeleted = entity.IsDeleted;
			BenefitRequestComment = entity.BenefitRequestComment;
			IsIncludeInInteragency = entity.IsIncludeInInteragency;
			IsApprovedInInteragency = entity.IsApprovedInInteragency;
			IsIncludeInInteragencySecondary = entity.IsIncludeInInteragencySecondary;
			IsApprovedInInteragencySecondary = entity.IsApprovedInInteragencySecondary;
			IsInvalid = entity.IsInvalid;
			BenefitApprove = entity.BenefitApprove;
			BenefitApproveRequestDate = entity.BenefitApproveRequestDate;
			BenefitApproveComment = entity.BenefitApproveComment;
			BenefitApproveHtml = entity.BenefitApproveHtml;
			BenefitRequestNumber = entity.BenefitRequestNumber;
			BenefitRequestDate = entity.BenefitRequestDate;
			BenefitAnswerNumber = entity.BenefitAnswerNumber;
			BenefitAnswerDate = entity.BenefitAnswerDate;
			BenefitAnswerComment = entity.BenefitAnswerComment;
			AddonPhone = entity.AddonPhone;
			Inn = entity.Inn;
			IsApplicantCamper = entity.IsApplicantCamper;
			IsAgent = entity.IsAgent;
			ProxyDateOfIssure = entity.ProxyDateOfIssure;
			NotaryName = entity.NotaryName;
			ProxyEndDate = entity.ProxyEndDate;
			ProxyNumber = entity.ProxyNumber;
			IsProxy = entity.IsProxy;
			IsCPMPK = entity.IsCPMPK;
			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			DocumentTypeId = entity.DocumentTypeId;
			if (deep > 0 && entity.DocumentType != null)
			{
				DocumentType = new DocumentType(entity.DocumentType, deep - 1);
			}

			ApplicantTypeId = entity.ApplicantTypeId;
			if (deep > 0 && entity.ApplicantType != null)
			{
				ApplicantType = new ApplicantType(entity.ApplicantType, deep - 1);
			}

			EntityId = entity.EntityId;
			if (deep > 0 && entity.Entity != null)
			{
				Entity = new Applicant(entity.Entity, deep - 1);
			}

			ForeginTypeId = entity.ForeginTypeId;
			if (deep > 0 && entity.ForeginType != null)
			{
				ForeginType = new DocumentType(entity.ForeginType, deep - 1);
			}

			TypeViolationId = entity.TypeViolationId;
			if (deep > 0 && entity.TypeViolation != null)
			{
				TypeViolation = new TypeViolation(entity.TypeViolation, deep - 1);
			}

			ApplicantCamperId = entity.ApplicantCamperId;
			if (deep > 0 && entity.ApplicantCamper != null)
			{
				ApplicantCamper = new Child(entity.ApplicantCamper, deep - 1);
			}

			BenefitTypeId = entity.BenefitTypeId;
			if (deep > 0 && entity.BenefitType != null)
			{
				BenefitType = new BenefitType(entity.BenefitType, deep - 1);
			}

			AddressId = entity.AddressId;
			if (deep > 0 && entity.Address != null)
			{
				Address = new Address(entity.Address, deep - 1);
			}

			StatusByChildId = entity.StatusByChildId;
			if (deep > 0 && entity.StatusByChild != null)
			{
				StatusByChild = new StatusByChild(entity.StatusByChild, deep - 1);
			}

			ChildListId = entity.ChildListId;
			if (deep > 0 && entity.ChildList != null)
			{
				ChildList = new ListOfChilds(entity.ChildList, deep - 1);
			}

			ExcludeReasonId = entity.ExcludeReasonId;
			if (deep > 0 && entity.ExcludeReason != null)
			{
				ExcludeReason = new ChildIncludeExcludeReason(entity.ExcludeReason, deep - 1);
			}

			IncludeReasonId = entity.IncludeReasonId;
			if (deep > 0 && entity.IncludeReason != null)
			{
				IncludeReason = new ChildIncludeExcludeReason(entity.IncludeReason, deep - 1);
			}

			TourVolumeId = entity.TourVolumeId;
			if (deep > 0 && entity.TourVolume != null)
			{
				TourVolume = new TourVolume(entity.TourVolume, deep - 1);
			}

			BoutId = entity.BoutId;
			if (deep > 0 && entity.Bout != null)
			{
				Bout = new Bout(entity.Bout, deep - 1);
			}

			OfferInRequestId = entity.OfferInRequestId;
			if (deep > 0 && entity.OfferInRequest != null)
			{
				OfferInRequest = new OfferInRequest(entity.OfferInRequest, deep - 1);
			}

			CountryId = entity.CountryId;
			if (deep > 0 && entity.Country != null)
			{
				Country = new Country(entity.Country, deep - 1);
			}

			RelativeUniqeId = entity.RelativeUniqeId;
			if (deep > 0 && entity.RelativeUniqe != null)
			{
				RelativeUniqe = new RelativeUniqe(entity.RelativeUniqe, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Applicant CreateCopy()
		{
			var res = new Applicant(this);
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (DocumentType != null)
			{
				res.DocumentType = new DocumentType{Id=DocumentType.Id, Eid=DocumentType.Eid};
			}
			if (ApplicantType != null)
			{
				res.ApplicantType = new ApplicantType{Id=ApplicantType.Id, Eid=ApplicantType.Eid};
			}
			if (Entity != null)
			{
				res.Entity = new Applicant{Id=Entity.Id, Eid=Entity.Eid};
			}
			if (ForeginType != null)
			{
				res.ForeginType = new DocumentType{Id=ForeginType.Id, Eid=ForeginType.Eid};
			}
			if (TypeViolation != null)
			{
				res.TypeViolation = new TypeViolation{Id=TypeViolation.Id, Eid=TypeViolation.Eid};
			}
			if (ApplicantCamper != null)
			{
				res.ApplicantCamper = new Child{Id=ApplicantCamper.Id, Eid=ApplicantCamper.Eid};
			}
			if (BenefitType != null)
			{
				res.BenefitType = new BenefitType{Id=BenefitType.Id, Eid=BenefitType.Eid};
			}
			if (Address != null)
			{
				res.Address = new Address{Id=Address.Id, Eid=Address.Eid};
			}
			if (StatusByChild != null)
			{
				res.StatusByChild = new StatusByChild{Id=StatusByChild.Id, Eid=StatusByChild.Eid};
			}
			if (ChildList != null)
			{
				res.ChildList = new ListOfChilds{Id=ChildList.Id, Eid=ChildList.Eid};
			}
			if (ExcludeReason != null)
			{
				res.ExcludeReason = new ChildIncludeExcludeReason{Id=ExcludeReason.Id, Eid=ExcludeReason.Eid};
			}
			if (IncludeReason != null)
			{
				res.IncludeReason = new ChildIncludeExcludeReason{Id=IncludeReason.Id, Eid=IncludeReason.Eid};
			}
			if (TourVolume != null)
			{
				res.TourVolume = new TourVolume{Id=TourVolume.Id, Eid=TourVolume.Eid};
			}
			if (Bout != null)
			{
				res.Bout = new Bout{Id=Bout.Id, Eid=Bout.Eid};
			}
			if (OfferInRequest != null)
			{
				res.OfferInRequest = new OfferInRequest{Id=OfferInRequest.Id, Eid=OfferInRequest.Eid};
			}
			if (Country != null)
			{
				res.Country = new Country{Id=Country.Id, Eid=Country.Eid};
			}
			if (RelativeUniqe != null)
			{
				res.RelativeUniqe = new RelativeUniqe{Id=RelativeUniqe.Id, Eid=RelativeUniqe.Eid};
			}
			res.ChildAttendant = ChildAttendant?.Select(p=>new Child {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.BaseRegistryInfo = BaseRegistryInfo?.Select(p=>new ExchangeBaseRegistry {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.LinkToPeoples = LinkToPeoples?.Select(p=>new LinkToPeople {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Calculations = Calculations?.Select(p=>new Calculation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.ERLPersons = ERLPersons?.Select(p=>new ERLPersonStatus {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Tours = Tours?.Select(p=>new Tour {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Applicant entity)
		{
			IndexField = entity.IndexField;
			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			HaveMiddleName = entity.HaveMiddleName;
			DocumentSeria = entity.DocumentSeria;
			DocumentNumber = entity.DocumentNumber;
			DocumentDateOfIssue = entity.DocumentDateOfIssue;
			DocumentSubjectIssue = entity.DocumentSubjectIssue;
			DocumentCode = entity.DocumentCode;
			Phone = entity.Phone;
			Email = entity.Email;
			Snils = entity.Snils;
			IsAccomp = entity.IsAccomp;
			IsApplicant = entity.IsApplicant;
			ForeginSeria = entity.ForeginSeria;
			ForeginNumber = entity.ForeginNumber;
			ForeginSubjectIssue = entity.ForeginSubjectIssue;
			ForeginDateOfIssue = entity.ForeginDateOfIssue;
			ForeginDateEnd = entity.ForeginDateEnd;
			Key = entity.Key;
			IntervalStart = entity.IntervalStart;
			IntervalEnd = entity.IntervalEnd;
			IsLast = entity.IsLast;
			Male = entity.Male;
			DateOfBirth = entity.DateOfBirth;
			Position = entity.Position;
			PaymentFileUrl = entity.PaymentFileUrl;
			PaymentFileTitle = entity.PaymentFileTitle;
			PlaceOfBirth = entity.PlaceOfBirth;
			NotNeedTicketForward = entity.NotNeedTicketForward;
			NotNeedTicketBackward = entity.NotNeedTicketBackward;
			Payed = entity.Payed;
			NotComeInPlaceOfRest = entity.NotComeInPlaceOfRest;
			DocumentSeriaCertOfBirth = entity.DocumentSeriaCertOfBirth;
			DocumentNumberCertOfBirth = entity.DocumentNumberCertOfBirth;
			KeyOther = entity.KeyOther;
			ForeginName = entity.ForeginName;
			ForeginLastName = entity.ForeginLastName;
			IsDeleted = entity.IsDeleted;
			BenefitRequestComment = entity.BenefitRequestComment;
			IsIncludeInInteragency = entity.IsIncludeInInteragency;
			IsApprovedInInteragency = entity.IsApprovedInInteragency;
			IsIncludeInInteragencySecondary = entity.IsIncludeInInteragencySecondary;
			IsApprovedInInteragencySecondary = entity.IsApprovedInInteragencySecondary;
			IsInvalid = entity.IsInvalid;
			BenefitApprove = entity.BenefitApprove;
			BenefitApproveRequestDate = entity.BenefitApproveRequestDate;
			BenefitApproveComment = entity.BenefitApproveComment;
			BenefitApproveHtml = entity.BenefitApproveHtml;
			BenefitRequestNumber = entity.BenefitRequestNumber;
			BenefitRequestDate = entity.BenefitRequestDate;
			BenefitAnswerNumber = entity.BenefitAnswerNumber;
			BenefitAnswerDate = entity.BenefitAnswerDate;
			BenefitAnswerComment = entity.BenefitAnswerComment;
			AddonPhone = entity.AddonPhone;
			Inn = entity.Inn;
			IsApplicantCamper = entity.IsApplicantCamper;
			IsAgent = entity.IsAgent;
			ProxyDateOfIssure = entity.ProxyDateOfIssure;
			NotaryName = entity.NotaryName;
			ProxyEndDate = entity.ProxyEndDate;
			ProxyNumber = entity.ProxyNumber;
			IsProxy = entity.IsProxy;
			IsCPMPK = entity.IsCPMPK;
			RequestId = entity.RequestId;
			DocumentTypeId = entity.DocumentTypeId;
			ApplicantTypeId = entity.ApplicantTypeId;
			EntityId = entity.EntityId;
			ForeginTypeId = entity.ForeginTypeId;
			TypeViolationId = entity.TypeViolationId;
			ApplicantCamperId = entity.ApplicantCamperId;
			BenefitTypeId = entity.BenefitTypeId;
			AddressId = entity.AddressId;
			StatusByChildId = entity.StatusByChildId;
			ChildListId = entity.ChildListId;
			ExcludeReasonId = entity.ExcludeReasonId;
			IncludeReasonId = entity.IncludeReasonId;
			TourVolumeId = entity.TourVolumeId;
			BoutId = entity.BoutId;
			OfferInRequestId = entity.OfferInRequestId;
			CountryId = entity.CountryId;
			RelativeUniqeId = entity.RelativeUniqeId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ApplicantType : ILastUpdateTick
	{
		public ApplicantType()
		{
		}

		public ApplicantType(ApplicantType entity) : this(entity, null)
		{
		}

		public ApplicantType(ApplicantType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			CreateUserId = entity.CreateUserId;
			if (deep > 0 && entity.CreateUser != null)
			{
				CreateUser = new Account(entity.CreateUser, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ApplicantType CreateCopy()
		{
			var res = new ApplicantType(this);
			if (CreateUser != null)
			{
				res.CreateUser = new Account{Id=CreateUser.Id, Eid=CreateUser.Eid};
			}
			return res;
		}

		public void CopyEntity(ApplicantType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			CreateUserId = entity.CreateUserId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AttendantType : ILastUpdateTick
	{
		public AttendantType()
		{
		}

		public AttendantType(AttendantType entity) : this(entity, null)
		{
		}

		public AttendantType(AttendantType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AttendantType CreateCopy()
		{
			var res = new AttendantType(this);
			return res;
		}

		public void CopyEntity(AttendantType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class AverageRestPrice : ILastUpdateTick
	{
		public AverageRestPrice()
		{
		}

		public AverageRestPrice(AverageRestPrice entity) : this(entity, null)
		{
		}

		public AverageRestPrice(AverageRestPrice entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Price = entity.Price;
			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			TypeOfRestId = entity.TypeOfRestId;
			if (deep > 0 && entity.TypeOfRest != null)
			{
				TypeOfRest = new TypeOfRest(entity.TypeOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public AverageRestPrice CreateCopy()
		{
			var res = new AverageRestPrice(this);
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (TypeOfRest != null)
			{
				res.TypeOfRest = new TypeOfRest{Id=TypeOfRest.Id, Eid=TypeOfRest.Eid};
			}
			return res;
		}

		public void CopyEntity(AverageRestPrice entity)
		{
			Id = entity.Id;
			Price = entity.Price;
			YearOfRestId = entity.YearOfRestId;
			TypeOfRestId = entity.TypeOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Beneficiaries : ILastUpdateTick
	{
		public Beneficiaries()
		{
		}

		public Beneficiaries(Beneficiaries entity) : this(entity, null)
		{
		}

		public Beneficiaries(Beneficiaries entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Beneficiaries CreateCopy()
		{
			var res = new Beneficiaries(this);
			return res;
		}

		public void CopyEntity(Beneficiaries entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class BenefitApproveType : ILastUpdateTick
	{
		public BenefitApproveType()
		{
		}

		public BenefitApproveType(BenefitApproveType entity) : this(entity, null)
		{
		}

		public BenefitApproveType(BenefitApproveType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BenefitApproveType CreateCopy()
		{
			var res = new BenefitApproveType(this);
			return res;
		}

		public void CopyEntity(BenefitApproveType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class BenefitGroupInvalid : ILastUpdateTick
	{
		public BenefitGroupInvalid()
		{
		}

		public BenefitGroupInvalid(BenefitGroupInvalid entity) : this(entity, null)
		{
		}

		public BenefitGroupInvalid(BenefitGroupInvalid entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BenefitGroupInvalid CreateCopy()
		{
			var res = new BenefitGroupInvalid(this);
			return res;
		}

		public void CopyEntity(BenefitGroupInvalid entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class BenefitType : ILastUpdateTick
	{
		public BenefitType()
		{
		}

		public BenefitType(BenefitType entity) : this(entity, null)
		{
		}

		public BenefitType(BenefitType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			ExnternalUid = entity.ExnternalUid;
			NeedTypeOfRestriction = entity.NeedTypeOfRestriction;
			NeedApproveDocument = entity.NeedApproveDocument;
			IsActive = entity.IsActive;
			ForAisoOnly = entity.ForAisoOnly;
			TypeOfRestId = entity.TypeOfRestId;
			if (deep > 0 && entity.TypeOfRest != null)
			{
				TypeOfRest = new TypeOfRest(entity.TypeOfRest, deep - 1);
			}

			SameBenefitId = entity.SameBenefitId;
			if (deep > 0 && entity.SameBenefit != null)
			{
				SameBenefit = new BenefitType(entity.SameBenefit, deep - 1);
			}

			TypeOfGroupCheckId = entity.TypeOfGroupCheckId;
			if (deep > 0 && entity.TypeOfGroupCheck != null)
			{
				TypeOfGroupCheck = new TypeOfGroupCheck(entity.TypeOfGroupCheck, deep - 1);
			}

			CreateUserId = entity.CreateUserId;
			if (deep > 0 && entity.CreateUser != null)
			{
				CreateUser = new Account(entity.CreateUser, deep - 1);
			}

			BenefitTypeERLId = entity.BenefitTypeERLId;
			if (deep > 0 && entity.BenefitTypeERL != null)
			{
				BenefitTypeERL = new BenefitTypeERL(entity.BenefitTypeERL, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BenefitType CreateCopy()
		{
			var res = new BenefitType(this);
			if (TypeOfRest != null)
			{
				res.TypeOfRest = new TypeOfRest{Id=TypeOfRest.Id, Eid=TypeOfRest.Eid};
			}
			if (SameBenefit != null)
			{
				res.SameBenefit = new BenefitType{Id=SameBenefit.Id, Eid=SameBenefit.Eid};
			}
			if (TypeOfGroupCheck != null)
			{
				res.TypeOfGroupCheck = new TypeOfGroupCheck{Id=TypeOfGroupCheck.Id, Eid=TypeOfGroupCheck.Eid};
			}
			if (CreateUser != null)
			{
				res.CreateUser = new Account{Id=CreateUser.Id, Eid=CreateUser.Eid};
			}
			if (BenefitTypeERL != null)
			{
				res.BenefitTypeERL = new BenefitTypeERL{Id=BenefitTypeERL.Id, Eid=BenefitTypeERL.Eid};
			}
			return res;
		}

		public void CopyEntity(BenefitType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			ExnternalUid = entity.ExnternalUid;
			NeedTypeOfRestriction = entity.NeedTypeOfRestriction;
			NeedApproveDocument = entity.NeedApproveDocument;
			IsActive = entity.IsActive;
			ForAisoOnly = entity.ForAisoOnly;
			TypeOfRestId = entity.TypeOfRestId;
			SameBenefitId = entity.SameBenefitId;
			TypeOfGroupCheckId = entity.TypeOfGroupCheckId;
			CreateUserId = entity.CreateUserId;
			BenefitTypeERLId = entity.BenefitTypeERLId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class BenefitTypeERL : ILastUpdateTick
	{
		public BenefitTypeERL()
		{
		}

		public BenefitTypeERL(BenefitTypeERL entity) : this(entity, null)
		{
		}

		public BenefitTypeERL(BenefitTypeERL entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LCCode = entity.LCCode;
			TypeOfRestId = entity.TypeOfRestId;
			if (deep > 0 && entity.TypeOfRest != null)
			{
				TypeOfRest = new TypeOfRest(entity.TypeOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BenefitTypeERL CreateCopy()
		{
			var res = new BenefitTypeERL(this);
			if (TypeOfRest != null)
			{
				res.TypeOfRest = new TypeOfRest{Id=TypeOfRest.Id, Eid=TypeOfRest.Eid};
			}
			res.BenefitTypes = BenefitTypes?.Select(p=>new BenefitType {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.TypesOfRestERL = TypesOfRestERL?.Select(p=>new TypeOfRestERL {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(BenefitTypeERL entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LCCode = entity.LCCode;
			TypeOfRestId = entity.TypeOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Booking : ILastUpdateTick
	{
		public Booking()
		{
		}

		public Booking(Booking entity) : this(entity, null)
		{
		}

		public Booking(Booking entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Code = entity.Code;
			BookingDate = entity.BookingDate;
			CountRooms = entity.CountRooms;
			CountPlace = entity.CountPlace;
			CountAttendants = entity.CountAttendants;
			Canceled = entity.Canceled;
			TourVolumeId = entity.TourVolumeId;
			if (deep > 0 && entity.TourVolume != null)
			{
				TourVolume = new TourVolume(entity.TourVolume, deep - 1);
			}

			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			TypeOfRestId = entity.TypeOfRestId;
			if (deep > 0 && entity.TypeOfRest != null)
			{
				TypeOfRest = new TypeOfRest(entity.TypeOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Booking CreateCopy()
		{
			var res = new Booking(this);
			if (TourVolume != null)
			{
				res.TourVolume = new TourVolume{Id=TourVolume.Id, Eid=TourVolume.Eid};
			}
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (TypeOfRest != null)
			{
				res.TypeOfRest = new TypeOfRest{Id=TypeOfRest.Id, Eid=TypeOfRest.Eid};
			}
			res.Childs = Childs?.Select(p=>new Child {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Booking entity)
		{
			Id = entity.Id;
			Code = entity.Code;
			BookingDate = entity.BookingDate;
			CountRooms = entity.CountRooms;
			CountPlace = entity.CountPlace;
			CountAttendants = entity.CountAttendants;
			Canceled = entity.Canceled;
			TourVolumeId = entity.TourVolumeId;
			RequestId = entity.RequestId;
			TypeOfRestId = entity.TypeOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class BookingCommercial : ILastUpdateTick
	{
		public BookingCommercial()
		{
		}

		public BookingCommercial(BookingCommercial entity) : this(entity, null)
		{
		}

		public BookingCommercial(BookingCommercial entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateBooking = entity.DateBooking;
			Uid = entity.Uid;
			IsCancel = entity.IsCancel;
			Count = entity.Count;
			TourVolumeId = entity.TourVolumeId;
			if (deep > 0 && entity.TourVolume != null)
			{
				TourVolume = new TourVolume(entity.TourVolume, deep - 1);
			}

			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BookingCommercial CreateCopy()
		{
			var res = new BookingCommercial(this);
			if (TourVolume != null)
			{
				res.TourVolume = new TourVolume{Id=TourVolume.Id, Eid=TourVolume.Eid};
			}
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			return res;
		}

		public void CopyEntity(BookingCommercial entity)
		{
			Id = entity.Id;
			DateBooking = entity.DateBooking;
			Uid = entity.Uid;
			IsCancel = entity.IsCancel;
			Count = entity.Count;
			TourVolumeId = entity.TourVolumeId;
			RequestId = entity.RequestId;
			TourId = entity.TourId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Bout : ILastUpdateTick
	{
		public Bout()
		{
		}

		public Bout(Bout entity) : this(entity, null)
		{
		}

		public Bout(Bout entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateIncome = entity.DateIncome;
			DateOutcome = entity.DateOutcome;
			IncludedInTransport = entity.IncludedInTransport;
			Comment = entity.Comment;
			IsPublishOnSite = entity.IsPublishOnSite;
			HotelsId = entity.HotelsId;
			if (deep > 0 && entity.Hotels != null)
			{
				Hotels = new Hotels(entity.Hotels, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			GroupedTimeOfRestId = entity.GroupedTimeOfRestId;
			if (deep > 0 && entity.GroupedTimeOfRest != null)
			{
				GroupedTimeOfRest = new GroupedTimeOfRest(entity.GroupedTimeOfRest, deep - 1);
			}

			SubjectOfRestId = entity.SubjectOfRestId;
			if (deep > 0 && entity.SubjectOfRest != null)
			{
				SubjectOfRest = new SubjectOfRest(entity.SubjectOfRest, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			TransportInfoFromId = entity.TransportInfoFromId;
			if (deep > 0 && entity.TransportInfoFrom != null)
			{
				TransportInfoFrom = new TransportInfo(entity.TransportInfoFrom, deep - 1);
			}

			TransportInfoToId = entity.TransportInfoToId;
			if (deep > 0 && entity.TransportInfoTo != null)
			{
				TransportInfoTo = new TransportInfo(entity.TransportInfoTo, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
			ChildrenCount = entity.ChildrenCount;
			VacantChildrenCount = entity.VacantChildrenCount;
		}

		public Bout CreateCopy()
		{
			var res = new Bout(this);
			if (Hotels != null)
			{
				res.Hotels = new Hotels{Id=Hotels.Id, Eid=Hotels.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (GroupedTimeOfRest != null)
			{
				res.GroupedTimeOfRest = new GroupedTimeOfRest{Id=GroupedTimeOfRest.Id, Eid=GroupedTimeOfRest.Eid};
			}
			if (SubjectOfRest != null)
			{
				res.SubjectOfRest = new SubjectOfRest{Id=SubjectOfRest.Id, Eid=SubjectOfRest.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (TransportInfoFrom != null)
			{
				res.TransportInfoFrom = new TransportInfo{Id=TransportInfoFrom.Id, Eid=TransportInfoFrom.Eid};
			}
			if (TransportInfoTo != null)
			{
				res.TransportInfoTo = new TransportInfo{Id=TransportInfoTo.Id, Eid=TransportInfoTo.Eid};
			}
			res.Partys = Partys?.Select(p=>new Party {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Tours = Tours?.Select(p=>new Tour {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Applicants = Applicants?.Select(p=>new Applicant {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Chidren = Chidren?.Select(p=>new Child {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.BoutJournal = BoutJournal?.Select(p=>new BoutJournal {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Attendants = Attendants?.Select(p=>new BoutAttendant {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.SeniorCounselors = SeniorCounselors?.Select(p=>new Counselors {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.AdministratorTours = AdministratorTours?.Select(p=>new AdministratorTour {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.SwingCounselors = SwingCounselors?.Select(p=>new Counselors {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Bout entity)
		{
			Id = entity.Id;
			DateIncome = entity.DateIncome;
			DateOutcome = entity.DateOutcome;
			IncludedInTransport = entity.IncludedInTransport;
			Comment = entity.Comment;
			IsPublishOnSite = entity.IsPublishOnSite;
			HotelsId = entity.HotelsId;
			StateId = entity.StateId;
			GroupedTimeOfRestId = entity.GroupedTimeOfRestId;
			SubjectOfRestId = entity.SubjectOfRestId;
			YearOfRestId = entity.YearOfRestId;
			HistoryLinkId = entity.HistoryLinkId;
			TransportInfoFromId = entity.TransportInfoFromId;
			TransportInfoToId = entity.TransportInfoToId;
			LastUpdateTick = entity.LastUpdateTick;
			ChildrenCount = entity.ChildrenCount;
			VacantChildrenCount = entity.VacantChildrenCount;
		}
	}
	public partial class BoutAttendant : ILastUpdateTick
	{
		public BoutAttendant()
		{
		}

		public BoutAttendant(BoutAttendant entity) : this(entity, null)
		{
		}

		public BoutAttendant(BoutAttendant entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			HaveMiddleName = entity.HaveMiddleName;
			Phone = entity.Phone;
			Email = entity.Email;
			BoutId = entity.BoutId;
			if (deep > 0 && entity.Bout != null)
			{
				Bout = new Bout(entity.Bout, deep - 1);
			}

			CounselorsId = entity.CounselorsId;
			if (deep > 0 && entity.Counselors != null)
			{
				Counselors = new Counselors(entity.Counselors, deep - 1);
			}

			AdministratorTourId = entity.AdministratorTourId;
			if (deep > 0 && entity.AdministratorTour != null)
			{
				AdministratorTour = new AdministratorTour(entity.AdministratorTour, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BoutAttendant CreateCopy()
		{
			var res = new BoutAttendant(this);
			if (Bout != null)
			{
				res.Bout = new Bout{Id=Bout.Id, Eid=Bout.Eid};
			}
			if (Counselors != null)
			{
				res.Counselors = new Counselors{Id=Counselors.Id, Eid=Counselors.Eid};
			}
			if (AdministratorTour != null)
			{
				res.AdministratorTour = new AdministratorTour{Id=AdministratorTour.Id, Eid=AdministratorTour.Eid};
			}
			return res;
		}

		public void CopyEntity(BoutAttendant entity)
		{
			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			HaveMiddleName = entity.HaveMiddleName;
			Phone = entity.Phone;
			Email = entity.Email;
			BoutId = entity.BoutId;
			CounselorsId = entity.CounselorsId;
			AdministratorTourId = entity.AdministratorTourId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class BoutJournal : ILastUpdateTick
	{
		public BoutJournal()
		{
		}

		public BoutJournal(BoutJournal entity) : this(entity, null)
		{
		}

		public BoutJournal(BoutJournal entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Title = entity.Title;
			Description = entity.Description;
			EventDate = entity.EventDate;
			DateCreate = entity.DateCreate;
			DateChange = entity.DateChange;
			IsArchive = entity.IsArchive;
			ForSite = entity.ForSite;
			BoutId = entity.BoutId;
			if (deep > 0 && entity.Bout != null)
			{
				Bout = new Bout(entity.Bout, deep - 1);
			}

			CounselorsId = entity.CounselorsId;
			if (deep > 0 && entity.Counselors != null)
			{
				Counselors = new Counselors(entity.Counselors, deep - 1);
			}

			CounselorTaskExecutorTypeId = entity.CounselorTaskExecutorTypeId;
			if (deep > 0 && entity.CounselorTaskExecutorType != null)
			{
				CounselorTaskExecutorType = new CounselorTaskExecutorType(entity.CounselorTaskExecutorType, deep - 1);
			}

			AdministratorTourId = entity.AdministratorTourId;
			if (deep > 0 && entity.AdministratorTour != null)
			{
				AdministratorTour = new AdministratorTour(entity.AdministratorTour, deep - 1);
			}

			PartyId = entity.PartyId;
			if (deep > 0 && entity.Party != null)
			{
				Party = new Party(entity.Party, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			BoutJournalTypeId = entity.BoutJournalTypeId;
			if (deep > 0 && entity.BoutJournalType != null)
			{
				BoutJournalType = new BoutJournalType(entity.BoutJournalType, deep - 1);
			}

			CategoryIncidentId = entity.CategoryIncidentId;
			if (deep > 0 && entity.CategoryIncident != null)
			{
				CategoryIncident = new CategoryIncident(entity.CategoryIncident, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BoutJournal CreateCopy()
		{
			var res = new BoutJournal(this);
			if (Bout != null)
			{
				res.Bout = new Bout{Id=Bout.Id, Eid=Bout.Eid};
			}
			if (Counselors != null)
			{
				res.Counselors = new Counselors{Id=Counselors.Id, Eid=Counselors.Eid};
			}
			if (CounselorTaskExecutorType != null)
			{
				res.CounselorTaskExecutorType = new CounselorTaskExecutorType{Id=CounselorTaskExecutorType.Id, Eid=CounselorTaskExecutorType.Eid};
			}
			if (AdministratorTour != null)
			{
				res.AdministratorTour = new AdministratorTour{Id=AdministratorTour.Id, Eid=AdministratorTour.Eid};
			}
			if (Party != null)
			{
				res.Party = new Party{Id=Party.Id, Eid=Party.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (BoutJournalType != null)
			{
				res.BoutJournalType = new BoutJournalType{Id=BoutJournalType.Id, Eid=BoutJournalType.Eid};
			}
			if (CategoryIncident != null)
			{
				res.CategoryIncident = new CategoryIncident{Id=CategoryIncident.Id, Eid=CategoryIncident.Eid};
			}
			res.Files = Files?.Select(p=>new BoutJournalFile {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(BoutJournal entity)
		{
			Id = entity.Id;
			Title = entity.Title;
			Description = entity.Description;
			EventDate = entity.EventDate;
			DateCreate = entity.DateCreate;
			DateChange = entity.DateChange;
			IsArchive = entity.IsArchive;
			ForSite = entity.ForSite;
			BoutId = entity.BoutId;
			CounselorsId = entity.CounselorsId;
			CounselorTaskExecutorTypeId = entity.CounselorTaskExecutorTypeId;
			AdministratorTourId = entity.AdministratorTourId;
			PartyId = entity.PartyId;
			HistoryLinkId = entity.HistoryLinkId;
			BoutJournalTypeId = entity.BoutJournalTypeId;
			CategoryIncidentId = entity.CategoryIncidentId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class BoutJournalFile : ILastUpdateTick
	{
		public BoutJournalFile()
		{
		}

		public BoutJournalFile(BoutJournalFile entity) : this(entity, null)
		{
		}

		public BoutJournalFile(BoutJournalFile entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FileName = entity.FileName;
			FileLink = entity.FileLink;
			IsPhoto = entity.IsPhoto;
			DateCreate = entity.DateCreate;
			BoutJournalId = entity.BoutJournalId;
			if (deep > 0 && entity.BoutJournal != null)
			{
				BoutJournal = new BoutJournal(entity.BoutJournal, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BoutJournalFile CreateCopy()
		{
			var res = new BoutJournalFile(this);
			if (BoutJournal != null)
			{
				res.BoutJournal = new BoutJournal{Id=BoutJournal.Id, Eid=BoutJournal.Eid};
			}
			return res;
		}

		public void CopyEntity(BoutJournalFile entity)
		{
			Id = entity.Id;
			FileName = entity.FileName;
			FileLink = entity.FileLink;
			IsPhoto = entity.IsPhoto;
			DateCreate = entity.DateCreate;
			BoutJournalId = entity.BoutJournalId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class BoutJournalType : ILastUpdateTick
	{
		public BoutJournalType()
		{
		}

		public BoutJournalType(BoutJournalType entity) : this(entity, null)
		{
		}

		public BoutJournalType(BoutJournalType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BoutJournalType CreateCopy()
		{
			var res = new BoutJournalType(this);
			return res;
		}

		public void CopyEntity(BoutJournalType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class BtiAddress : ILastUpdateTick
	{
		public BtiAddress()
		{
		}

		public BtiAddress(BtiAddress entity) : this(entity, null)
		{
		}

		public BtiAddress(BtiAddress entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FullAddress = entity.FullAddress;
			Unom = entity.Unom;
			ShortAddress = entity.ShortAddress;
			Unod = entity.Unod;
			Status = entity.Status;
			BtiDistrictId = entity.BtiDistrictId;
			if (deep > 0 && entity.BtiDistrict != null)
			{
				BtiDistrict = new BtiDistrict(entity.BtiDistrict, deep - 1);
			}

			BtiRegionId = entity.BtiRegionId;
			if (deep > 0 && entity.BtiRegion != null)
			{
				BtiRegion = new BtiRegion(entity.BtiRegion, deep - 1);
			}

			BtiStreetId = entity.BtiStreetId;
			if (deep > 0 && entity.BtiStreet != null)
			{
				BtiStreet = new BtiStreet(entity.BtiStreet, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BtiAddress CreateCopy()
		{
			var res = new BtiAddress(this);
			if (BtiDistrict != null)
			{
				res.BtiDistrict = new BtiDistrict{Id=BtiDistrict.Id, Eid=BtiDistrict.Eid};
			}
			if (BtiRegion != null)
			{
				res.BtiRegion = new BtiRegion{Id=BtiRegion.Id, Eid=BtiRegion.Eid};
			}
			if (BtiStreet != null)
			{
				res.BtiStreet = new BtiStreet{Id=BtiStreet.Id, Eid=BtiStreet.Eid};
			}
			return res;
		}

		public void CopyEntity(BtiAddress entity)
		{
			Id = entity.Id;
			FullAddress = entity.FullAddress;
			Unom = entity.Unom;
			ShortAddress = entity.ShortAddress;
			Unod = entity.Unod;
			Status = entity.Status;
			BtiDistrictId = entity.BtiDistrictId;
			BtiRegionId = entity.BtiRegionId;
			BtiStreetId = entity.BtiStreetId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class BtiDistrict : ILastUpdateTick
	{
		public BtiDistrict()
		{
		}

		public BtiDistrict(BtiDistrict entity) : this(entity, null)
		{
		}

		public BtiDistrict(BtiDistrict entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Givz = entity.Givz;
			IsVisible = entity.IsVisible;
			Okato = entity.Okato;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BtiDistrict CreateCopy()
		{
			var res = new BtiDistrict(this);
			return res;
		}

		public void CopyEntity(BtiDistrict entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Givz = entity.Givz;
			IsVisible = entity.IsVisible;
			Okato = entity.Okato;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class BtiRegion : ILastUpdateTick
	{
		public BtiRegion()
		{
		}

		public BtiRegion(BtiRegion entity) : this(entity, null)
		{
		}

		public BtiRegion(BtiRegion entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Givz = entity.Givz;
			IsVisible = entity.IsVisible;
			BtiDistrictId = entity.BtiDistrictId;
			if (deep > 0 && entity.BtiDistrict != null)
			{
				BtiDistrict = new BtiDistrict(entity.BtiDistrict, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BtiRegion CreateCopy()
		{
			var res = new BtiRegion(this);
			if (BtiDistrict != null)
			{
				res.BtiDistrict = new BtiDistrict{Id=BtiDistrict.Id, Eid=BtiDistrict.Eid};
			}
			return res;
		}

		public void CopyEntity(BtiRegion entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Givz = entity.Givz;
			IsVisible = entity.IsVisible;
			BtiDistrictId = entity.BtiDistrictId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class BtiStreet : ILastUpdateTick
	{
		public BtiStreet()
		{
		}

		public BtiStreet(BtiStreet entity) : this(entity, null)
		{
		}

		public BtiStreet(BtiStreet entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public BtiStreet CreateCopy()
		{
			var res = new BtiStreet(this);
			return res;
		}

		public void CopyEntity(BtiStreet entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Calculation : ILastUpdateTick
	{
		public Calculation()
		{
		}

		public Calculation(Calculation entity) : this(entity, null)
		{
		}

		public Calculation(Calculation entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Summa = entity.Summa;
			DateCalculation = entity.DateCalculation;
			LastPaymentDate = entity.LastPaymentDate;
			DateCreate = entity.DateCreate;
			Number = entity.Number;
			Description = entity.Description;
			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HistoryId = entity.HistoryId;
			if (deep > 0 && entity.History != null)
			{
				History = new HistoryLink(entity.History, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			TypeOfCalculationId = entity.TypeOfCalculationId;
			if (deep > 0 && entity.TypeOfCalculation != null)
			{
				TypeOfCalculation = new TypeOfCalculation(entity.TypeOfCalculation, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Calculation CreateCopy()
		{
			var res = new Calculation(this);
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (History != null)
			{
				res.History = new HistoryLink{Id=History.Id, Eid=History.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (TypeOfCalculation != null)
			{
				res.TypeOfCalculation = new TypeOfCalculation{Id=TypeOfCalculation.Id, Eid=TypeOfCalculation.Eid};
			}
			res.Payments = Payments?.Select(p=>new Payment {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Children = Children?.Select(p=>new Child {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Attendants = Attendants?.Select(p=>new Applicant {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.AddonServicesLinks = AddonServicesLinks?.Select(p=>new AddonServicesLink {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Tickets = Tickets?.Select(p=>new Ticket {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.RequestAccommodations = RequestAccommodations?.Select(p=>new RequestAccommodation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Calculation entity)
		{
			Id = entity.Id;
			Summa = entity.Summa;
			DateCalculation = entity.DateCalculation;
			LastPaymentDate = entity.LastPaymentDate;
			DateCreate = entity.DateCreate;
			Number = entity.Number;
			Description = entity.Description;
			StateId = entity.StateId;
			HistoryId = entity.HistoryId;
			AccountId = entity.AccountId;
			RequestId = entity.RequestId;
			TypeOfCalculationId = entity.TypeOfCalculationId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CategoryIncident : ILastUpdateTick
	{
		public CategoryIncident()
		{
		}

		public CategoryIncident(CategoryIncident entity) : this(entity, null)
		{
		}

		public CategoryIncident(CategoryIncident entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsArchive = entity.IsArchive;
			DateCreate = entity.DateCreate;
			ParentId = entity.ParentId;
			if (deep > 0 && entity.Parent != null)
			{
				Parent = new CategoryIncident(entity.Parent, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CategoryIncident CreateCopy()
		{
			var res = new CategoryIncident(this);
			if (Parent != null)
			{
				res.Parent = new CategoryIncident{Id=Parent.Id, Eid=Parent.Eid};
			}
			res.Children = Children?.Select(p=>new CategoryIncident {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(CategoryIncident entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsArchive = entity.IsArchive;
			DateCreate = entity.DateCreate;
			ParentId = entity.ParentId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Certificate : ILastUpdateTick
	{
		public Certificate()
		{
		}

		public Certificate(Certificate entity) : this(entity, null)
		{
		}

		public Certificate(Certificate entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			ContractNumber = entity.ContractNumber;
			ContractDate = entity.ContractDate;
			RestDateFrom = entity.RestDateFrom;
			RestDateTo = entity.RestDateTo;
			Place = entity.Place;
			FullPrice = entity.FullPrice;
			PriceForChild = entity.PriceForChild;
			DatePaidOff = entity.DatePaidOff;
			Region = entity.Region;
			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			StateMachineStateId = entity.StateMachineStateId;
			if (deep > 0 && entity.StateMachineState != null)
			{
				StateMachineState = new StateMachineState(entity.StateMachineState, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Certificate CreateCopy()
		{
			var res = new Certificate(this);
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (StateMachineState != null)
			{
				res.StateMachineState = new StateMachineState{Id=StateMachineState.Id, Eid=StateMachineState.Eid};
			}
			return res;
		}

		public void CopyEntity(Certificate entity)
		{
			Id = entity.Id;
			ContractNumber = entity.ContractNumber;
			ContractDate = entity.ContractDate;
			RestDateFrom = entity.RestDateFrom;
			RestDateTo = entity.RestDateTo;
			Place = entity.Place;
			FullPrice = entity.FullPrice;
			PriceForChild = entity.PriceForChild;
			DatePaidOff = entity.DatePaidOff;
			Region = entity.Region;
			RequestId = entity.RequestId;
			StateMachineStateId = entity.StateMachineStateId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CertificateToApply : ILastUpdateTick
	{
		public CertificateToApply()
		{
		}

		public CertificateToApply(CertificateToApply entity) : this(entity, null)
		{
		}

		public CertificateToApply(CertificateToApply entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			CertificateKey = entity.CertificateKey;
			ByDefault = entity.ByDefault;
			NotificationType = entity.NotificationType;
			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CertificateToApply CreateCopy()
		{
			var res = new CertificateToApply(this);
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			res.Accounts = Accounts?.Select(p=>new CertificateToApplyAccount {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(CertificateToApply entity)
		{
			Id = entity.Id;
			CertificateKey = entity.CertificateKey;
			ByDefault = entity.ByDefault;
			NotificationType = entity.NotificationType;
			AccountId = entity.AccountId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CertificateToApplyAccount : ILastUpdateTick
	{
		public CertificateToApplyAccount()
		{
		}

		public CertificateToApplyAccount(CertificateToApplyAccount entity) : this(entity, null)
		{
		}

		public CertificateToApplyAccount(CertificateToApplyAccount entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			ForExcept = entity.ForExcept;
			ForSystemAccount = entity.ForSystemAccount;
			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			CertificateToApplyId = entity.CertificateToApplyId;
			if (deep > 0 && entity.CertificateToApply != null)
			{
				CertificateToApply = new CertificateToApply(entity.CertificateToApply, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CertificateToApplyAccount CreateCopy()
		{
			var res = new CertificateToApplyAccount(this);
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			if (CertificateToApply != null)
			{
				res.CertificateToApply = new CertificateToApply{Id=CertificateToApply.Id, Eid=CertificateToApply.Eid};
			}
			return res;
		}

		public void CopyEntity(CertificateToApplyAccount entity)
		{
			Id = entity.Id;
			ForExcept = entity.ForExcept;
			ForSystemAccount = entity.ForSystemAccount;
			AccountId = entity.AccountId;
			CertificateToApplyId = entity.CertificateToApplyId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Child : ILastUpdateTick
	{
		public Child()
		{
		}

		public Child(Child entity) : this(entity, null)
		{
		}

		public Child(Child entity, int? deep)
		{
			if (entity == null) return;

			IndexField = entity.IndexField;
			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			HaveMiddleName = entity.HaveMiddleName;
			DocumentSeria = entity.DocumentSeria;
			DocumentNumber = entity.DocumentNumber;
			DocumentDateOfIssue = entity.DocumentDateOfIssue;
			DocumentSubjectIssue = entity.DocumentSubjectIssue;
			DocumentCode = entity.DocumentCode;
			DateOfBirth = entity.DateOfBirth;
			BenefitDate = entity.BenefitDate;
			BenefitNeverEnd = entity.BenefitNeverEnd;
			BenefitEndDate = entity.BenefitEndDate;
			BenefitNumber = entity.BenefitNumber;
			BenefitSubjectIssue = entity.BenefitSubjectIssue;
			BenefitDateOfIssure = entity.BenefitDateOfIssure;
			ForeginSeria = entity.ForeginSeria;
			ForeginNumber = entity.ForeginNumber;
			ForeginSubjectIssue = entity.ForeginSubjectIssue;
			ForeginDateOfIssue = entity.ForeginDateOfIssue;
			ForeginDateEnd = entity.ForeginDateEnd;
			SchoolNotPresent = entity.SchoolNotPresent;
			RegisteredInMoscow = entity.RegisteredInMoscow;
			Male = entity.Male;
			BenefitApprove = entity.BenefitApprove;
			BenefitApproveRequestDate = entity.BenefitApproveRequestDate;
			BenefitApproveComment = entity.BenefitApproveComment;
			BenefitApproveHtml = entity.BenefitApproveHtml;
			BenefitRequestNumber = entity.BenefitRequestNumber;
			BenefitRequestDate = entity.BenefitRequestDate;
			BenefitAnswerNumber = entity.BenefitAnswerNumber;
			BenefitAnswerDate = entity.BenefitAnswerDate;
			BenefitAnswerComment = entity.BenefitAnswerComment;
			Snils = entity.Snils;
			BenefitRequestComment = entity.BenefitRequestComment;
			IsIncludeInInteragency = entity.IsIncludeInInteragency;
			IsApprovedInInteragency = entity.IsApprovedInInteragency;
			IsIncludeInInteragencySecondary = entity.IsIncludeInInteragencySecondary;
			IsApprovedInInteragencySecondary = entity.IsApprovedInInteragencySecondary;
			IsInvalid = entity.IsInvalid;
			Key = entity.Key;
			IntervalStart = entity.IntervalStart;
			IntervalEnd = entity.IntervalEnd;
			KeySame = entity.KeySame;
			IsLast = entity.IsLast;
			PaymentFileUrl = entity.PaymentFileUrl;
			PaymentFileTitle = entity.PaymentFileTitle;
			DocumentFileUrl = entity.DocumentFileUrl;
			DocumentFileTitle = entity.DocumentFileTitle;
			IsDeleted = entity.IsDeleted;
			ContactPhone = entity.ContactPhone;
			ContactLastName = entity.ContactLastName;
			ContactFirstName = entity.ContactFirstName;
			ContactMiddleName = entity.ContactMiddleName;
			ContactHaveMiddleName = entity.ContactHaveMiddleName;
			PlaceOfBirth = entity.PlaceOfBirth;
			NotNeedTicketForward = entity.NotNeedTicketForward;
			NotNeedTicketBackward = entity.NotNeedTicketBackward;
			Payed = entity.Payed;
			YearOfCompany = entity.YearOfCompany;
			NotComeInPlaceOfRest = entity.NotComeInPlaceOfRest;
			DocumentSeriaCertOfBirth = entity.DocumentSeriaCertOfBirth;
			DocumentNumberCertOfBirth = entity.DocumentNumberCertOfBirth;
			KeyOther = entity.KeyOther;
			ForeginName = entity.ForeginName;
			ForeginLastName = entity.ForeginLastName;
			AmountOfCompensation = entity.AmountOfCompensation;
			CostOfRide = entity.CostOfRide;
			CostOfTour = entity.CostOfTour;
			ContingentGuid = entity.ContingentGuid;
			EkisId = entity.EkisId;
			EkisNeedSend = entity.EkisNeedSend;
			Inn = entity.Inn;
			Infant = entity.Infant;
			IsCPMPK = entity.IsCPMPK;
			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			SchoolId = entity.SchoolId;
			if (deep > 0 && entity.School != null)
			{
				School = new School(entity.School, deep - 1);
			}

			DocumentTypeId = entity.DocumentTypeId;
			if (deep > 0 && entity.DocumentType != null)
			{
				DocumentType = new DocumentType(entity.DocumentType, deep - 1);
			}

			BenefitTypeId = entity.BenefitTypeId;
			if (deep > 0 && entity.BenefitType != null)
			{
				BenefitType = new BenefitType(entity.BenefitType, deep - 1);
			}

			AddressId = entity.AddressId;
			if (deep > 0 && entity.Address != null)
			{
				Address = new Address(entity.Address, deep - 1);
			}

			BenefitDocTypeId = entity.BenefitDocTypeId;
			if (deep > 0 && entity.BenefitDocType != null)
			{
				BenefitDocType = new DocumentType(entity.BenefitDocType, deep - 1);
			}

			ForeginTypeId = entity.ForeginTypeId;
			if (deep > 0 && entity.ForeginType != null)
			{
				ForeginType = new DocumentType(entity.ForeginType, deep - 1);
			}

			StatusByChildId = entity.StatusByChildId;
			if (deep > 0 && entity.StatusByChild != null)
			{
				StatusByChild = new StatusByChild(entity.StatusByChild, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			EntityId = entity.EntityId;
			if (deep > 0 && entity.Entity != null)
			{
				Entity = new Child(entity.Entity, deep - 1);
			}

			BenefitApproveTypeId = entity.BenefitApproveTypeId;
			if (deep > 0 && entity.BenefitApproveType != null)
			{
				BenefitApproveType = new BenefitApproveType(entity.BenefitApproveType, deep - 1);
			}

			TypeOfRestrictionId = entity.TypeOfRestrictionId;
			if (deep > 0 && entity.TypeOfRestriction != null)
			{
				TypeOfRestriction = new TypeOfRestriction(entity.TypeOfRestriction, deep - 1);
			}

			BenefitGroupInvalidId = entity.BenefitGroupInvalidId;
			if (deep > 0 && entity.BenefitGroupInvalid != null)
			{
				BenefitGroupInvalid = new BenefitGroupInvalid(entity.BenefitGroupInvalid, deep - 1);
			}

			TypeOfGroupCheckId = entity.TypeOfGroupCheckId;
			if (deep > 0 && entity.TypeOfGroupCheck != null)
			{
				TypeOfGroupCheck = new TypeOfGroupCheck(entity.TypeOfGroupCheck, deep - 1);
			}

			DocumentTypeCertOfBirthId = entity.DocumentTypeCertOfBirthId;
			if (deep > 0 && entity.DocumentTypeCertOfBirth != null)
			{
				DocumentTypeCertOfBirth = new DocumentType(entity.DocumentTypeCertOfBirth, deep - 1);
			}

			TypeViolationId = entity.TypeViolationId;
			if (deep > 0 && entity.TypeViolation != null)
			{
				TypeViolation = new TypeViolation(entity.TypeViolation, deep - 1);
			}

			TypeOfSubRestrictionId = entity.TypeOfSubRestrictionId;
			if (deep > 0 && entity.TypeOfSubRestriction != null)
			{
				TypeOfSubRestriction = new TypeOfSubRestriction(entity.TypeOfSubRestriction, deep - 1);
			}

			ChildListId = entity.ChildListId;
			if (deep > 0 && entity.ChildList != null)
			{
				ChildList = new ListOfChilds(entity.ChildList, deep - 1);
			}

			ExcludeReasonId = entity.ExcludeReasonId;
			if (deep > 0 && entity.ExcludeReason != null)
			{
				ExcludeReason = new ChildIncludeExcludeReason(entity.ExcludeReason, deep - 1);
			}

			IncludeReasonId = entity.IncludeReasonId;
			if (deep > 0 && entity.IncludeReason != null)
			{
				IncludeReason = new ChildIncludeExcludeReason(entity.IncludeReason, deep - 1);
			}

			TourVolumeId = entity.TourVolumeId;
			if (deep > 0 && entity.TourVolume != null)
			{
				TourVolume = new TourVolume(entity.TourVolume, deep - 1);
			}

			PartyId = entity.PartyId;
			if (deep > 0 && entity.Party != null)
			{
				Party = new Party(entity.Party, deep - 1);
			}

			BoutId = entity.BoutId;
			if (deep > 0 && entity.Bout != null)
			{
				Bout = new Bout(entity.Bout, deep - 1);
			}

			OfferInRequestId = entity.OfferInRequestId;
			if (deep > 0 && entity.OfferInRequest != null)
			{
				OfferInRequest = new OfferInRequest(entity.OfferInRequest, deep - 1);
			}

			ToursId = entity.ToursId;
			if (deep > 0 && entity.Tours != null)
			{
				Tours = new Tour(entity.Tours, deep - 1);
			}

			CountryId = entity.CountryId;
			if (deep > 0 && entity.Country != null)
			{
				Country = new Country(entity.Country, deep - 1);
			}

			RequestInformationVoucherId = entity.RequestInformationVoucherId;
			if (deep > 0 && entity.RequestInformationVoucher != null)
			{
				RequestInformationVoucher = new RequestInformationVoucher(entity.RequestInformationVoucher, deep - 1);
			}

			ChildUniqeId = entity.ChildUniqeId;
			if (deep > 0 && entity.ChildUniqe != null)
			{
				ChildUniqe = new ChildUniqe(entity.ChildUniqe, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Child CreateCopy()
		{
			var res = new Child(this);
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (School != null)
			{
				res.School = new School{Id=School.Id, Eid=School.Eid};
			}
			if (DocumentType != null)
			{
				res.DocumentType = new DocumentType{Id=DocumentType.Id, Eid=DocumentType.Eid};
			}
			if (BenefitType != null)
			{
				res.BenefitType = new BenefitType{Id=BenefitType.Id, Eid=BenefitType.Eid};
			}
			if (Address != null)
			{
				res.Address = new Address{Id=Address.Id, Eid=Address.Eid};
			}
			if (BenefitDocType != null)
			{
				res.BenefitDocType = new DocumentType{Id=BenefitDocType.Id, Eid=BenefitDocType.Eid};
			}
			if (ForeginType != null)
			{
				res.ForeginType = new DocumentType{Id=ForeginType.Id, Eid=ForeginType.Eid};
			}
			if (StatusByChild != null)
			{
				res.StatusByChild = new StatusByChild{Id=StatusByChild.Id, Eid=StatusByChild.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			if (Entity != null)
			{
				res.Entity = new Child{Id=Entity.Id, Eid=Entity.Eid};
			}
			if (BenefitApproveType != null)
			{
				res.BenefitApproveType = new BenefitApproveType{Id=BenefitApproveType.Id, Eid=BenefitApproveType.Eid};
			}
			if (TypeOfRestriction != null)
			{
				res.TypeOfRestriction = new TypeOfRestriction{Id=TypeOfRestriction.Id, Eid=TypeOfRestriction.Eid};
			}
			if (BenefitGroupInvalid != null)
			{
				res.BenefitGroupInvalid = new BenefitGroupInvalid{Id=BenefitGroupInvalid.Id, Eid=BenefitGroupInvalid.Eid};
			}
			if (TypeOfGroupCheck != null)
			{
				res.TypeOfGroupCheck = new TypeOfGroupCheck{Id=TypeOfGroupCheck.Id, Eid=TypeOfGroupCheck.Eid};
			}
			if (DocumentTypeCertOfBirth != null)
			{
				res.DocumentTypeCertOfBirth = new DocumentType{Id=DocumentTypeCertOfBirth.Id, Eid=DocumentTypeCertOfBirth.Eid};
			}
			if (TypeViolation != null)
			{
				res.TypeViolation = new TypeViolation{Id=TypeViolation.Id, Eid=TypeViolation.Eid};
			}
			if (TypeOfSubRestriction != null)
			{
				res.TypeOfSubRestriction = new TypeOfSubRestriction{Id=TypeOfSubRestriction.Id, Eid=TypeOfSubRestriction.Eid};
			}
			if (ChildList != null)
			{
				res.ChildList = new ListOfChilds{Id=ChildList.Id, Eid=ChildList.Eid};
			}
			if (ExcludeReason != null)
			{
				res.ExcludeReason = new ChildIncludeExcludeReason{Id=ExcludeReason.Id, Eid=ExcludeReason.Eid};
			}
			if (IncludeReason != null)
			{
				res.IncludeReason = new ChildIncludeExcludeReason{Id=IncludeReason.Id, Eid=IncludeReason.Eid};
			}
			if (TourVolume != null)
			{
				res.TourVolume = new TourVolume{Id=TourVolume.Id, Eid=TourVolume.Eid};
			}
			if (Party != null)
			{
				res.Party = new Party{Id=Party.Id, Eid=Party.Eid};
			}
			if (Bout != null)
			{
				res.Bout = new Bout{Id=Bout.Id, Eid=Bout.Eid};
			}
			if (OfferInRequest != null)
			{
				res.OfferInRequest = new OfferInRequest{Id=OfferInRequest.Id, Eid=OfferInRequest.Eid};
			}
			if (Tours != null)
			{
				res.Tours = new Tour{Id=Tours.Id, Eid=Tours.Eid};
			}
			if (Country != null)
			{
				res.Country = new Country{Id=Country.Id, Eid=Country.Eid};
			}
			if (RequestInformationVoucher != null)
			{
				res.RequestInformationVoucher = new RequestInformationVoucher{Id=RequestInformationVoucher.Id, Eid=RequestInformationVoucher.Eid};
			}
			if (ChildUniqe != null)
			{
				res.ChildUniqe = new ChildUniqe{Id=ChildUniqe.Id, Eid=ChildUniqe.Eid};
			}
			res.Relatives = Relatives?.Select(p=>new Relative {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.BaseRegistryInfo = BaseRegistryInfo?.Select(p=>new ExchangeBaseRegistry {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.LinkToPeoples = LinkToPeoples?.Select(p=>new LinkToPeople {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Calculations = Calculations?.Select(p=>new Calculation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.ERLPersons = ERLPersons?.Select(p=>new ERLPersonStatus {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Pupils = Pupils?.Select(p=>new Pupil {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Child entity)
		{
			IndexField = entity.IndexField;
			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			HaveMiddleName = entity.HaveMiddleName;
			DocumentSeria = entity.DocumentSeria;
			DocumentNumber = entity.DocumentNumber;
			DocumentDateOfIssue = entity.DocumentDateOfIssue;
			DocumentSubjectIssue = entity.DocumentSubjectIssue;
			DocumentCode = entity.DocumentCode;
			DateOfBirth = entity.DateOfBirth;
			BenefitDate = entity.BenefitDate;
			BenefitNeverEnd = entity.BenefitNeverEnd;
			BenefitEndDate = entity.BenefitEndDate;
			BenefitNumber = entity.BenefitNumber;
			BenefitSubjectIssue = entity.BenefitSubjectIssue;
			BenefitDateOfIssure = entity.BenefitDateOfIssure;
			ForeginSeria = entity.ForeginSeria;
			ForeginNumber = entity.ForeginNumber;
			ForeginSubjectIssue = entity.ForeginSubjectIssue;
			ForeginDateOfIssue = entity.ForeginDateOfIssue;
			ForeginDateEnd = entity.ForeginDateEnd;
			SchoolNotPresent = entity.SchoolNotPresent;
			RegisteredInMoscow = entity.RegisteredInMoscow;
			Male = entity.Male;
			BenefitApprove = entity.BenefitApprove;
			BenefitApproveRequestDate = entity.BenefitApproveRequestDate;
			BenefitApproveComment = entity.BenefitApproveComment;
			BenefitApproveHtml = entity.BenefitApproveHtml;
			BenefitRequestNumber = entity.BenefitRequestNumber;
			BenefitRequestDate = entity.BenefitRequestDate;
			BenefitAnswerNumber = entity.BenefitAnswerNumber;
			BenefitAnswerDate = entity.BenefitAnswerDate;
			BenefitAnswerComment = entity.BenefitAnswerComment;
			Snils = entity.Snils;
			BenefitRequestComment = entity.BenefitRequestComment;
			IsIncludeInInteragency = entity.IsIncludeInInteragency;
			IsApprovedInInteragency = entity.IsApprovedInInteragency;
			IsIncludeInInteragencySecondary = entity.IsIncludeInInteragencySecondary;
			IsApprovedInInteragencySecondary = entity.IsApprovedInInteragencySecondary;
			IsInvalid = entity.IsInvalid;
			Key = entity.Key;
			IntervalStart = entity.IntervalStart;
			IntervalEnd = entity.IntervalEnd;
			KeySame = entity.KeySame;
			IsLast = entity.IsLast;
			PaymentFileUrl = entity.PaymentFileUrl;
			PaymentFileTitle = entity.PaymentFileTitle;
			DocumentFileUrl = entity.DocumentFileUrl;
			DocumentFileTitle = entity.DocumentFileTitle;
			IsDeleted = entity.IsDeleted;
			ContactPhone = entity.ContactPhone;
			ContactLastName = entity.ContactLastName;
			ContactFirstName = entity.ContactFirstName;
			ContactMiddleName = entity.ContactMiddleName;
			ContactHaveMiddleName = entity.ContactHaveMiddleName;
			PlaceOfBirth = entity.PlaceOfBirth;
			NotNeedTicketForward = entity.NotNeedTicketForward;
			NotNeedTicketBackward = entity.NotNeedTicketBackward;
			Payed = entity.Payed;
			YearOfCompany = entity.YearOfCompany;
			NotComeInPlaceOfRest = entity.NotComeInPlaceOfRest;
			DocumentSeriaCertOfBirth = entity.DocumentSeriaCertOfBirth;
			DocumentNumberCertOfBirth = entity.DocumentNumberCertOfBirth;
			KeyOther = entity.KeyOther;
			ForeginName = entity.ForeginName;
			ForeginLastName = entity.ForeginLastName;
			AmountOfCompensation = entity.AmountOfCompensation;
			CostOfRide = entity.CostOfRide;
			CostOfTour = entity.CostOfTour;
			ContingentGuid = entity.ContingentGuid;
			EkisId = entity.EkisId;
			EkisNeedSend = entity.EkisNeedSend;
			Inn = entity.Inn;
			Infant = entity.Infant;
			IsCPMPK = entity.IsCPMPK;
			RequestId = entity.RequestId;
			SchoolId = entity.SchoolId;
			DocumentTypeId = entity.DocumentTypeId;
			BenefitTypeId = entity.BenefitTypeId;
			AddressId = entity.AddressId;
			BenefitDocTypeId = entity.BenefitDocTypeId;
			ForeginTypeId = entity.ForeginTypeId;
			StatusByChildId = entity.StatusByChildId;
			ApplicantId = entity.ApplicantId;
			EntityId = entity.EntityId;
			BenefitApproveTypeId = entity.BenefitApproveTypeId;
			TypeOfRestrictionId = entity.TypeOfRestrictionId;
			BenefitGroupInvalidId = entity.BenefitGroupInvalidId;
			TypeOfGroupCheckId = entity.TypeOfGroupCheckId;
			DocumentTypeCertOfBirthId = entity.DocumentTypeCertOfBirthId;
			TypeViolationId = entity.TypeViolationId;
			TypeOfSubRestrictionId = entity.TypeOfSubRestrictionId;
			ChildListId = entity.ChildListId;
			ExcludeReasonId = entity.ExcludeReasonId;
			IncludeReasonId = entity.IncludeReasonId;
			TourVolumeId = entity.TourVolumeId;
			PartyId = entity.PartyId;
			BoutId = entity.BoutId;
			OfferInRequestId = entity.OfferInRequestId;
			ToursId = entity.ToursId;
			CountryId = entity.CountryId;
			RequestInformationVoucherId = entity.RequestInformationVoucherId;
			ChildUniqeId = entity.ChildUniqeId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ChildIncludeExcludeReason : ILastUpdateTick
	{
		public ChildIncludeExcludeReason()
		{
		}

		public ChildIncludeExcludeReason(ChildIncludeExcludeReason entity) : this(entity, null)
		{
		}

		public ChildIncludeExcludeReason(ChildIncludeExcludeReason entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Reason = entity.Reason;
			OperartionDate = entity.OperartionDate;
			SignInfoId = entity.SignInfoId;
			if (deep > 0 && entity.SignInfo != null)
			{
				SignInfo = new SignInfo(entity.SignInfo, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ChildIncludeExcludeReason CreateCopy()
		{
			var res = new ChildIncludeExcludeReason(this);
			if (SignInfo != null)
			{
				res.SignInfo = new SignInfo{Id=SignInfo.Id, Eid=SignInfo.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			return res;
		}

		public void CopyEntity(ChildIncludeExcludeReason entity)
		{
			Id = entity.Id;
			Reason = entity.Reason;
			OperartionDate = entity.OperartionDate;
			SignInfoId = entity.SignInfoId;
			AccountId = entity.AccountId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ChildUniqe : ILastUpdateTick
	{
		public ChildUniqe()
		{
		}

		public ChildUniqe(ChildUniqe entity) : this(entity, null)
		{
		}

		public ChildUniqe(ChildUniqe entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Snils = entity.Snils;
			LastInfoId = entity.LastInfoId;
			if (deep > 0 && entity.LastInfo != null)
			{
				LastInfo = new Child(entity.LastInfo, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ChildUniqe CreateCopy()
		{
			var res = new ChildUniqe(this);
			if (LastInfo != null)
			{
				res.LastInfo = new Child{Id=LastInfo.Id, Eid=LastInfo.Eid};
			}
			res.Children = Children?.Select(p=>new Child {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Relatives = Relatives?.Select(p=>new RelativeUniqe {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(ChildUniqe entity)
		{
			Id = entity.Id;
			Snils = entity.Snils;
			LastInfoId = entity.LastInfoId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class City : ILastUpdateTick
	{
		public City()
		{
		}

		public City(City entity) : this(entity, null)
		{
		}

		public City(City entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			HaveAero = entity.HaveAero;
			HaveRailway = entity.HaveRailway;
			IsActive = entity.IsActive;
			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			CountryId = entity.CountryId;
			if (deep > 0 && entity.Country != null)
			{
				Country = new Country(entity.Country, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public City CreateCopy()
		{
			var res = new City(this);
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (Country != null)
			{
				res.Country = new Country{Id=Country.Id, Eid=Country.Eid};
			}
			return res;
		}

		public void CopyEntity(City entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			HaveAero = entity.HaveAero;
			HaveRailway = entity.HaveRailway;
			IsActive = entity.IsActive;
			StateId = entity.StateId;
			HistoryLinkId = entity.HistoryLinkId;
			CountryId = entity.CountryId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ClothingSize : ILastUpdateTick
	{
		public ClothingSize()
		{
		}

		public ClothingSize(ClothingSize entity) : this(entity, null)
		{
		}

		public ClothingSize(ClothingSize entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ClothingSize CreateCopy()
		{
			var res = new ClothingSize(this);
			return res;
		}

		public void CopyEntity(ClothingSize entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Contract : ILastUpdateTick
	{
		public Contract()
		{
		}

		public Contract(Contract entity) : this(entity, null)
		{
		}

		public Contract(Contract entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			SignNumber = entity.SignNumber;
			SignDate = entity.SignDate;
			Summa = entity.Summa;
			StartDate = entity.StartDate;
			EndDate = entity.EndDate;
			ContractDescription = entity.ContractDescription;
			PlanCount = entity.PlanCount;
			OnRest = entity.OnRest;
			OnTransport = entity.OnTransport;
			OnService = entity.OnService;
			Name = entity.Name;
			Commission = entity.Commission;
			Comment = entity.Comment;
			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			SupplierId = entity.SupplierId;
			if (deep > 0 && entity.Supplier != null)
			{
				Supplier = new Organization(entity.Supplier, deep - 1);
			}

			OrganizationBankId = entity.OrganizationBankId;
			if (deep > 0 && entity.OrganizationBank != null)
			{
				OrganizationBank = new OrganizationBank(entity.OrganizationBank, deep - 1);
			}

			CuratorId = entity.CuratorId;
			if (deep > 0 && entity.Curator != null)
			{
				Curator = new Account(entity.Curator, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Contract CreateCopy()
		{
			var res = new Contract(this);
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			if (Supplier != null)
			{
				res.Supplier = new Organization{Id=Supplier.Id, Eid=Supplier.Eid};
			}
			if (OrganizationBank != null)
			{
				res.OrganizationBank = new OrganizationBank{Id=OrganizationBank.Id, Eid=OrganizationBank.Eid};
			}
			if (Curator != null)
			{
				res.Curator = new Account{Id=Curator.Id, Eid=Curator.Eid};
			}
			res.Tour = Tour?.Select(p=>new Tour {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.DirectoryFlights = DirectoryFlights?.Select(p=>new DirectoryFlights {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Services = Services?.Select(p=>new AddonServices {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.AddonAgreements = AddonAgreements?.Select(p=>new ContractAddonAgreement {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Contract entity)
		{
			Id = entity.Id;
			SignNumber = entity.SignNumber;
			SignDate = entity.SignDate;
			Summa = entity.Summa;
			StartDate = entity.StartDate;
			EndDate = entity.EndDate;
			ContractDescription = entity.ContractDescription;
			PlanCount = entity.PlanCount;
			OnRest = entity.OnRest;
			OnTransport = entity.OnTransport;
			OnService = entity.OnService;
			Name = entity.Name;
			Commission = entity.Commission;
			Comment = entity.Comment;
			YearOfRestId = entity.YearOfRestId;
			StateId = entity.StateId;
			HistoryLinkId = entity.HistoryLinkId;
			OrganizationId = entity.OrganizationId;
			SupplierId = entity.SupplierId;
			OrganizationBankId = entity.OrganizationBankId;
			CuratorId = entity.CuratorId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ContractAddonAgreement : ILastUpdateTick
	{
		public ContractAddonAgreement()
		{
		}

		public ContractAddonAgreement(ContractAddonAgreement entity) : this(entity, null)
		{
		}

		public ContractAddonAgreement(ContractAddonAgreement entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			SignNumber = entity.SignNumber;
			SignDate = entity.SignDate;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Description = entity.Description;
			ContractId = entity.ContractId;
			if (deep > 0 && entity.Contract != null)
			{
				Contract = new Contract(entity.Contract, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ContractAddonAgreement CreateCopy()
		{
			var res = new ContractAddonAgreement(this);
			if (Contract != null)
			{
				res.Contract = new Contract{Id=Contract.Id, Eid=Contract.Eid};
			}
			return res;
		}

		public void CopyEntity(ContractAddonAgreement entity)
		{
			Id = entity.Id;
			SignNumber = entity.SignNumber;
			SignDate = entity.SignDate;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Description = entity.Description;
			ContractId = entity.ContractId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CouncelorComment : ILastUpdateTick
	{
		public CouncelorComment()
		{
		}

		public CouncelorComment(CouncelorComment entity) : this(entity, null)
		{
		}

		public CouncelorComment(CouncelorComment entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Author = entity.Author;
			Comment = entity.Comment;
			DateCreate = entity.DateCreate;
			SystemInfo = entity.SystemInfo;
			VisibleOnSite = entity.VisibleOnSite;
			SiteUserUid = entity.SiteUserUid;
			Rank = entity.Rank;
			Answer = entity.Answer;
			AnswerDate = entity.AnswerDate;
			Checked = entity.Checked;
			CounselorsId = entity.CounselorsId;
			if (deep > 0 && entity.Counselors != null)
			{
				Counselors = new Counselors(entity.Counselors, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			ChildId = entity.ChildId;
			if (deep > 0 && entity.Child != null)
			{
				Child = new Child(entity.Child, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			AnswerAccountId = entity.AnswerAccountId;
			if (deep > 0 && entity.AnswerAccount != null)
			{
				AnswerAccount = new Account(entity.AnswerAccount, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CouncelorComment CreateCopy()
		{
			var res = new CouncelorComment(this);
			if (Counselors != null)
			{
				res.Counselors = new Counselors{Id=Counselors.Id, Eid=Counselors.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			if (Child != null)
			{
				res.Child = new Child{Id=Child.Id, Eid=Child.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			if (AnswerAccount != null)
			{
				res.AnswerAccount = new Account{Id=AnswerAccount.Id, Eid=AnswerAccount.Eid};
			}
			return res;
		}

		public void CopyEntity(CouncelorComment entity)
		{
			Id = entity.Id;
			Author = entity.Author;
			Comment = entity.Comment;
			DateCreate = entity.DateCreate;
			SystemInfo = entity.SystemInfo;
			VisibleOnSite = entity.VisibleOnSite;
			SiteUserUid = entity.SiteUserUid;
			Rank = entity.Rank;
			Answer = entity.Answer;
			AnswerDate = entity.AnswerDate;
			Checked = entity.Checked;
			CounselorsId = entity.CounselorsId;
			ApplicantId = entity.ApplicantId;
			ChildId = entity.ChildId;
			AccountId = entity.AccountId;
			AnswerAccountId = entity.AnswerAccountId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorCource : ILastUpdateTick
	{
		public CounselorCource()
		{
		}

		public CounselorCource(CounselorCource entity) : this(entity, null)
		{
		}

		public CounselorCource(CounselorCource entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Year = entity.Year;
			CounselorsId = entity.CounselorsId;
			if (deep > 0 && entity.Counselors != null)
			{
				Counselors = new Counselors(entity.Counselors, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorCource CreateCopy()
		{
			var res = new CounselorCource(this);
			if (Counselors != null)
			{
				res.Counselors = new Counselors{Id=Counselors.Id, Eid=Counselors.Eid};
			}
			return res;
		}

		public void CopyEntity(CounselorCource entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Year = entity.Year;
			CounselorsId = entity.CounselorsId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorFile : ILastUpdateTick
	{
		public CounselorFile()
		{
		}

		public CounselorFile(CounselorFile entity) : this(entity, null)
		{
		}

		public CounselorFile(CounselorFile entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FileName = entity.FileName;
			FileUrl = entity.FileUrl;
			CounselorsId = entity.CounselorsId;
			if (deep > 0 && entity.Counselors != null)
			{
				Counselors = new Counselors(entity.Counselors, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorFile CreateCopy()
		{
			var res = new CounselorFile(this);
			if (Counselors != null)
			{
				res.Counselors = new Counselors{Id=Counselors.Id, Eid=Counselors.Eid};
			}
			return res;
		}

		public void CopyEntity(CounselorFile entity)
		{
			Id = entity.Id;
			FileName = entity.FileName;
			FileUrl = entity.FileUrl;
			CounselorsId = entity.CounselorsId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorHighSchool : ILastUpdateTick
	{
		public CounselorHighSchool()
		{
		}

		public CounselorHighSchool(CounselorHighSchool entity) : this(entity, null)
		{
		}

		public CounselorHighSchool(CounselorHighSchool entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			EducationInstitutionName = entity.EducationInstitutionName;
			Department = entity.Department;
			Speciality = entity.Speciality;
			Course = entity.Course;
			GraduationYear = entity.GraduationYear;
			CounselorsId = entity.CounselorsId;
			if (deep > 0 && entity.Counselors != null)
			{
				Counselors = new Counselors(entity.Counselors, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorHighSchool CreateCopy()
		{
			var res = new CounselorHighSchool(this);
			if (Counselors != null)
			{
				res.Counselors = new Counselors{Id=Counselors.Id, Eid=Counselors.Eid};
			}
			return res;
		}

		public void CopyEntity(CounselorHighSchool entity)
		{
			Id = entity.Id;
			EducationInstitutionName = entity.EducationInstitutionName;
			Department = entity.Department;
			Speciality = entity.Speciality;
			Course = entity.Course;
			GraduationYear = entity.GraduationYear;
			CounselorsId = entity.CounselorsId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorPractice : ILastUpdateTick
	{
		public CounselorPractice()
		{
		}

		public CounselorPractice(CounselorPractice entity) : this(entity, null)
		{
		}

		public CounselorPractice(CounselorPractice entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Camp = entity.Camp;
			Year = entity.Year;
			Tour = entity.Tour;
			Party = entity.Party;
			CounselorsId = entity.CounselorsId;
			if (deep > 0 && entity.Counselors != null)
			{
				Counselors = new Counselors(entity.Counselors, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorPractice CreateCopy()
		{
			var res = new CounselorPractice(this);
			if (Counselors != null)
			{
				res.Counselors = new Counselors{Id=Counselors.Id, Eid=Counselors.Eid};
			}
			return res;
		}

		public void CopyEntity(CounselorPractice entity)
		{
			Id = entity.Id;
			Camp = entity.Camp;
			Year = entity.Year;
			Tour = entity.Tour;
			Party = entity.Party;
			CounselorsId = entity.CounselorsId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Counselors : ILastUpdateTick
	{
		public Counselors()
		{
		}

		public Counselors(Counselors entity) : this(entity, null)
		{
		}

		public Counselors(Counselors entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			HaveMiddleName = entity.HaveMiddleName;
			DocumentSeria = entity.DocumentSeria;
			DocumentNumber = entity.DocumentNumber;
			DocumentDateOfIssue = entity.DocumentDateOfIssue;
			DocumentSubjectIssue = entity.DocumentSubjectIssue;
			DateOfBirth = entity.DateOfBirth;
			Male = entity.Male;
			DateCreate = entity.DateCreate;
			DateUpdate = entity.DateUpdate;
			PlaceOfBirth = entity.PlaceOfBirth;
			Phone = entity.Phone;
			Email = entity.Email;
			Rating = entity.Rating;
			RegistrationAddress = entity.RegistrationAddress;
			Snils = entity.Snils;
			Inn = entity.Inn;
			ForeignPassport = entity.ForeignPassport;
			MilitaryReserveCategory = entity.MilitaryReserveCategory;
			MilitaryRank = entity.MilitaryRank;
			MilitartStaff = entity.MilitartStaff;
			VusCodeName = entity.VusCodeName;
			MIlitaryCategory = entity.MIlitaryCategory;
			GoldenSail = entity.GoldenSail;
			UnaccountedForWaste = entity.UnaccountedForWaste;
			LinkFacebook = entity.LinkFacebook;
			LinkVk = entity.LinkVk;
			LinkOk = entity.LinkOk;
			LinkLinkedIn = entity.LinkLinkedIn;
			ExternalUid = entity.ExternalUid;
			FactAddress = entity.FactAddress;
			Password = entity.Password;
			Salt = entity.Salt;
			StopListReasonText = entity.StopListReasonText;
			RepresentativesOrganizations = entity.RepresentativesOrganizations;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			DocumentTypeId = entity.DocumentTypeId;
			if (deep > 0 && entity.DocumentType != null)
			{
				DocumentType = new DocumentType(entity.DocumentType, deep - 1);
			}

			TieColorId = entity.TieColorId;
			if (deep > 0 && entity.TieColor != null)
			{
				TieColor = new TieColor(entity.TieColor, deep - 1);
			}

			StateDistrictId = entity.StateDistrictId;
			if (deep > 0 && entity.StateDistrict != null)
			{
				StateDistrict = new StateDistrict(entity.StateDistrict, deep - 1);
			}

			MatrialStatusId = entity.MatrialStatusId;
			if (deep > 0 && entity.MatrialStatus != null)
			{
				MatrialStatus = new MatrialStatus(entity.MatrialStatus, deep - 1);
			}

			MilitaryDutyId = entity.MilitaryDutyId;
			if (deep > 0 && entity.MilitaryDuty != null)
			{
				MilitaryDuty = new MilitaryDuty(entity.MilitaryDuty, deep - 1);
			}

			TypeOfEducationId = entity.TypeOfEducationId;
			if (deep > 0 && entity.TypeOfEducation != null)
			{
				TypeOfEducation = new TypeOfEducation(entity.TypeOfEducation, deep - 1);
			}

			LinkedAccountId = entity.LinkedAccountId;
			if (deep > 0 && entity.LinkedAccount != null)
			{
				LinkedAccount = new Account(entity.LinkedAccount, deep - 1);
			}

			ClothingSizeId = entity.ClothingSizeId;
			if (deep > 0 && entity.ClothingSize != null)
			{
				ClothingSize = new ClothingSize(entity.ClothingSize, deep - 1);
			}

			PedPartyId = entity.PedPartyId;
			if (deep > 0 && entity.PedParty != null)
			{
				PedParty = new PedParty(entity.PedParty, deep - 1);
			}

			StopListReasonId = entity.StopListReasonId;
			if (deep > 0 && entity.StopListReason != null)
			{
				StopListReason = new CounselorsStopListReason(entity.StopListReason, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Counselors CreateCopy()
		{
			var res = new Counselors(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			if (DocumentType != null)
			{
				res.DocumentType = new DocumentType{Id=DocumentType.Id, Eid=DocumentType.Eid};
			}
			if (TieColor != null)
			{
				res.TieColor = new TieColor{Id=TieColor.Id, Eid=TieColor.Eid};
			}
			if (StateDistrict != null)
			{
				res.StateDistrict = new StateDistrict{Id=StateDistrict.Id, Eid=StateDistrict.Eid};
			}
			if (MatrialStatus != null)
			{
				res.MatrialStatus = new MatrialStatus{Id=MatrialStatus.Id, Eid=MatrialStatus.Eid};
			}
			if (MilitaryDuty != null)
			{
				res.MilitaryDuty = new MilitaryDuty{Id=MilitaryDuty.Id, Eid=MilitaryDuty.Eid};
			}
			if (TypeOfEducation != null)
			{
				res.TypeOfEducation = new TypeOfEducation{Id=TypeOfEducation.Id, Eid=TypeOfEducation.Eid};
			}
			if (LinkedAccount != null)
			{
				res.LinkedAccount = new Account{Id=LinkedAccount.Id, Eid=LinkedAccount.Eid};
			}
			if (ClothingSize != null)
			{
				res.ClothingSize = new ClothingSize{Id=ClothingSize.Id, Eid=ClothingSize.Eid};
			}
			if (PedParty != null)
			{
				res.PedParty = new PedParty{Id=PedParty.Id, Eid=PedParty.Eid};
			}
			if (StopListReason != null)
			{
				res.StopListReason = new CounselorsStopListReason{Id=StopListReason.Id, Eid=StopListReason.Eid};
			}
			res.Partys = Partys?.Select(p=>new Party {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Bouts = Bouts?.Select(p=>new Bout {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.SwingBoats = SwingBoats?.Select(p=>new Bout {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Files = Files?.Select(p=>new CounselorFile {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.HighSchoolGraduations = HighSchoolGraduations?.Select(p=>new CounselorHighSchool {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Skill = Skill?.Select(p=>new CounselorSkill {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Comments = Comments?.Select(p=>new CouncelorComment {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.ForeginPassports = ForeginPassports?.Select(p=>new ForeginPassport {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Tasks = Tasks?.Select(p=>new ResponsibilityForTask {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Results = Results?.Select(p=>new TrainingCounselorsResult {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.CounselorPractices = CounselorPractices?.Select(p=>new CounselorPractice {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.CounselorCources = CounselorCources?.Select(p=>new CounselorCource {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Counselors entity)
		{
			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			HaveMiddleName = entity.HaveMiddleName;
			DocumentSeria = entity.DocumentSeria;
			DocumentNumber = entity.DocumentNumber;
			DocumentDateOfIssue = entity.DocumentDateOfIssue;
			DocumentSubjectIssue = entity.DocumentSubjectIssue;
			DateOfBirth = entity.DateOfBirth;
			Male = entity.Male;
			DateCreate = entity.DateCreate;
			DateUpdate = entity.DateUpdate;
			PlaceOfBirth = entity.PlaceOfBirth;
			Phone = entity.Phone;
			Email = entity.Email;
			Rating = entity.Rating;
			RegistrationAddress = entity.RegistrationAddress;
			Snils = entity.Snils;
			Inn = entity.Inn;
			ForeignPassport = entity.ForeignPassport;
			MilitaryReserveCategory = entity.MilitaryReserveCategory;
			MilitaryRank = entity.MilitaryRank;
			MilitartStaff = entity.MilitartStaff;
			VusCodeName = entity.VusCodeName;
			MIlitaryCategory = entity.MIlitaryCategory;
			GoldenSail = entity.GoldenSail;
			UnaccountedForWaste = entity.UnaccountedForWaste;
			LinkFacebook = entity.LinkFacebook;
			LinkVk = entity.LinkVk;
			LinkOk = entity.LinkOk;
			LinkLinkedIn = entity.LinkLinkedIn;
			ExternalUid = entity.ExternalUid;
			FactAddress = entity.FactAddress;
			Password = entity.Password;
			Salt = entity.Salt;
			StopListReasonText = entity.StopListReasonText;
			RepresentativesOrganizations = entity.RepresentativesOrganizations;
			HistoryLinkId = entity.HistoryLinkId;
			StateId = entity.StateId;
			AccountId = entity.AccountId;
			DocumentTypeId = entity.DocumentTypeId;
			TieColorId = entity.TieColorId;
			StateDistrictId = entity.StateDistrictId;
			MatrialStatusId = entity.MatrialStatusId;
			MilitaryDutyId = entity.MilitaryDutyId;
			TypeOfEducationId = entity.TypeOfEducationId;
			LinkedAccountId = entity.LinkedAccountId;
			ClothingSizeId = entity.ClothingSizeId;
			PedPartyId = entity.PedPartyId;
			StopListReasonId = entity.StopListReasonId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorSkill : ILastUpdateTick
	{
		public CounselorSkill()
		{
		}

		public CounselorSkill(CounselorSkill entity) : this(entity, null)
		{
		}

		public CounselorSkill(CounselorSkill entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			OtherText = entity.OtherText;
			CounselorsId = entity.CounselorsId;
			if (deep > 0 && entity.Counselors != null)
			{
				Counselors = new Counselors(entity.Counselors, deep - 1);
			}

			SkillId = entity.SkillId;
			if (deep > 0 && entity.Skill != null)
			{
				Skill = new Skill(entity.Skill, deep - 1);
			}

			SkillVocabularyId = entity.SkillVocabularyId;
			if (deep > 0 && entity.SkillVocabulary != null)
			{
				SkillVocabulary = new SkillVocabulary(entity.SkillVocabulary, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorSkill CreateCopy()
		{
			var res = new CounselorSkill(this);
			if (Counselors != null)
			{
				res.Counselors = new Counselors{Id=Counselors.Id, Eid=Counselors.Eid};
			}
			if (Skill != null)
			{
				res.Skill = new Skill{Id=Skill.Id, Eid=Skill.Eid};
			}
			if (SkillVocabulary != null)
			{
				res.SkillVocabulary = new SkillVocabulary{Id=SkillVocabulary.Id, Eid=SkillVocabulary.Eid};
			}
			return res;
		}

		public void CopyEntity(CounselorSkill entity)
		{
			Id = entity.Id;
			OtherText = entity.OtherText;
			CounselorsId = entity.CounselorsId;
			SkillId = entity.SkillId;
			SkillVocabularyId = entity.SkillVocabularyId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorsStopListReason : ILastUpdateTick
	{
		public CounselorsStopListReason()
		{
		}

		public CounselorsStopListReason(CounselorsStopListReason entity) : this(entity, null)
		{
		}

		public CounselorsStopListReason(CounselorsStopListReason entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorsStopListReason CreateCopy()
		{
			var res = new CounselorsStopListReason(this);
			return res;
		}

		public void CopyEntity(CounselorsStopListReason entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorTask : ILastUpdateTick
	{
		public CounselorTask()
		{
		}

		public CounselorTask(CounselorTask entity) : this(entity, null)
		{
		}

		public CounselorTask(CounselorTask entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateCreate = entity.DateCreate;
			DatePlanFinish = entity.DatePlanFinish;
			DateFactFinish = entity.DateFactFinish;
			Subject = entity.Subject;
			Body = entity.Body;
			Report = entity.Report;
			BaseTask = entity.BaseTask;
			NotNecessary = entity.NotNecessary;
			DateUpdate = entity.DateUpdate;
			ParentId = entity.ParentId;
			if (deep > 0 && entity.Parent != null)
			{
				Parent = new CounselorTask(entity.Parent, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			AuthorId = entity.AuthorId;
			if (deep > 0 && entity.Author != null)
			{
				Author = new ResponsibilityForTask(entity.Author, deep - 1);
			}

			ExecutorId = entity.ExecutorId;
			if (deep > 0 && entity.Executor != null)
			{
				Executor = new ResponsibilityForTask(entity.Executor, deep - 1);
			}

			BoutId = entity.BoutId;
			if (deep > 0 && entity.Bout != null)
			{
				Bout = new Bout(entity.Bout, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorTask CreateCopy()
		{
			var res = new CounselorTask(this);
			if (Parent != null)
			{
				res.Parent = new CounselorTask{Id=Parent.Id, Eid=Parent.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (Author != null)
			{
				res.Author = new ResponsibilityForTask{Id=Author.Id, Eid=Author.Eid};
			}
			if (Executor != null)
			{
				res.Executor = new ResponsibilityForTask{Id=Executor.Id, Eid=Executor.Eid};
			}
			if (Bout != null)
			{
				res.Bout = new Bout{Id=Bout.Id, Eid=Bout.Eid};
			}
			res.ReportFiles = ReportFiles?.Select(p=>new CounselorTaskReportFile {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Files = Files?.Select(p=>new CounselorTaskFile {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Cotasks = Cotasks?.Select(p=>new CounselorTask {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Comments = Comments?.Select(p=>new CounselorTaskCommentary {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(CounselorTask entity)
		{
			Id = entity.Id;
			DateCreate = entity.DateCreate;
			DatePlanFinish = entity.DatePlanFinish;
			DateFactFinish = entity.DateFactFinish;
			Subject = entity.Subject;
			Body = entity.Body;
			Report = entity.Report;
			BaseTask = entity.BaseTask;
			NotNecessary = entity.NotNecessary;
			DateUpdate = entity.DateUpdate;
			ParentId = entity.ParentId;
			StateId = entity.StateId;
			HistoryLinkId = entity.HistoryLinkId;
			AuthorId = entity.AuthorId;
			ExecutorId = entity.ExecutorId;
			BoutId = entity.BoutId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorTaskCommentary : ILastUpdateTick
	{
		public CounselorTaskCommentary()
		{
		}

		public CounselorTaskCommentary(CounselorTaskCommentary entity) : this(entity, null)
		{
		}

		public CounselorTaskCommentary(CounselorTaskCommentary entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateCreate = entity.DateCreate;
			Commentary = entity.Commentary;
			Author = entity.Author;
			CounselorTaskId = entity.CounselorTaskId;
			if (deep > 0 && entity.CounselorTask != null)
			{
				CounselorTask = new CounselorTask(entity.CounselorTask, deep - 1);
			}

			ResponsibilityForTaskId = entity.ResponsibilityForTaskId;
			if (deep > 0 && entity.ResponsibilityForTask != null)
			{
				ResponsibilityForTask = new ResponsibilityForTask(entity.ResponsibilityForTask, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorTaskCommentary CreateCopy()
		{
			var res = new CounselorTaskCommentary(this);
			if (CounselorTask != null)
			{
				res.CounselorTask = new CounselorTask{Id=CounselorTask.Id, Eid=CounselorTask.Eid};
			}
			if (ResponsibilityForTask != null)
			{
				res.ResponsibilityForTask = new ResponsibilityForTask{Id=ResponsibilityForTask.Id, Eid=ResponsibilityForTask.Eid};
			}
			return res;
		}

		public void CopyEntity(CounselorTaskCommentary entity)
		{
			Id = entity.Id;
			DateCreate = entity.DateCreate;
			Commentary = entity.Commentary;
			Author = entity.Author;
			CounselorTaskId = entity.CounselorTaskId;
			ResponsibilityForTaskId = entity.ResponsibilityForTaskId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorTaskExecutorType : ILastUpdateTick
	{
		public CounselorTaskExecutorType()
		{
		}

		public CounselorTaskExecutorType(CounselorTaskExecutorType entity) : this(entity, null)
		{
		}

		public CounselorTaskExecutorType(CounselorTaskExecutorType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorTaskExecutorType CreateCopy()
		{
			var res = new CounselorTaskExecutorType(this);
			return res;
		}

		public void CopyEntity(CounselorTaskExecutorType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorTaskFile : ILastUpdateTick
	{
		public CounselorTaskFile()
		{
		}

		public CounselorTaskFile(CounselorTaskFile entity) : this(entity, null)
		{
		}

		public CounselorTaskFile(CounselorTaskFile entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FileName = entity.FileName;
			FileTitle = entity.FileTitle;
			DataCreate = entity.DataCreate;
			CounselorTaskId = entity.CounselorTaskId;
			if (deep > 0 && entity.CounselorTask != null)
			{
				CounselorTask = new CounselorTask(entity.CounselorTask, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorTaskFile CreateCopy()
		{
			var res = new CounselorTaskFile(this);
			if (CounselorTask != null)
			{
				res.CounselorTask = new CounselorTask{Id=CounselorTask.Id, Eid=CounselorTask.Eid};
			}
			return res;
		}

		public void CopyEntity(CounselorTaskFile entity)
		{
			Id = entity.Id;
			FileName = entity.FileName;
			FileTitle = entity.FileTitle;
			DataCreate = entity.DataCreate;
			CounselorTaskId = entity.CounselorTaskId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorTaskReportFile : ILastUpdateTick
	{
		public CounselorTaskReportFile()
		{
		}

		public CounselorTaskReportFile(CounselorTaskReportFile entity) : this(entity, null)
		{
		}

		public CounselorTaskReportFile(CounselorTaskReportFile entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FileName = entity.FileName;
			FileTitle = entity.FileTitle;
			DataCreate = entity.DataCreate;
			CounselorTaskId = entity.CounselorTaskId;
			if (deep > 0 && entity.CounselorTask != null)
			{
				CounselorTask = new CounselorTask(entity.CounselorTask, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorTaskReportFile CreateCopy()
		{
			var res = new CounselorTaskReportFile(this);
			if (CounselorTask != null)
			{
				res.CounselorTask = new CounselorTask{Id=CounselorTask.Id, Eid=CounselorTask.Eid};
			}
			return res;
		}

		public void CopyEntity(CounselorTaskReportFile entity)
		{
			Id = entity.Id;
			FileName = entity.FileName;
			FileTitle = entity.FileTitle;
			DataCreate = entity.DataCreate;
			CounselorTaskId = entity.CounselorTaskId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorTest : ILastUpdateTick
	{
		public CounselorTest()
		{
		}

		public CounselorTest(CounselorTest entity) : this(entity, null)
		{
		}

		public CounselorTest(CounselorTest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Description = entity.Description;
			DateCreate = entity.DateCreate;
			CountErrorInTest = entity.CountErrorInTest;
			IsFinalTest = entity.IsFinalTest;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorTest CreateCopy()
		{
			var res = new CounselorTest(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			res.Questions = Questions?.Select(p=>new CounselorTestQuestion {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.CounselorTestSubjects = CounselorTestSubjects?.Select(p=>new CounselorTestSubject {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(CounselorTest entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Description = entity.Description;
			DateCreate = entity.DateCreate;
			CountErrorInTest = entity.CountErrorInTest;
			IsFinalTest = entity.IsFinalTest;
			HistoryLinkId = entity.HistoryLinkId;
			StateId = entity.StateId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorTestAnswer : ILastUpdateTick
	{
		public CounselorTestAnswer()
		{
		}

		public CounselorTestAnswer(CounselorTestAnswer entity) : this(entity, null)
		{
		}

		public CounselorTestAnswer(CounselorTestAnswer entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Answer = entity.Answer;
			Raiting = entity.Raiting;
			CounselorTestId = entity.CounselorTestId;
			if (deep > 0 && entity.CounselorTest != null)
			{
				CounselorTest = new CounselorTest(entity.CounselorTest, deep - 1);
			}

			QuestionId = entity.QuestionId;
			if (deep > 0 && entity.Question != null)
			{
				Question = new CounselorTestQuestion(entity.Question, deep - 1);
			}

			VariantId = entity.VariantId;
			if (deep > 0 && entity.Variant != null)
			{
				Variant = new CounselorTestAnswerVariant(entity.Variant, deep - 1);
			}

			TrainingCounselorId = entity.TrainingCounselorId;
			if (deep > 0 && entity.TrainingCounselor != null)
			{
				TrainingCounselor = new TrainingCounselorsResult(entity.TrainingCounselor, deep - 1);
			}

			TrainingCounselorsTestId = entity.TrainingCounselorsTestId;
			if (deep > 0 && entity.TrainingCounselorsTest != null)
			{
				TrainingCounselorsTest = new TrainingCounselorsTest(entity.TrainingCounselorsTest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorTestAnswer CreateCopy()
		{
			var res = new CounselorTestAnswer(this);
			if (CounselorTest != null)
			{
				res.CounselorTest = new CounselorTest{Id=CounselorTest.Id, Eid=CounselorTest.Eid};
			}
			if (Question != null)
			{
				res.Question = new CounselorTestQuestion{Id=Question.Id, Eid=Question.Eid};
			}
			if (Variant != null)
			{
				res.Variant = new CounselorTestAnswerVariant{Id=Variant.Id, Eid=Variant.Eid};
			}
			if (TrainingCounselor != null)
			{
				res.TrainingCounselor = new TrainingCounselorsResult{Id=TrainingCounselor.Id, Eid=TrainingCounselor.Eid};
			}
			if (TrainingCounselorsTest != null)
			{
				res.TrainingCounselorsTest = new TrainingCounselorsTest{Id=TrainingCounselorsTest.Id, Eid=TrainingCounselorsTest.Eid};
			}
			return res;
		}

		public void CopyEntity(CounselorTestAnswer entity)
		{
			Id = entity.Id;
			Answer = entity.Answer;
			Raiting = entity.Raiting;
			CounselorTestId = entity.CounselorTestId;
			QuestionId = entity.QuestionId;
			VariantId = entity.VariantId;
			TrainingCounselorId = entity.TrainingCounselorId;
			TrainingCounselorsTestId = entity.TrainingCounselorsTestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorTestAnswerVariant : ILastUpdateTick
	{
		public CounselorTestAnswerVariant()
		{
		}

		public CounselorTestAnswerVariant(CounselorTestAnswerVariant entity) : this(entity, null)
		{
		}

		public CounselorTestAnswerVariant(CounselorTestAnswerVariant entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Text = entity.Text;
			IsTrue = entity.IsTrue;
			IsDeleted = entity.IsDeleted;
			SortOrder = entity.SortOrder;
			QuestionId = entity.QuestionId;
			if (deep > 0 && entity.Question != null)
			{
				Question = new CounselorTestQuestion(entity.Question, deep - 1);
			}

			FileOrLinkId = entity.FileOrLinkId;
			if (deep > 0 && entity.FileOrLink != null)
			{
				FileOrLink = new FileOrLink(entity.FileOrLink, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorTestAnswerVariant CreateCopy()
		{
			var res = new CounselorTestAnswerVariant(this);
			if (Question != null)
			{
				res.Question = new CounselorTestQuestion{Id=Question.Id, Eid=Question.Eid};
			}
			if (FileOrLink != null)
			{
				res.FileOrLink = new FileOrLink{Id=FileOrLink.Id, Eid=FileOrLink.Eid};
			}
			res.Answer = Answer?.Select(p=>new CounselorTestAnswer {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(CounselorTestAnswerVariant entity)
		{
			Id = entity.Id;
			Text = entity.Text;
			IsTrue = entity.IsTrue;
			IsDeleted = entity.IsDeleted;
			SortOrder = entity.SortOrder;
			QuestionId = entity.QuestionId;
			FileOrLinkId = entity.FileOrLinkId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorTestQuestion : ILastUpdateTick
	{
		public CounselorTestQuestion()
		{
		}

		public CounselorTestQuestion(CounselorTestQuestion entity) : this(entity, null)
		{
		}

		public CounselorTestQuestion(CounselorTestQuestion entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Question = entity.Question;
			IsDeleted = entity.IsDeleted;
			SortOrder = entity.SortOrder;
			CounselorTestId = entity.CounselorTestId;
			if (deep > 0 && entity.CounselorTest != null)
			{
				CounselorTest = new CounselorTest(entity.CounselorTest, deep - 1);
			}

			TypeId = entity.TypeId;
			if (deep > 0 && entity.Type != null)
			{
				Type = new CounselorTestQuestionType(entity.Type, deep - 1);
			}

			CounselorTestSubjectId = entity.CounselorTestSubjectId;
			if (deep > 0 && entity.CounselorTestSubject != null)
			{
				CounselorTestSubject = new CounselorTestSubject(entity.CounselorTestSubject, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorTestQuestion CreateCopy()
		{
			var res = new CounselorTestQuestion(this);
			if (CounselorTest != null)
			{
				res.CounselorTest = new CounselorTest{Id=CounselorTest.Id, Eid=CounselorTest.Eid};
			}
			if (Type != null)
			{
				res.Type = new CounselorTestQuestionType{Id=Type.Id, Eid=Type.Eid};
			}
			if (CounselorTestSubject != null)
			{
				res.CounselorTestSubject = new CounselorTestSubject{Id=CounselorTestSubject.Id, Eid=CounselorTestSubject.Eid};
			}
			res.Variants = Variants?.Select(p=>new CounselorTestAnswerVariant {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Answer = Answer?.Select(p=>new CounselorTestAnswer {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(CounselorTestQuestion entity)
		{
			Id = entity.Id;
			Question = entity.Question;
			IsDeleted = entity.IsDeleted;
			SortOrder = entity.SortOrder;
			CounselorTestId = entity.CounselorTestId;
			TypeId = entity.TypeId;
			CounselorTestSubjectId = entity.CounselorTestSubjectId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorTestQuestionType : ILastUpdateTick
	{
		public CounselorTestQuestionType()
		{
		}

		public CounselorTestQuestionType(CounselorTestQuestionType entity) : this(entity, null)
		{
		}

		public CounselorTestQuestionType(CounselorTestQuestionType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorTestQuestionType CreateCopy()
		{
			var res = new CounselorTestQuestionType(this);
			return res;
		}

		public void CopyEntity(CounselorTestQuestionType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class CounselorTestSubject : ILastUpdateTick
	{
		public CounselorTestSubject()
		{
		}

		public CounselorTestSubject(CounselorTestSubject entity) : this(entity, null)
		{
		}

		public CounselorTestSubject(CounselorTestSubject entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			QuestionCount = entity.QuestionCount;
			IsArchive = entity.IsArchive;
			CounselorTestId = entity.CounselorTestId;
			if (deep > 0 && entity.CounselorTest != null)
			{
				CounselorTest = new CounselorTest(entity.CounselorTest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public CounselorTestSubject CreateCopy()
		{
			var res = new CounselorTestSubject(this);
			if (CounselorTest != null)
			{
				res.CounselorTest = new CounselorTest{Id=CounselorTest.Id, Eid=CounselorTest.Eid};
			}
			return res;
		}

		public void CopyEntity(CounselorTestSubject entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			QuestionCount = entity.QuestionCount;
			IsArchive = entity.IsArchive;
			CounselorTestId = entity.CounselorTestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Country : ILastUpdateTick
	{
		public Country()
		{
		}

		public Country(Country entity) : this(entity, null)
		{
		}

		public Country(Country entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Code = entity.Code;
			Name = entity.Name;
			FullName = entity.FullName;
			SymbolCode2 = entity.SymbolCode2;
			SymbolCode3 = entity.SymbolCode3;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Country CreateCopy()
		{
			var res = new Country(this);
			res.DiningOptions = DiningOptions?.Select(p=>new DiningOptions {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Tours = Tours?.Select(p=>new TourCountry {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Country entity)
		{
			Id = entity.Id;
			Code = entity.Code;
			Name = entity.Name;
			FullName = entity.FullName;
			SymbolCode2 = entity.SymbolCode2;
			SymbolCode3 = entity.SymbolCode3;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class DeclineReason : ILastUpdateTick
	{
		public DeclineReason()
		{
		}

		public DeclineReason(DeclineReason entity) : this(entity, null)
		{
		}

		public DeclineReason(DeclineReason entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			FirstStage = entity.FirstStage;
			SecondStage = entity.SecondStage;
			IsManual = entity.IsManual;
			ForPreferential = entity.ForPreferential;
			ForCommerce = entity.ForCommerce;
			ValidReasons = entity.ValidReasons;
			StatusId = entity.StatusId;
			if (deep > 0 && entity.Status != null)
			{
				Status = new Status(entity.Status, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public DeclineReason CreateCopy()
		{
			var res = new DeclineReason(this);
			if (Status != null)
			{
				res.Status = new Status{Id=Status.Id, Eid=Status.Eid};
			}
			res.TypeOfRests = TypeOfRests?.Select(p=>new TypeOfRest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(DeclineReason entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			FirstStage = entity.FirstStage;
			SecondStage = entity.SecondStage;
			IsManual = entity.IsManual;
			ForPreferential = entity.ForPreferential;
			ForCommerce = entity.ForCommerce;
			ValidReasons = entity.ValidReasons;
			StatusId = entity.StatusId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class DeletedRecord : ILastUpdateTick
	{
		public DeletedRecord()
		{
		}

		public DeletedRecord(DeletedRecord entity) : this(entity, null)
		{
		}

		public DeletedRecord(DeletedRecord entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			ClassName = entity.ClassName;
			Uid = entity.Uid;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public DeletedRecord CreateCopy()
		{
			var res = new DeletedRecord(this);
			return res;
		}

		public void CopyEntity(DeletedRecord entity)
		{
			Id = entity.Id;
			ClassName = entity.ClassName;
			Uid = entity.Uid;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class DiningOptions : ILastUpdateTick
	{
		public DiningOptions()
		{
		}

		public DiningOptions(DiningOptions entity) : this(entity, null)
		{
		}

		public DiningOptions(DiningOptions entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			HotelId = entity.HotelId;
			if (deep > 0 && entity.Hotel != null)
			{
				Hotel = new Hotels(entity.Hotel, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public DiningOptions CreateCopy()
		{
			var res = new DiningOptions(this);
			if (Hotel != null)
			{
				res.Hotel = new Hotels{Id=Hotel.Id, Eid=Hotel.Eid};
			}
			res.Countrys = Countrys?.Select(p=>new Country {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(DiningOptions entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			HotelId = entity.HotelId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class DirectoryFlights : ILastUpdateTick
	{
		public DirectoryFlights()
		{
		}

		public DirectoryFlights(DirectoryFlights entity) : this(entity, null)
		{
		}

		public DirectoryFlights(DirectoryFlights entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Code = entity.Code;
			FilightNumber = entity.FilightNumber;
			TimeOfDeparture = entity.TimeOfDeparture;
			TimeOfArrival = entity.TimeOfArrival;
			CodeDeparture = entity.CodeDeparture;
			CodeArrival = entity.CodeArrival;
			ContractId = entity.ContractId;
			if (deep > 0 && entity.Contract != null)
			{
				Contract = new Contract(entity.Contract, deep - 1);
			}

			TypeOfTransportId = entity.TypeOfTransportId;
			if (deep > 0 && entity.TypeOfTransport != null)
			{
				TypeOfTransport = new TypeOfTransport(entity.TypeOfTransport, deep - 1);
			}

			ArrivalId = entity.ArrivalId;
			if (deep > 0 && entity.Arrival != null)
			{
				Arrival = new City(entity.Arrival, deep - 1);
			}

			DepartureId = entity.DepartureId;
			if (deep > 0 && entity.Departure != null)
			{
				Departure = new City(entity.Departure, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
			RestManCount = entity.RestManCount;
		}

		public DirectoryFlights CreateCopy()
		{
			var res = new DirectoryFlights(this);
			if (Contract != null)
			{
				res.Contract = new Contract{Id=Contract.Id, Eid=Contract.Eid};
			}
			if (TypeOfTransport != null)
			{
				res.TypeOfTransport = new TypeOfTransport{Id=TypeOfTransport.Id, Eid=TypeOfTransport.Eid};
			}
			if (Arrival != null)
			{
				res.Arrival = new City{Id=Arrival.Id, Eid=Arrival.Eid};
			}
			if (Departure != null)
			{
				res.Departure = new City{Id=Departure.Id, Eid=Departure.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			res.LinkToPeoples = LinkToPeoples?.Select(p=>new LinkToPeople {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Tickets = Tickets?.Select(p=>new Ticket {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(DirectoryFlights entity)
		{
			Id = entity.Id;
			Code = entity.Code;
			FilightNumber = entity.FilightNumber;
			TimeOfDeparture = entity.TimeOfDeparture;
			TimeOfArrival = entity.TimeOfArrival;
			CodeDeparture = entity.CodeDeparture;
			CodeArrival = entity.CodeArrival;
			ContractId = entity.ContractId;
			TypeOfTransportId = entity.TypeOfTransportId;
			ArrivalId = entity.ArrivalId;
			DepartureId = entity.DepartureId;
			StateId = entity.StateId;
			HistoryLinkId = entity.HistoryLinkId;
			YearOfRestId = entity.YearOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
			RestManCount = entity.RestManCount;
		}
	}
	public partial class Discount : ILastUpdateTick
	{
		public Discount()
		{
		}

		public Discount(Discount entity) : this(entity, null)
		{
		}

		public Discount(Discount entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Procent = entity.Procent;
			Name = entity.Name;
			Description = entity.Description;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Unlimited = entity.Unlimited;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			FileOrLinkId = entity.FileOrLinkId;
			if (deep > 0 && entity.FileOrLink != null)
			{
				FileOrLink = new FileOrLink(entity.FileOrLink, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Discount CreateCopy()
		{
			var res = new Discount(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (FileOrLink != null)
			{
				res.FileOrLink = new FileOrLink{Id=FileOrLink.Id, Eid=FileOrLink.Eid};
			}
			res.Tours = Tours?.Select(p=>new Tour {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Requests = Requests?.Select(p=>new Request {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Discount entity)
		{
			Id = entity.Id;
			Procent = entity.Procent;
			Name = entity.Name;
			Description = entity.Description;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Unlimited = entity.Unlimited;
			HistoryLinkId = entity.HistoryLinkId;
			StateId = entity.StateId;
			FileOrLinkId = entity.FileOrLinkId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class DiscountCard : ILastUpdateTick
	{
		public DiscountCard()
		{
		}

		public DiscountCard(DiscountCard entity) : this(entity, null)
		{
		}

		public DiscountCard(DiscountCard entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			CardNumber = entity.CardNumber;
			CardHolder = entity.CardHolder;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Procent = entity.Procent;
			Email = entity.Email;
			Phone = entity.Phone;
			DateOfBirth = entity.DateOfBirth;
			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public DiscountCard CreateCopy()
		{
			var res = new DiscountCard(this);
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			return res;
		}

		public void CopyEntity(DiscountCard entity)
		{
			Id = entity.Id;
			CardNumber = entity.CardNumber;
			CardHolder = entity.CardHolder;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Procent = entity.Procent;
			Email = entity.Email;
			Phone = entity.Phone;
			DateOfBirth = entity.DateOfBirth;
			StateId = entity.StateId;
			HistoryLinkId = entity.HistoryLinkId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class DocumentType : ILastUpdateTick
	{
		public DocumentType()
		{
		}

		public DocumentType(DocumentType entity) : this(entity, null)
		{
		}

		public DocumentType(DocumentType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Owner = entity.Owner;
			GlobalUid = entity.GlobalUid;
			ForChild = entity.ForChild;
			ForForeign = entity.ForForeign;
			ForOther = entity.ForOther;
			BaseRegistryUid = entity.BaseRegistryUid;
			ForApplicant = entity.ForApplicant;
			ForAgent = entity.ForAgent;
			CreateUserId = entity.CreateUserId;
			if (deep > 0 && entity.CreateUser != null)
			{
				CreateUser = new Account(entity.CreateUser, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public DocumentType CreateCopy()
		{
			var res = new DocumentType(this);
			if (CreateUser != null)
			{
				res.CreateUser = new Account{Id=CreateUser.Id, Eid=CreateUser.Eid};
			}
			res.TypesOfRest = TypesOfRest?.Select(p=>new TypeOfRest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(DocumentType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Owner = entity.Owner;
			GlobalUid = entity.GlobalUid;
			ForChild = entity.ForChild;
			ForForeign = entity.ForForeign;
			ForOther = entity.ForOther;
			BaseRegistryUid = entity.BaseRegistryUid;
			ForApplicant = entity.ForApplicant;
			ForAgent = entity.ForAgent;
			CreateUserId = entity.CreateUserId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Drug : ILastUpdateTick
	{
		public Drug()
		{
		}

		public Drug(Drug entity) : this(entity, null)
		{
		}

		public Drug(Drug entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Storage = entity.Storage;
			DrugTypeId = entity.DrugTypeId;
			if (deep > 0 && entity.DrugType != null)
			{
				DrugType = new TypeOfDrug(entity.DrugType, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Drug CreateCopy()
		{
			var res = new Drug(this);
			if (DrugType != null)
			{
				res.DrugType = new TypeOfDrug{Id=DrugType.Id, Eid=DrugType.Eid};
			}
			res.Doses = Doses?.Select(p=>new PupilDose {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Drug entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Storage = entity.Storage;
			DrugTypeId = entity.DrugTypeId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ERLBenefitStatus : ILastUpdateTick
	{
		public ERLBenefitStatus()
		{
		}

		public ERLBenefitStatus(ERLBenefitStatus entity) : this(entity, null)
		{
		}

		public ERLBenefitStatus(ERLBenefitStatus entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			BenefitUid = entity.BenefitUid;
			ERLMessageId = entity.ERLMessageId;
			ERLCommited = entity.ERLCommited;
			Queue24Sended = entity.Queue24Sended;
			PersonId = entity.PersonId;
			if (deep > 0 && entity.Person != null)
			{
				Person = new ERLPersonStatus(entity.Person, deep - 1);
			}

			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ERLBenefitStatus CreateCopy()
		{
			var res = new ERLBenefitStatus(this);
			if (Person != null)
			{
				res.Person = new ERLPersonStatus{Id=Person.Id, Eid=Person.Eid};
			}
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			return res;
		}

		public void CopyEntity(ERLBenefitStatus entity)
		{
			Id = entity.Id;
			BenefitUid = entity.BenefitUid;
			ERLMessageId = entity.ERLMessageId;
			ERLCommited = entity.ERLCommited;
			Queue24Sended = entity.Queue24Sended;
			PersonId = entity.PersonId;
			RequestId = entity.RequestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ERLPersonStatus : ILastUpdateTick
	{
		public ERLPersonStatus()
		{
		}

		public ERLPersonStatus(ERLPersonStatus entity) : this(entity, null)
		{
		}

		public ERLPersonStatus(ERLPersonStatus entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			PersonUid = entity.PersonUid;
			ERLMessageId = entity.ERLMessageId;
			ERLCommited = entity.ERLCommited;
			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			ChildId = entity.ChildId;
			if (deep > 0 && entity.Child != null)
			{
				Child = new Child(entity.Child, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ERLPersonStatus CreateCopy()
		{
			var res = new ERLPersonStatus(this);
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			if (Child != null)
			{
				res.Child = new Child{Id=Child.Id, Eid=Child.Eid};
			}
			res.Benefits = Benefits?.Select(p=>new ERLBenefitStatus {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(ERLPersonStatus entity)
		{
			Id = entity.Id;
			PersonUid = entity.PersonUid;
			ERLMessageId = entity.ERLMessageId;
			ERLCommited = entity.ERLCommited;
			ApplicantId = entity.ApplicantId;
			ChildId = entity.ChildId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class EventGeography : ILastUpdateTick
	{
		public EventGeography()
		{
		}

		public EventGeography(EventGeography entity) : this(entity, null)
		{
		}

		public EventGeography(EventGeography entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			SortOrder = entity.SortOrder;
			Description = entity.Description;
			DurationInDays = entity.DurationInDays;
			AddonServicesId = entity.AddonServicesId;
			if (deep > 0 && entity.AddonServices != null)
			{
				AddonServices = new AddonServices(entity.AddonServices, deep - 1);
			}

			CityId = entity.CityId;
			if (deep > 0 && entity.City != null)
			{
				City = new City(entity.City, deep - 1);
			}

			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			ProductId = entity.ProductId;
			if (deep > 0 && entity.Product != null)
			{
				Product = new Product(entity.Product, deep - 1);
			}

			ParentId = entity.ParentId;
			if (deep > 0 && entity.Parent != null)
			{
				Parent = new EventGeography(entity.Parent, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public EventGeography CreateCopy()
		{
			var res = new EventGeography(this);
			if (AddonServices != null)
			{
				res.AddonServices = new AddonServices{Id=AddonServices.Id, Eid=AddonServices.Eid};
			}
			if (City != null)
			{
				res.City = new City{Id=City.Id, Eid=City.Eid};
			}
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			if (Product != null)
			{
				res.Product = new Product{Id=Product.Id, Eid=Product.Eid};
			}
			if (Parent != null)
			{
				res.Parent = new EventGeography{Id=Parent.Id, Eid=Parent.Eid};
			}
			res.Children = Children?.Select(p=>new EventGeography {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(EventGeography entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			SortOrder = entity.SortOrder;
			Description = entity.Description;
			DurationInDays = entity.DurationInDays;
			AddonServicesId = entity.AddonServicesId;
			CityId = entity.CityId;
			TourId = entity.TourId;
			ProductId = entity.ProductId;
			ParentId = entity.ParentId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ExchangeBaseRegistry : ILastUpdateTick
	{
		public ExchangeBaseRegistry()
		{
		}

		public ExchangeBaseRegistry(ExchangeBaseRegistry entity) : this(entity, null)
		{
		}

		public ExchangeBaseRegistry(ExchangeBaseRegistry entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			RequestGuid = entity.RequestGuid;
			ServiceNumber = entity.ServiceNumber;
			SendDate = entity.SendDate;
			AcknolegmentGuid = entity.AcknolegmentGuid;
			ResponseGuid = entity.ResponseGuid;
			ResponseDate = entity.ResponseDate;
			OperationType = entity.OperationType;
			IsIncoming = entity.IsIncoming;
			RequestText = entity.RequestText;
			ResponseText = entity.ResponseText;
			IsProcessed = entity.IsProcessed;
			NotActual = entity.NotActual;
			Success = entity.Success;
			SearchField = entity.SearchField;
			BirthDate = entity.BirthDate;
			IsAddonRequest = entity.IsAddonRequest;
			ChildId = entity.ChildId;
			if (deep > 0 && entity.Child != null)
			{
				Child = new Child(entity.Child, deep - 1);
			}

			ExchangeBaseRegistryTypeId = entity.ExchangeBaseRegistryTypeId;
			if (deep > 0 && entity.ExchangeBaseRegistryType != null)
			{
				ExchangeBaseRegistryType = new ExchangeBaseRegistryType(entity.ExchangeBaseRegistryType, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ExchangeBaseRegistry CreateCopy()
		{
			var res = new ExchangeBaseRegistry(this);
			if (Child != null)
			{
				res.Child = new Child{Id=Child.Id, Eid=Child.Eid};
			}
			if (ExchangeBaseRegistryType != null)
			{
				res.ExchangeBaseRegistryType = new ExchangeBaseRegistryType{Id=ExchangeBaseRegistryType.Id, Eid=ExchangeBaseRegistryType.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			return res;
		}

		public void CopyEntity(ExchangeBaseRegistry entity)
		{
			Id = entity.Id;
			RequestGuid = entity.RequestGuid;
			ServiceNumber = entity.ServiceNumber;
			SendDate = entity.SendDate;
			AcknolegmentGuid = entity.AcknolegmentGuid;
			ResponseGuid = entity.ResponseGuid;
			ResponseDate = entity.ResponseDate;
			OperationType = entity.OperationType;
			IsIncoming = entity.IsIncoming;
			RequestText = entity.RequestText;
			ResponseText = entity.ResponseText;
			IsProcessed = entity.IsProcessed;
			NotActual = entity.NotActual;
			Success = entity.Success;
			SearchField = entity.SearchField;
			BirthDate = entity.BirthDate;
			IsAddonRequest = entity.IsAddonRequest;
			ChildId = entity.ChildId;
			ExchangeBaseRegistryTypeId = entity.ExchangeBaseRegistryTypeId;
			ApplicantId = entity.ApplicantId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ExchangeBaseRegistryType : ILastUpdateTick
	{
		public ExchangeBaseRegistryType()
		{
		}

		public ExchangeBaseRegistryType(ExchangeBaseRegistryType entity) : this(entity, null)
		{
		}

		public ExchangeBaseRegistryType(ExchangeBaseRegistryType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			SendMessage = entity.SendMessage;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ExchangeBaseRegistryType CreateCopy()
		{
			var res = new ExchangeBaseRegistryType(this);
			return res;
		}

		public void CopyEntity(ExchangeBaseRegistryType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			SendMessage = entity.SendMessage;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ExchangeUTS : ILastUpdateTick
	{
		public ExchangeUTS()
		{
		}

		public ExchangeUTS(ExchangeUTS entity) : this(entity, null)
		{
		}

		public ExchangeUTS(ExchangeUTS entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Message = entity.Message;
			Processed = entity.Processed;
			QueueName = entity.QueueName;
			DateCreate = entity.DateCreate;
			Incoming = entity.Incoming;
			FromOrgCode = entity.FromOrgCode;
			ToOrgCode = entity.ToOrgCode;
			MessageId = entity.MessageId;
			ServiceNumber = entity.ServiceNumber;
			IsError = entity.IsError;
			ErrorText = entity.ErrorText;
			ErrorDescription = entity.ErrorDescription;
			TypeOfRestId = entity.TypeOfRestId;
			BookingGuid = entity.BookingGuid;
			ToState = entity.ToState;
			IsErrorOnReleaseBooking = entity.IsErrorOnReleaseBooking;
			DateToSend = entity.DateToSend;
			IsSigned = entity.IsSigned;
			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ExchangeUTS CreateCopy()
		{
			var res = new ExchangeUTS(this);
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			return res;
		}

		public void CopyEntity(ExchangeUTS entity)
		{
			Id = entity.Id;
			Message = entity.Message;
			Processed = entity.Processed;
			QueueName = entity.QueueName;
			DateCreate = entity.DateCreate;
			Incoming = entity.Incoming;
			FromOrgCode = entity.FromOrgCode;
			ToOrgCode = entity.ToOrgCode;
			MessageId = entity.MessageId;
			ServiceNumber = entity.ServiceNumber;
			IsError = entity.IsError;
			ErrorText = entity.ErrorText;
			ErrorDescription = entity.ErrorDescription;
			TypeOfRestId = entity.TypeOfRestId;
			BookingGuid = entity.BookingGuid;
			ToState = entity.ToState;
			IsErrorOnReleaseBooking = entity.IsErrorOnReleaseBooking;
			DateToSend = entity.DateToSend;
			IsSigned = entity.IsSigned;
			RequestId = entity.RequestId;
			AccountId = entity.AccountId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ExcludeDays : ILastUpdateTick
	{
		public ExcludeDays()
		{
		}

		public ExcludeDays(ExcludeDays entity) : this(entity, null)
		{
		}

		public ExcludeDays(ExcludeDays entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Date = entity.Date;
			IsFreeDay = entity.IsFreeDay;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ExcludeDays CreateCopy()
		{
			var res = new ExcludeDays(this);
			return res;
		}

		public void CopyEntity(ExcludeDays entity)
		{
			Id = entity.Id;
			Date = entity.Date;
			IsFreeDay = entity.IsFreeDay;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class FileHotel : ILastUpdateTick
	{
		public FileHotel()
		{
		}

		public FileHotel(FileHotel entity) : this(entity, null)
		{
		}

		public FileHotel(FileHotel entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FileName = entity.FileName;
			FileUrl = entity.FileUrl;
			IsMainPhoto = entity.IsMainPhoto;
			IsArchive = entity.IsArchive;
			HotelId = entity.HotelId;
			if (deep > 0 && entity.Hotel != null)
			{
				Hotel = new Hotels(entity.Hotel, deep - 1);
			}

			FileTypeId = entity.FileTypeId;
			if (deep > 0 && entity.FileType != null)
			{
				FileType = new FileType(entity.FileType, deep - 1);
			}

			TypeOfRoomsId = entity.TypeOfRoomsId;
			if (deep > 0 && entity.TypeOfRooms != null)
			{
				TypeOfRooms = new TypeOfRooms(entity.TypeOfRooms, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public FileHotel CreateCopy()
		{
			var res = new FileHotel(this);
			if (Hotel != null)
			{
				res.Hotel = new Hotels{Id=Hotel.Id, Eid=Hotel.Eid};
			}
			if (FileType != null)
			{
				res.FileType = new FileType{Id=FileType.Id, Eid=FileType.Eid};
			}
			if (TypeOfRooms != null)
			{
				res.TypeOfRooms = new TypeOfRooms{Id=TypeOfRooms.Id, Eid=TypeOfRooms.Eid};
			}
			return res;
		}

		public void CopyEntity(FileHotel entity)
		{
			Id = entity.Id;
			FileName = entity.FileName;
			FileUrl = entity.FileUrl;
			IsMainPhoto = entity.IsMainPhoto;
			IsArchive = entity.IsArchive;
			HotelId = entity.HotelId;
			FileTypeId = entity.FileTypeId;
			TypeOfRoomsId = entity.TypeOfRoomsId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class FileOfTour : ILastUpdateTick
	{
		public FileOfTour()
		{
		}

		public FileOfTour(FileOfTour entity) : this(entity, null)
		{
		}

		public FileOfTour(FileOfTour entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FileName = entity.FileName;
			FileUrl = entity.FileUrl;
			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			FileTypeId = entity.FileTypeId;
			if (deep > 0 && entity.FileType != null)
			{
				FileType = new FileType(entity.FileType, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public FileOfTour CreateCopy()
		{
			var res = new FileOfTour(this);
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			if (FileType != null)
			{
				res.FileType = new FileType{Id=FileType.Id, Eid=FileType.Eid};
			}
			return res;
		}

		public void CopyEntity(FileOfTour entity)
		{
			Id = entity.Id;
			FileName = entity.FileName;
			FileUrl = entity.FileUrl;
			TourId = entity.TourId;
			FileTypeId = entity.FileTypeId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class FileOrLink : ILastUpdateTick
	{
		public FileOrLink()
		{
		}

		public FileOrLink(FileOrLink entity) : this(entity, null)
		{
		}

		public FileOrLink(FileOrLink entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FileName = entity.FileName;
			FileUrl = entity.FileUrl;
			IsPhoto = entity.IsPhoto;
			IsVideo = entity.IsVideo;
			IsMain = entity.IsMain;
			LinkId = entity.LinkId;
			if (deep > 0 && entity.Link != null)
			{
				Link = new LinkToFile(entity.Link, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public FileOrLink CreateCopy()
		{
			var res = new FileOrLink(this);
			if (Link != null)
			{
				res.Link = new LinkToFile{Id=Link.Id, Eid=Link.Eid};
			}
			return res;
		}

		public void CopyEntity(FileOrLink entity)
		{
			Id = entity.Id;
			FileName = entity.FileName;
			FileUrl = entity.FileUrl;
			IsPhoto = entity.IsPhoto;
			IsVideo = entity.IsVideo;
			IsMain = entity.IsMain;
			LinkId = entity.LinkId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class FileType : ILastUpdateTick
	{
		public FileType()
		{
		}

		public FileType(FileType entity) : this(entity, null)
		{
		}

		public FileType(FileType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsPhoto = entity.IsPhoto;
			ParentId = entity.ParentId;
			if (deep > 0 && entity.Parent != null)
			{
				Parent = new FileType(entity.Parent, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public FileType CreateCopy()
		{
			var res = new FileType(this);
			if (Parent != null)
			{
				res.Parent = new FileType{Id=Parent.Id, Eid=Parent.Eid};
			}
			return res;
		}

		public void CopyEntity(FileType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsPhoto = entity.IsPhoto;
			ParentId = entity.ParentId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ForeginPassport : ILastUpdateTick
	{
		public ForeginPassport()
		{
		}

		public ForeginPassport(ForeginPassport entity) : this(entity, null)
		{
		}

		public ForeginPassport(ForeginPassport entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			PassportNumber = entity.PassportNumber;
			PassportIssueDate = entity.PassportIssueDate;
			PassportValidityEndDate = entity.PassportValidityEndDate;
			PassportIssue = entity.PassportIssue;
			ForeginName = entity.ForeginName;
			ForeginLastName = entity.ForeginLastName;
			FirstName = entity.FirstName;
			LastName = entity.LastName;
			AdministratorTourId = entity.AdministratorTourId;
			if (deep > 0 && entity.AdministratorTour != null)
			{
				AdministratorTour = new AdministratorTour(entity.AdministratorTour, deep - 1);
			}

			CounselorsId = entity.CounselorsId;
			if (deep > 0 && entity.Counselors != null)
			{
				Counselors = new Counselors(entity.Counselors, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ForeginPassport CreateCopy()
		{
			var res = new ForeginPassport(this);
			if (AdministratorTour != null)
			{
				res.AdministratorTour = new AdministratorTour{Id=AdministratorTour.Id, Eid=AdministratorTour.Eid};
			}
			if (Counselors != null)
			{
				res.Counselors = new Counselors{Id=Counselors.Id, Eid=Counselors.Eid};
			}
			return res;
		}

		public void CopyEntity(ForeginPassport entity)
		{
			Id = entity.Id;
			PassportNumber = entity.PassportNumber;
			PassportIssueDate = entity.PassportIssueDate;
			PassportValidityEndDate = entity.PassportValidityEndDate;
			PassportIssue = entity.PassportIssue;
			ForeginName = entity.ForeginName;
			ForeginLastName = entity.ForeginLastName;
			FirstName = entity.FirstName;
			LastName = entity.LastName;
			AdministratorTourId = entity.AdministratorTourId;
			CounselorsId = entity.CounselorsId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class FormOfRest : ILastUpdateTick
	{
		public FormOfRest()
		{
		}

		public FormOfRest(FormOfRest entity) : this(entity, null)
		{
		}

		public FormOfRest(FormOfRest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			TypeOfRestId = entity.TypeOfRestId;
			if (deep > 0 && entity.TypeOfRest != null)
			{
				TypeOfRest = new TypeOfRest(entity.TypeOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public FormOfRest CreateCopy()
		{
			var res = new FormOfRest(this);
			if (TypeOfRest != null)
			{
				res.TypeOfRest = new TypeOfRest{Id=TypeOfRest.Id, Eid=TypeOfRest.Eid};
			}
			res.PupilGroups = PupilGroups?.Select(p=>new PupilGroup {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(FormOfRest entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			TypeOfRestId = entity.TypeOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class FunctioningType : ILastUpdateTick
	{
		public FunctioningType()
		{
		}

		public FunctioningType(FunctioningType entity) : this(entity, null)
		{
		}

		public FunctioningType(FunctioningType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public FunctioningType CreateCopy()
		{
			var res = new FunctioningType(this);
			return res;
		}

		public void CopyEntity(FunctioningType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class GroupedTimeOfRest : ILastUpdateTick
	{
		public GroupedTimeOfRest()
		{
		}

		public GroupedTimeOfRest(GroupedTimeOfRest entity) : this(entity, null)
		{
		}

		public GroupedTimeOfRest(GroupedTimeOfRest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public GroupedTimeOfRest CreateCopy()
		{
			var res = new GroupedTimeOfRest(this);
			return res;
		}

		public void CopyEntity(GroupedTimeOfRest entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class History : ILastUpdateTick
	{
		public History()
		{
		}

		public History(History entity) : this(entity, null)
		{
		}

		public History(History entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateChange = entity.DateChange;
			EventCode = entity.EventCode;
			Commentary = entity.Commentary;
			AuthorString = entity.AuthorString;
			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			LinkId = entity.LinkId;
			if (deep > 0 && entity.Link != null)
			{
				Link = new HistoryLink(entity.Link, deep - 1);
			}

			SignInfoId = entity.SignInfoId;
			if (deep > 0 && entity.SignInfo != null)
			{
				SignInfo = new SignInfo(entity.SignInfo, deep - 1);
			}

			FromStateId = entity.FromStateId;
			if (deep > 0 && entity.FromState != null)
			{
				FromState = new StateMachineState(entity.FromState, deep - 1);
			}

			ToStateId = entity.ToStateId;
			if (deep > 0 && entity.ToState != null)
			{
				ToState = new StateMachineState(entity.ToState, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public History CreateCopy()
		{
			var res = new History(this);
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			if (Link != null)
			{
				res.Link = new HistoryLink{Id=Link.Id, Eid=Link.Eid};
			}
			if (SignInfo != null)
			{
				res.SignInfo = new SignInfo{Id=SignInfo.Id, Eid=SignInfo.Eid};
			}
			if (FromState != null)
			{
				res.FromState = new StateMachineState{Id=FromState.Id, Eid=FromState.Eid};
			}
			if (ToState != null)
			{
				res.ToState = new StateMachineState{Id=ToState.Id, Eid=ToState.Eid};
			}
			return res;
		}

		public void CopyEntity(History entity)
		{
			Id = entity.Id;
			DateChange = entity.DateChange;
			EventCode = entity.EventCode;
			Commentary = entity.Commentary;
			AuthorString = entity.AuthorString;
			AccountId = entity.AccountId;
			LinkId = entity.LinkId;
			SignInfoId = entity.SignInfoId;
			FromStateId = entity.FromStateId;
			ToStateId = entity.ToStateId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class HistoryInteragencyRequest : ILastUpdateTick
	{
		public HistoryInteragencyRequest()
		{
		}

		public HistoryInteragencyRequest(HistoryInteragencyRequest entity) : this(entity, null)
		{
		}

		public HistoryInteragencyRequest(HistoryInteragencyRequest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Operation = entity.Operation;
			OperationDate = entity.OperationDate;
			Code = entity.Code;
			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			InteragencyRequestId = entity.InteragencyRequestId;
			if (deep > 0 && entity.InteragencyRequest != null)
			{
				InteragencyRequest = new InteragencyRequest(entity.InteragencyRequest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public HistoryInteragencyRequest CreateCopy()
		{
			var res = new HistoryInteragencyRequest(this);
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			if (InteragencyRequest != null)
			{
				res.InteragencyRequest = new InteragencyRequest{Id=InteragencyRequest.Id, Eid=InteragencyRequest.Eid};
			}
			return res;
		}

		public void CopyEntity(HistoryInteragencyRequest entity)
		{
			Id = entity.Id;
			Operation = entity.Operation;
			OperationDate = entity.OperationDate;
			Code = entity.Code;
			AccountId = entity.AccountId;
			InteragencyRequestId = entity.InteragencyRequestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class HistoryLink : ILastUpdateTick
	{
		public HistoryLink()
		{
		}

		public HistoryLink(HistoryLink entity) : this(entity, null)
		{
		}

		public HistoryLink(HistoryLink entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public HistoryLink CreateCopy()
		{
			var res = new HistoryLink(this);
			res.Historys = Historys?.Select(p=>new History {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(HistoryLink entity)
		{
			Id = entity.Id;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class HistoryRequest : ILastUpdateTick
	{
		public HistoryRequest()
		{
		}

		public HistoryRequest(HistoryRequest entity) : this(entity, null)
		{
		}

		public HistoryRequest(HistoryRequest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Operation = entity.Operation;
			OperationDate = entity.OperationDate;
			Code = entity.Code;
			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public HistoryRequest CreateCopy()
		{
			var res = new HistoryRequest(this);
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			return res;
		}

		public void CopyEntity(HistoryRequest entity)
		{
			Id = entity.Id;
			Operation = entity.Operation;
			OperationDate = entity.OperationDate;
			Code = entity.Code;
			RequestId = entity.RequestId;
			AccountId = entity.AccountId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class HotelBlock : ILastUpdateTick
	{
		public HotelBlock()
		{
		}

		public HotelBlock(HotelBlock entity) : this(entity, null)
		{
		}

		public HotelBlock(HotelBlock entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Count = entity.Count;
			HotelId = entity.HotelId;
			if (deep > 0 && entity.Hotel != null)
			{
				Hotel = new Hotels(entity.Hotel, deep - 1);
			}

			TypeOfRoomsId = entity.TypeOfRoomsId;
			if (deep > 0 && entity.TypeOfRooms != null)
			{
				TypeOfRooms = new TypeOfRooms(entity.TypeOfRooms, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public HotelBlock CreateCopy()
		{
			var res = new HotelBlock(this);
			if (Hotel != null)
			{
				res.Hotel = new Hotels{Id=Hotel.Id, Eid=Hotel.Eid};
			}
			if (TypeOfRooms != null)
			{
				res.TypeOfRooms = new TypeOfRooms{Id=TypeOfRooms.Id, Eid=TypeOfRooms.Eid};
			}
			res.Dates = Dates?.Select(p=>new HotelBlockDate {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(HotelBlock entity)
		{
			Id = entity.Id;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Count = entity.Count;
			HotelId = entity.HotelId;
			TypeOfRoomsId = entity.TypeOfRoomsId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class HotelBlockDate : ILastUpdateTick
	{
		public HotelBlockDate()
		{
		}

		public HotelBlockDate(HotelBlockDate entity) : this(entity, null)
		{
		}

		public HotelBlockDate(HotelBlockDate entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Date = entity.Date;
			Count = entity.Count;
			Free = entity.Free;
			HotelId = entity.HotelId;
			if (deep > 0 && entity.Hotel != null)
			{
				Hotel = new Hotels(entity.Hotel, deep - 1);
			}

			BlockId = entity.BlockId;
			if (deep > 0 && entity.Block != null)
			{
				Block = new HotelBlock(entity.Block, deep - 1);
			}

			TypeOfRoomsId = entity.TypeOfRoomsId;
			if (deep > 0 && entity.TypeOfRooms != null)
			{
				TypeOfRooms = new TypeOfRooms(entity.TypeOfRooms, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public HotelBlockDate CreateCopy()
		{
			var res = new HotelBlockDate(this);
			if (Hotel != null)
			{
				res.Hotel = new Hotels{Id=Hotel.Id, Eid=Hotel.Eid};
			}
			if (Block != null)
			{
				res.Block = new HotelBlock{Id=Block.Id, Eid=Block.Eid};
			}
			if (TypeOfRooms != null)
			{
				res.TypeOfRooms = new TypeOfRooms{Id=TypeOfRooms.Id, Eid=TypeOfRooms.Eid};
			}
			return res;
		}

		public void CopyEntity(HotelBlockDate entity)
		{
			Id = entity.Id;
			Date = entity.Date;
			Count = entity.Count;
			Free = entity.Free;
			HotelId = entity.HotelId;
			BlockId = entity.BlockId;
			TypeOfRoomsId = entity.TypeOfRoomsId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class HotelContactPerson : ILastUpdateTick
	{
		public HotelContactPerson()
		{
		}

		public HotelContactPerson(HotelContactPerson entity) : this(entity, null)
		{
		}

		public HotelContactPerson(HotelContactPerson entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			Position = entity.Position;
			Phone = entity.Phone;
			HotelId = entity.HotelId;
			if (deep > 0 && entity.Hotel != null)
			{
				Hotel = new Hotels(entity.Hotel, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public HotelContactPerson CreateCopy()
		{
			var res = new HotelContactPerson(this);
			if (Hotel != null)
			{
				res.Hotel = new Hotels{Id=Hotel.Id, Eid=Hotel.Eid};
			}
			return res;
		}

		public void CopyEntity(HotelContactPerson entity)
		{
			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			Position = entity.Position;
			Phone = entity.Phone;
			HotelId = entity.HotelId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class HotelPlacement : ILastUpdateTick
	{
		public HotelPlacement()
		{
		}

		public HotelPlacement(HotelPlacement entity) : this(entity, null)
		{
		}

		public HotelPlacement(HotelPlacement entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public HotelPlacement CreateCopy()
		{
			var res = new HotelPlacement(this);
			return res;
		}

		public void CopyEntity(HotelPlacement entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class HotelPrice : ILastUpdateTick
	{
		public HotelPrice()
		{
		}

		public HotelPrice(HotelPrice entity) : this(entity, null)
		{
		}

		public HotelPrice(HotelPrice entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			AgeFrom = entity.AgeFrom;
			AgtTo = entity.AgtTo;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			DiningOptionsId = entity.DiningOptionsId;
			if (deep > 0 && entity.DiningOptions != null)
			{
				DiningOptions = new DiningOptions(entity.DiningOptions, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			TypeOfRoomsId = entity.TypeOfRoomsId;
			if (deep > 0 && entity.TypeOfRooms != null)
			{
				TypeOfRooms = new TypeOfRooms(entity.TypeOfRooms, deep - 1);
			}

			AccommodationId = entity.AccommodationId;
			if (deep > 0 && entity.Accommodation != null)
			{
				Accommodation = new Accommodation(entity.Accommodation, deep - 1);
			}

			HotelId = entity.HotelId;
			if (deep > 0 && entity.Hotel != null)
			{
				Hotel = new Hotels(entity.Hotel, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public HotelPrice CreateCopy()
		{
			var res = new HotelPrice(this);
			if (DiningOptions != null)
			{
				res.DiningOptions = new DiningOptions{Id=DiningOptions.Id, Eid=DiningOptions.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (TypeOfRooms != null)
			{
				res.TypeOfRooms = new TypeOfRooms{Id=TypeOfRooms.Id, Eid=TypeOfRooms.Eid};
			}
			if (Accommodation != null)
			{
				res.Accommodation = new Accommodation{Id=Accommodation.Id, Eid=Accommodation.Eid};
			}
			if (Hotel != null)
			{
				res.Hotel = new Hotels{Id=Hotel.Id, Eid=Hotel.Eid};
			}
			return res;
		}

		public void CopyEntity(HotelPrice entity)
		{
			Id = entity.Id;
			AgeFrom = entity.AgeFrom;
			AgtTo = entity.AgtTo;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			DiningOptionsId = entity.DiningOptionsId;
			YearOfRestId = entity.YearOfRestId;
			TypeOfRoomsId = entity.TypeOfRoomsId;
			AccommodationId = entity.AccommodationId;
			HotelId = entity.HotelId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Hotels : ILastUpdateTick
	{
		public Hotels()
		{
		}

		public Hotels(Hotels entity) : this(entity, null)
		{
		}

		public Hotels(Hotels entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Address = entity.Address;
			NameOrganization = entity.NameOrganization;
			Phone = entity.Phone;
			Fax = entity.Fax;
			Email = entity.Email;
			Url = entity.Url;
			Head = entity.Head;
			HeadPosition = entity.HeadPosition;
			DrivingDirections = entity.DrivingDirections;
			NumberHousing = entity.NumberHousing;
			Squere = entity.Squere;
			MedicalOfficeAvailability = entity.MedicalOfficeAvailability;
			OutdoorPondAvailability = entity.OutdoorPondAvailability;
			OutdoorPondName = entity.OutdoorPondName;
			PoolAvailability = entity.PoolAvailability;
			SecurityInformation = entity.SecurityInformation;
			ComputerClassAvailability = entity.ComputerClassAvailability;
			CinimaAvailability = entity.CinimaAvailability;
			CinimaTimetable = entity.CinimaTimetable;
			GymAvailability = entity.GymAvailability;
			LibraryAvailability = entity.LibraryAvailability;
			LibraryTimetable = entity.LibraryTimetable;
			AccessibleEnvironment = entity.AccessibleEnvironment;
			TakeChildUp3Years = entity.TakeChildUp3Years;
			OtherLeisure = entity.OtherLeisure;
			ContactPerson = entity.ContactPerson;
			ContactPhone = entity.ContactPhone;
			Description = entity.Description;
			Latitude = entity.Latitude;
			Longitude = entity.Longitude;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			DistanceFromCenter = entity.DistanceFromCenter;
			DistanceFromBeach = entity.DistanceFromBeach;
			EkisId = entity.EkisId;
			EkisNeedSend = entity.EkisNeedSend;
			NotForSite = entity.NotForSite;
			IsLok = entity.IsLok;
			DescriptionHtml = entity.DescriptionHtml;
			IsCamping = entity.IsCamping;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			PlaceOfRestId = entity.PlaceOfRestId;
			if (deep > 0 && entity.PlaceOfRest != null)
			{
				PlaceOfRest = new PlaceOfRest(entity.PlaceOfRest, deep - 1);
			}

			HotelTypeId = entity.HotelTypeId;
			if (deep > 0 && entity.HotelType != null)
			{
				HotelType = new HotelType(entity.HotelType, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			CityId = entity.CityId;
			if (deep > 0 && entity.City != null)
			{
				City = new City(entity.City, deep - 1);
			}

			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			FunctioningTypeId = entity.FunctioningTypeId;
			if (deep > 0 && entity.FunctioningType != null)
			{
				FunctioningType = new FunctioningType(entity.FunctioningType, deep - 1);
			}

			HotelPlacementId = entity.HotelPlacementId;
			if (deep > 0 && entity.HotelPlacement != null)
			{
				HotelPlacement = new HotelPlacement(entity.HotelPlacement, deep - 1);
			}

			SubHotelTypeId = entity.SubHotelTypeId;
			if (deep > 0 && entity.SubHotelType != null)
			{
				SubHotelType = new HotelType(entity.SubHotelType, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Hotels CreateCopy()
		{
			var res = new Hotels(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (PlaceOfRest != null)
			{
				res.PlaceOfRest = new PlaceOfRest{Id=PlaceOfRest.Id, Eid=PlaceOfRest.Eid};
			}
			if (HotelType != null)
			{
				res.HotelType = new HotelType{Id=HotelType.Id, Eid=HotelType.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (City != null)
			{
				res.City = new City{Id=City.Id, Eid=City.Eid};
			}
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			if (FunctioningType != null)
			{
				res.FunctioningType = new FunctioningType{Id=FunctioningType.Id, Eid=FunctioningType.Eid};
			}
			if (HotelPlacement != null)
			{
				res.HotelPlacement = new HotelPlacement{Id=HotelPlacement.Id, Eid=HotelPlacement.Eid};
			}
			if (SubHotelType != null)
			{
				res.SubHotelType = new HotelType{Id=SubHotelType.Id, Eid=SubHotelType.Eid};
			}
			res.TypeOfRooms = TypeOfRooms?.Select(p=>new TypeOfRooms {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Files = Files?.Select(p=>new FileHotel {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Contacts = Contacts?.Select(p=>new HotelContactPerson {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Accommodation = Accommodation?.Select(p=>new Accommodation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.DiningOptions = DiningOptions?.Select(p=>new DiningOptions {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Prices = Prices?.Select(p=>new RoomRates {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Services = Services?.Select(p=>new AddonServices {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.MatrixOfPrice = MatrixOfPrice?.Select(p=>new HotelPrice {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.PlaceBloks = PlaceBloks?.Select(p=>new HotelBlock {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Hotels entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Address = entity.Address;
			NameOrganization = entity.NameOrganization;
			Phone = entity.Phone;
			Fax = entity.Fax;
			Email = entity.Email;
			Url = entity.Url;
			Head = entity.Head;
			HeadPosition = entity.HeadPosition;
			DrivingDirections = entity.DrivingDirections;
			NumberHousing = entity.NumberHousing;
			Squere = entity.Squere;
			MedicalOfficeAvailability = entity.MedicalOfficeAvailability;
			OutdoorPondAvailability = entity.OutdoorPondAvailability;
			OutdoorPondName = entity.OutdoorPondName;
			PoolAvailability = entity.PoolAvailability;
			SecurityInformation = entity.SecurityInformation;
			ComputerClassAvailability = entity.ComputerClassAvailability;
			CinimaAvailability = entity.CinimaAvailability;
			CinimaTimetable = entity.CinimaTimetable;
			GymAvailability = entity.GymAvailability;
			LibraryAvailability = entity.LibraryAvailability;
			LibraryTimetable = entity.LibraryTimetable;
			AccessibleEnvironment = entity.AccessibleEnvironment;
			TakeChildUp3Years = entity.TakeChildUp3Years;
			OtherLeisure = entity.OtherLeisure;
			ContactPerson = entity.ContactPerson;
			ContactPhone = entity.ContactPhone;
			Description = entity.Description;
			Latitude = entity.Latitude;
			Longitude = entity.Longitude;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			DistanceFromCenter = entity.DistanceFromCenter;
			DistanceFromBeach = entity.DistanceFromBeach;
			EkisId = entity.EkisId;
			EkisNeedSend = entity.EkisNeedSend;
			NotForSite = entity.NotForSite;
			IsLok = entity.IsLok;
			DescriptionHtml = entity.DescriptionHtml;
			IsCamping = entity.IsCamping;
			HistoryLinkId = entity.HistoryLinkId;
			PlaceOfRestId = entity.PlaceOfRestId;
			HotelTypeId = entity.HotelTypeId;
			StateId = entity.StateId;
			CityId = entity.CityId;
			OrganizationId = entity.OrganizationId;
			FunctioningTypeId = entity.FunctioningTypeId;
			HotelPlacementId = entity.HotelPlacementId;
			SubHotelTypeId = entity.SubHotelTypeId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class HotelType : ILastUpdateTick
	{
		public HotelType()
		{
		}

		public HotelType(HotelType entity) : this(entity, null)
		{
		}

		public HotelType(HotelType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			ParentId = entity.ParentId;
			if (deep > 0 && entity.Parent != null)
			{
				Parent = new HotelType(entity.Parent, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public HotelType CreateCopy()
		{
			var res = new HotelType(this);
			if (Parent != null)
			{
				res.Parent = new HotelType{Id=Parent.Id, Eid=Parent.Eid};
			}
			res.Children = Children?.Select(p=>new HotelType {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(HotelType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			ParentId = entity.ParentId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class InteragencyRequest : ILastUpdateTick
	{
		public InteragencyRequest()
		{
		}

		public InteragencyRequest(InteragencyRequest entity) : this(entity, null)
		{
		}

		public InteragencyRequest(InteragencyRequest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			RequestNumber = entity.RequestNumber;
			RequsetDate = entity.RequsetDate;
			AnswerNumber = entity.AnswerNumber;
			AnswerDate = entity.AnswerDate;
			RequestComment = entity.RequestComment;
			AnswerComment = entity.AnswerComment;
			RequestFileUrl = entity.RequestFileUrl;
			AnswerFileUrl = entity.AnswerFileUrl;
			CreateDate = entity.CreateDate;
			IsSecondaryRequest = entity.IsSecondaryRequest;
			ForAllRegion = entity.ForAllRegion;
			StatusInteragencyRequestId = entity.StatusInteragencyRequestId;
			if (deep > 0 && entity.StatusInteragencyRequest != null)
			{
				StatusInteragencyRequest = new StatusInteragencyRequest(entity.StatusInteragencyRequest, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			BtiDistrictId = entity.BtiDistrictId;
			if (deep > 0 && entity.BtiDistrict != null)
			{
				BtiDistrict = new BtiDistrict(entity.BtiDistrict, deep - 1);
			}

			BtiRegionId = entity.BtiRegionId;
			if (deep > 0 && entity.BtiRegion != null)
			{
				BtiRegion = new BtiRegion(entity.BtiRegion, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public InteragencyRequest CreateCopy()
		{
			var res = new InteragencyRequest(this);
			if (StatusInteragencyRequest != null)
			{
				res.StatusInteragencyRequest = new StatusInteragencyRequest{Id=StatusInteragencyRequest.Id, Eid=StatusInteragencyRequest.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			if (BtiDistrict != null)
			{
				res.BtiDistrict = new BtiDistrict{Id=BtiDistrict.Id, Eid=BtiDistrict.Eid};
			}
			if (BtiRegion != null)
			{
				res.BtiRegion = new BtiRegion{Id=BtiRegion.Id, Eid=BtiRegion.Eid};
			}
			return res;
		}

		public void CopyEntity(InteragencyRequest entity)
		{
			Id = entity.Id;
			RequestNumber = entity.RequestNumber;
			RequsetDate = entity.RequsetDate;
			AnswerNumber = entity.AnswerNumber;
			AnswerDate = entity.AnswerDate;
			RequestComment = entity.RequestComment;
			AnswerComment = entity.AnswerComment;
			RequestFileUrl = entity.RequestFileUrl;
			AnswerFileUrl = entity.AnswerFileUrl;
			CreateDate = entity.CreateDate;
			IsSecondaryRequest = entity.IsSecondaryRequest;
			ForAllRegion = entity.ForAllRegion;
			StatusInteragencyRequestId = entity.StatusInteragencyRequestId;
			AccountId = entity.AccountId;
			OrganizationId = entity.OrganizationId;
			BtiDistrictId = entity.BtiDistrictId;
			BtiRegionId = entity.BtiRegionId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class InteragencyRequestBenefitType : ILastUpdateTick
	{
		public InteragencyRequestBenefitType()
		{
		}

		public InteragencyRequestBenefitType(InteragencyRequestBenefitType entity) : this(entity, null)
		{
		}

		public InteragencyRequestBenefitType(InteragencyRequestBenefitType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			BenefitTypeId = entity.BenefitTypeId;
			if (deep > 0 && entity.BenefitType != null)
			{
				BenefitType = new BenefitType(entity.BenefitType, deep - 1);
			}

			InteragencyRequestId = entity.InteragencyRequestId;
			if (deep > 0 && entity.InteragencyRequest != null)
			{
				InteragencyRequest = new InteragencyRequest(entity.InteragencyRequest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public InteragencyRequestBenefitType CreateCopy()
		{
			var res = new InteragencyRequestBenefitType(this);
			if (BenefitType != null)
			{
				res.BenefitType = new BenefitType{Id=BenefitType.Id, Eid=BenefitType.Eid};
			}
			if (InteragencyRequest != null)
			{
				res.InteragencyRequest = new InteragencyRequest{Id=InteragencyRequest.Id, Eid=InteragencyRequest.Eid};
			}
			return res;
		}

		public void CopyEntity(InteragencyRequestBenefitType entity)
		{
			Id = entity.Id;
			BenefitTypeId = entity.BenefitTypeId;
			InteragencyRequestId = entity.InteragencyRequestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class InteragencyRequestResult : ILastUpdateTick
	{
		public InteragencyRequestResult()
		{
		}

		public InteragencyRequestResult(InteragencyRequestResult entity) : this(entity, null)
		{
		}

		public InteragencyRequestResult(InteragencyRequestResult entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Comment = entity.Comment;
			InteragencyRequestId = entity.InteragencyRequestId;
			if (deep > 0 && entity.InteragencyRequest != null)
			{
				InteragencyRequest = new InteragencyRequest(entity.InteragencyRequest, deep - 1);
			}

			ChildId = entity.ChildId;
			if (deep > 0 && entity.Child != null)
			{
				Child = new Child(entity.Child, deep - 1);
			}

			StatusResultId = entity.StatusResultId;
			if (deep > 0 && entity.StatusResult != null)
			{
				StatusResult = new StatusResult(entity.StatusResult, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public InteragencyRequestResult CreateCopy()
		{
			var res = new InteragencyRequestResult(this);
			if (InteragencyRequest != null)
			{
				res.InteragencyRequest = new InteragencyRequest{Id=InteragencyRequest.Id, Eid=InteragencyRequest.Eid};
			}
			if (Child != null)
			{
				res.Child = new Child{Id=Child.Id, Eid=Child.Eid};
			}
			if (StatusResult != null)
			{
				res.StatusResult = new StatusResult{Id=StatusResult.Id, Eid=StatusResult.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			return res;
		}

		public void CopyEntity(InteragencyRequestResult entity)
		{
			Id = entity.Id;
			Comment = entity.Comment;
			InteragencyRequestId = entity.InteragencyRequestId;
			ChildId = entity.ChildId;
			StatusResultId = entity.StatusResultId;
			ApplicantId = entity.ApplicantId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class LimitOnOrganization : ILastUpdateTick
	{
		public LimitOnOrganization()
		{
		}

		public LimitOnOrganization(LimitOnOrganization entity) : this(entity, null)
		{
		}

		public LimitOnOrganization(LimitOnOrganization entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Volume = entity.Volume;
			Approved = entity.Approved;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			LimitOnVedomstvoId = entity.LimitOnVedomstvoId;
			if (deep > 0 && entity.LimitOnVedomstvo != null)
			{
				LimitOnVedomstvo = new LimitOnVedomstvo(entity.LimitOnVedomstvo, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			TimeOfRestId = entity.TimeOfRestId;
			if (deep > 0 && entity.TimeOfRest != null)
			{
				TimeOfRest = new TimeOfRest(entity.TimeOfRest, deep - 1);
			}

			PlaceOfRestId = entity.PlaceOfRestId;
			if (deep > 0 && entity.PlaceOfRest != null)
			{
				PlaceOfRest = new PlaceOfRest(entity.PlaceOfRest, deep - 1);
			}

			TypeOfLimitListId = entity.TypeOfLimitListId;
			if (deep > 0 && entity.TypeOfLimitList != null)
			{
				TypeOfLimitList = new TypeOfLimitList(entity.TypeOfLimitList, deep - 1);
			}

			SignInfoId = entity.SignInfoId;
			if (deep > 0 && entity.SignInfo != null)
			{
				SignInfo = new SignInfo(entity.SignInfo, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public LimitOnOrganization CreateCopy()
		{
			var res = new LimitOnOrganization(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			if (LimitOnVedomstvo != null)
			{
				res.LimitOnVedomstvo = new LimitOnVedomstvo{Id=LimitOnVedomstvo.Id, Eid=LimitOnVedomstvo.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			if (TimeOfRest != null)
			{
				res.TimeOfRest = new TimeOfRest{Id=TimeOfRest.Id, Eid=TimeOfRest.Eid};
			}
			if (PlaceOfRest != null)
			{
				res.PlaceOfRest = new PlaceOfRest{Id=PlaceOfRest.Id, Eid=PlaceOfRest.Eid};
			}
			if (TypeOfLimitList != null)
			{
				res.TypeOfLimitList = new TypeOfLimitList{Id=TypeOfLimitList.Id, Eid=TypeOfLimitList.Eid};
			}
			if (SignInfo != null)
			{
				res.SignInfo = new SignInfo{Id=SignInfo.Id, Eid=SignInfo.Eid};
			}
			return res;
		}

		public void CopyEntity(LimitOnOrganization entity)
		{
			Id = entity.Id;
			Volume = entity.Volume;
			Approved = entity.Approved;
			HistoryLinkId = entity.HistoryLinkId;
			OrganizationId = entity.OrganizationId;
			LimitOnVedomstvoId = entity.LimitOnVedomstvoId;
			StateId = entity.StateId;
			TourId = entity.TourId;
			TimeOfRestId = entity.TimeOfRestId;
			PlaceOfRestId = entity.PlaceOfRestId;
			TypeOfLimitListId = entity.TypeOfLimitListId;
			SignInfoId = entity.SignInfoId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class LimitOnOrganizationRequest : ILastUpdateTick
	{
		public LimitOnOrganizationRequest()
		{
		}

		public LimitOnOrganizationRequest(LimitOnOrganizationRequest entity) : this(entity, null)
		{
		}

		public LimitOnOrganizationRequest(LimitOnOrganizationRequest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Volume = entity.Volume;
			ApprovedVolume = entity.ApprovedVolume;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Comment = entity.Comment;
			Name = entity.Name;
			VolumeAttendant = entity.VolumeAttendant;
			VolumeCounselor = entity.VolumeCounselor;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			LimitOnVedomstvoId = entity.LimitOnVedomstvoId;
			if (deep > 0 && entity.LimitOnVedomstvo != null)
			{
				LimitOnVedomstvo = new LimitOnVedomstvo(entity.LimitOnVedomstvo, deep - 1);
			}

			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			PlaceOfRestId = entity.PlaceOfRestId;
			if (deep > 0 && entity.PlaceOfRest != null)
			{
				PlaceOfRest = new PlaceOfRest(entity.PlaceOfRest, deep - 1);
			}

			GroupedTimeOfRestId = entity.GroupedTimeOfRestId;
			if (deep > 0 && entity.GroupedTimeOfRest != null)
			{
				GroupedTimeOfRest = new GroupedTimeOfRest(entity.GroupedTimeOfRest, deep - 1);
			}

			TimeOfRestId = entity.TimeOfRestId;
			if (deep > 0 && entity.TimeOfRest != null)
			{
				TimeOfRest = new TimeOfRest(entity.TimeOfRest, deep - 1);
			}

			ListOfChildsCategoryId = entity.ListOfChildsCategoryId;
			if (deep > 0 && entity.ListOfChildsCategory != null)
			{
				ListOfChildsCategory = new ListOfChildsCategory(entity.ListOfChildsCategory, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public LimitOnOrganizationRequest CreateCopy()
		{
			var res = new LimitOnOrganizationRequest(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (LimitOnVedomstvo != null)
			{
				res.LimitOnVedomstvo = new LimitOnVedomstvo{Id=LimitOnVedomstvo.Id, Eid=LimitOnVedomstvo.Eid};
			}
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (PlaceOfRest != null)
			{
				res.PlaceOfRest = new PlaceOfRest{Id=PlaceOfRest.Id, Eid=PlaceOfRest.Eid};
			}
			if (GroupedTimeOfRest != null)
			{
				res.GroupedTimeOfRest = new GroupedTimeOfRest{Id=GroupedTimeOfRest.Id, Eid=GroupedTimeOfRest.Eid};
			}
			if (TimeOfRest != null)
			{
				res.TimeOfRest = new TimeOfRest{Id=TimeOfRest.Id, Eid=TimeOfRest.Eid};
			}
			if (ListOfChildsCategory != null)
			{
				res.ListOfChildsCategory = new ListOfChildsCategory{Id=ListOfChildsCategory.Id, Eid=ListOfChildsCategory.Eid};
			}
			return res;
		}

		public void CopyEntity(LimitOnOrganizationRequest entity)
		{
			Id = entity.Id;
			Volume = entity.Volume;
			ApprovedVolume = entity.ApprovedVolume;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Comment = entity.Comment;
			Name = entity.Name;
			VolumeAttendant = entity.VolumeAttendant;
			VolumeCounselor = entity.VolumeCounselor;
			HistoryLinkId = entity.HistoryLinkId;
			LimitOnVedomstvoId = entity.LimitOnVedomstvoId;
			OrganizationId = entity.OrganizationId;
			StateId = entity.StateId;
			PlaceOfRestId = entity.PlaceOfRestId;
			GroupedTimeOfRestId = entity.GroupedTimeOfRestId;
			TimeOfRestId = entity.TimeOfRestId;
			ListOfChildsCategoryId = entity.ListOfChildsCategoryId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class LimitOnVedomstvo : ILastUpdateTick
	{
		public LimitOnVedomstvo()
		{
		}

		public LimitOnVedomstvo(LimitOnVedomstvo entity) : this(entity, null)
		{
		}

		public LimitOnVedomstvo(LimitOnVedomstvo entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			LimitYear = entity.LimitYear;
			Approved = entity.Approved;
			Volume = entity.Volume;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			TypeOfLimitListId = entity.TypeOfLimitListId;
			if (deep > 0 && entity.TypeOfLimitList != null)
			{
				TypeOfLimitList = new TypeOfLimitList(entity.TypeOfLimitList, deep - 1);
			}

			SignInfoId = entity.SignInfoId;
			if (deep > 0 && entity.SignInfo != null)
			{
				SignInfo = new SignInfo(entity.SignInfo, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public LimitOnVedomstvo CreateCopy()
		{
			var res = new LimitOnVedomstvo(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (TypeOfLimitList != null)
			{
				res.TypeOfLimitList = new TypeOfLimitList{Id=TypeOfLimitList.Id, Eid=TypeOfLimitList.Eid};
			}
			if (SignInfo != null)
			{
				res.SignInfo = new SignInfo{Id=SignInfo.Id, Eid=SignInfo.Eid};
			}
			res.VedomstvoLimit = VedomstvoLimit?.Select(p=>new LimitOnOrganization {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.LimitOnOrganizationRequests = LimitOnOrganizationRequests?.Select(p=>new LimitOnOrganizationRequest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(LimitOnVedomstvo entity)
		{
			Id = entity.Id;
			LimitYear = entity.LimitYear;
			Approved = entity.Approved;
			Volume = entity.Volume;
			HistoryLinkId = entity.HistoryLinkId;
			OrganizationId = entity.OrganizationId;
			YearOfRestId = entity.YearOfRestId;
			StateId = entity.StateId;
			TypeOfLimitListId = entity.TypeOfLimitListId;
			SignInfoId = entity.SignInfoId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class LinkToFile : ILastUpdateTick
	{
		public LinkToFile()
		{
		}

		public LinkToFile(LinkToFile entity) : this(entity, null)
		{
		}

		public LinkToFile(LinkToFile entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			HandlerHelper = entity.HandlerHelper;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public LinkToFile CreateCopy()
		{
			var res = new LinkToFile(this);
			res.Files = Files?.Select(p=>new FileOrLink {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(LinkToFile entity)
		{
			Id = entity.Id;
			HandlerHelper = entity.HandlerHelper;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class LinkToPeople : ILastUpdateTick
	{
		public LinkToPeople()
		{
		}

		public LinkToPeople(LinkToPeople entity) : this(entity, null)
		{
		}

		public LinkToPeople(LinkToPeople entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Wagon = entity.Wagon;
			PlaceNumber = entity.PlaceNumber;
			NeedTicket = entity.NeedTicket;
			NotComeInPlaceOfRest = entity.NotComeInPlaceOfRest;
			DateDeparture = entity.DateDeparture;
			DeliveredParents = entity.DeliveredParents;
			TransportId = entity.TransportId;
			if (deep > 0 && entity.Transport != null)
			{
				Transport = new TransportInfo(entity.Transport, deep - 1);
			}

			DirectoryFlightsId = entity.DirectoryFlightsId;
			if (deep > 0 && entity.DirectoryFlights != null)
			{
				DirectoryFlights = new DirectoryFlights(entity.DirectoryFlights, deep - 1);
			}

			PartyId = entity.PartyId;
			if (deep > 0 && entity.Party != null)
			{
				Party = new Party(entity.Party, deep - 1);
			}

			ListOfChildsId = entity.ListOfChildsId;
			if (deep > 0 && entity.ListOfChilds != null)
			{
				ListOfChilds = new ListOfChilds(entity.ListOfChilds, deep - 1);
			}

			AdministratorTourId = entity.AdministratorTourId;
			if (deep > 0 && entity.AdministratorTour != null)
			{
				AdministratorTour = new AdministratorTour(entity.AdministratorTour, deep - 1);
			}

			CounselorsId = entity.CounselorsId;
			if (deep > 0 && entity.Counselors != null)
			{
				Counselors = new Counselors(entity.Counselors, deep - 1);
			}

			ChildId = entity.ChildId;
			if (deep > 0 && entity.Child != null)
			{
				Child = new Child(entity.Child, deep - 1);
			}

			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			TypeOfLinkPeopleId = entity.TypeOfLinkPeopleId;
			if (deep > 0 && entity.TypeOfLinkPeople != null)
			{
				TypeOfLinkPeople = new TypeOfLinkPeople(entity.TypeOfLinkPeople, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			BoutId = entity.BoutId;
			if (deep > 0 && entity.Bout != null)
			{
				Bout = new Bout(entity.Bout, deep - 1);
			}

			NotNeedTicketReasonId = entity.NotNeedTicketReasonId;
			if (deep > 0 && entity.NotNeedTicketReason != null)
			{
				NotNeedTicketReason = new NotNeedTicketReason(entity.NotNeedTicketReason, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public LinkToPeople CreateCopy()
		{
			var res = new LinkToPeople(this);
			if (Transport != null)
			{
				res.Transport = new TransportInfo{Id=Transport.Id, Eid=Transport.Eid};
			}
			if (DirectoryFlights != null)
			{
				res.DirectoryFlights = new DirectoryFlights{Id=DirectoryFlights.Id, Eid=DirectoryFlights.Eid};
			}
			if (Party != null)
			{
				res.Party = new Party{Id=Party.Id, Eid=Party.Eid};
			}
			if (ListOfChilds != null)
			{
				res.ListOfChilds = new ListOfChilds{Id=ListOfChilds.Id, Eid=ListOfChilds.Eid};
			}
			if (AdministratorTour != null)
			{
				res.AdministratorTour = new AdministratorTour{Id=AdministratorTour.Id, Eid=AdministratorTour.Eid};
			}
			if (Counselors != null)
			{
				res.Counselors = new Counselors{Id=Counselors.Id, Eid=Counselors.Eid};
			}
			if (Child != null)
			{
				res.Child = new Child{Id=Child.Id, Eid=Child.Eid};
			}
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (TypeOfLinkPeople != null)
			{
				res.TypeOfLinkPeople = new TypeOfLinkPeople{Id=TypeOfLinkPeople.Id, Eid=TypeOfLinkPeople.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			if (Bout != null)
			{
				res.Bout = new Bout{Id=Bout.Id, Eid=Bout.Eid};
			}
			if (NotNeedTicketReason != null)
			{
				res.NotNeedTicketReason = new NotNeedTicketReason{Id=NotNeedTicketReason.Id, Eid=NotNeedTicketReason.Eid};
			}
			return res;
		}

		public void CopyEntity(LinkToPeople entity)
		{
			Id = entity.Id;
			Wagon = entity.Wagon;
			PlaceNumber = entity.PlaceNumber;
			NeedTicket = entity.NeedTicket;
			NotComeInPlaceOfRest = entity.NotComeInPlaceOfRest;
			DateDeparture = entity.DateDeparture;
			DeliveredParents = entity.DeliveredParents;
			TransportId = entity.TransportId;
			DirectoryFlightsId = entity.DirectoryFlightsId;
			PartyId = entity.PartyId;
			ListOfChildsId = entity.ListOfChildsId;
			AdministratorTourId = entity.AdministratorTourId;
			CounselorsId = entity.CounselorsId;
			ChildId = entity.ChildId;
			RequestId = entity.RequestId;
			TypeOfLinkPeopleId = entity.TypeOfLinkPeopleId;
			ApplicantId = entity.ApplicantId;
			BoutId = entity.BoutId;
			NotNeedTicketReasonId = entity.NotNeedTicketReasonId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ListOfChilds : ILastUpdateTick
	{
		public ListOfChilds()
		{
		}

		public ListOfChilds(ListOfChilds entity) : this(entity, null)
		{
		}

		public ListOfChilds(ListOfChilds entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			IsLast = entity.IsLast;
			IsDeleted = entity.IsDeleted;
			DateChange = entity.DateChange;
			Name = entity.Name;
			CountChild = entity.CountChild;
			CountAttendants = entity.CountAttendants;
			CertificateNumber = entity.CertificateNumber;
			Responsible = entity.Responsible;
			ResponsiblePhone = entity.ResponsiblePhone;
			ForIndex = entity.ForIndex;
			RulesAgreement = entity.RulesAgreement;
			PupilsRulesAgreement = entity.PupilsRulesAgreement;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			LimitOnOrganizationId = entity.LimitOnOrganizationId;
			if (deep > 0 && entity.LimitOnOrganization != null)
			{
				LimitOnOrganization = new LimitOnOrganization(entity.LimitOnOrganization, deep - 1);
			}

			TimeOfRestId = entity.TimeOfRestId;
			if (deep > 0 && entity.TimeOfRest != null)
			{
				TimeOfRest = new TimeOfRest(entity.TimeOfRest, deep - 1);
			}

			PlaceOfRestId = entity.PlaceOfRestId;
			if (deep > 0 && entity.PlaceOfRest != null)
			{
				PlaceOfRest = new PlaceOfRest(entity.PlaceOfRest, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			ListOfChildsCategoryId = entity.ListOfChildsCategoryId;
			if (deep > 0 && entity.ListOfChildsCategory != null)
			{
				ListOfChildsCategory = new ListOfChildsCategory(entity.ListOfChildsCategory, deep - 1);
			}

			TypeOfLimitListId = entity.TypeOfLimitListId;
			if (deep > 0 && entity.TypeOfLimitList != null)
			{
				TypeOfLimitList = new TypeOfLimitList(entity.TypeOfLimitList, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ListOfChilds CreateCopy()
		{
			var res = new ListOfChilds(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (LimitOnOrganization != null)
			{
				res.LimitOnOrganization = new LimitOnOrganization{Id=LimitOnOrganization.Id, Eid=LimitOnOrganization.Eid};
			}
			if (TimeOfRest != null)
			{
				res.TimeOfRest = new TimeOfRest{Id=TimeOfRest.Id, Eid=TimeOfRest.Eid};
			}
			if (PlaceOfRest != null)
			{
				res.PlaceOfRest = new PlaceOfRest{Id=PlaceOfRest.Id, Eid=PlaceOfRest.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			if (ListOfChildsCategory != null)
			{
				res.ListOfChildsCategory = new ListOfChildsCategory{Id=ListOfChildsCategory.Id, Eid=ListOfChildsCategory.Eid};
			}
			if (TypeOfLimitList != null)
			{
				res.TypeOfLimitList = new TypeOfLimitList{Id=TypeOfLimitList.Id, Eid=TypeOfLimitList.Eid};
			}
			res.Childs = Childs?.Select(p=>new Child {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Attendants = Attendants?.Select(p=>new Applicant {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Requests = Requests?.Select(p=>new Request {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.PupilGroupRequest = PupilGroupRequest?.Select(p=>new RequestForPeriodOfRest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.GroupPupils = GroupPupils?.Select(p=>new PupilGroupListMember {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.GroupCollaborators = GroupCollaborators?.Select(p=>new PupilGroupListCollaborator {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.GroupTransfers = GroupTransfers?.Select(p=>new PupilGroupListTransfer {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(ListOfChilds entity)
		{
			Id = entity.Id;
			IsLast = entity.IsLast;
			IsDeleted = entity.IsDeleted;
			DateChange = entity.DateChange;
			Name = entity.Name;
			CountChild = entity.CountChild;
			CountAttendants = entity.CountAttendants;
			CertificateNumber = entity.CertificateNumber;
			Responsible = entity.Responsible;
			ResponsiblePhone = entity.ResponsiblePhone;
			ForIndex = entity.ForIndex;
			RulesAgreement = entity.RulesAgreement;
			PupilsRulesAgreement = entity.PupilsRulesAgreement;
			HistoryLinkId = entity.HistoryLinkId;
			LimitOnOrganizationId = entity.LimitOnOrganizationId;
			TimeOfRestId = entity.TimeOfRestId;
			PlaceOfRestId = entity.PlaceOfRestId;
			StateId = entity.StateId;
			TourId = entity.TourId;
			ListOfChildsCategoryId = entity.ListOfChildsCategoryId;
			TypeOfLimitListId = entity.TypeOfLimitListId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ListOfChildsCategory : ILastUpdateTick
	{
		public ListOfChildsCategory()
		{
		}

		public ListOfChildsCategory(ListOfChildsCategory entity) : this(entity, null)
		{
		}

		public ListOfChildsCategory(ListOfChildsCategory entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ListOfChildsCategory CreateCopy()
		{
			var res = new ListOfChildsCategory(this);
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			return res;
		}

		public void CopyEntity(ListOfChildsCategory entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			OrganizationId = entity.OrganizationId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ListTravelers : ILastUpdateTick
	{
		public ListTravelers()
		{
		}

		public ListTravelers(ListTravelers entity) : this(entity, null)
		{
		}

		public ListTravelers(ListTravelers entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			SignNumber = entity.SignNumber;
			SignDate = entity.SignDate;
			Name = entity.Name;
			Point = entity.Point;
			Limit = entity.Limit;
			StateMachineStateId = entity.StateMachineStateId;
			if (deep > 0 && entity.StateMachineState != null)
			{
				StateMachineState = new StateMachineState(entity.StateMachineState, deep - 1);
			}

			TypeOfRestId = entity.TypeOfRestId;
			if (deep > 0 && entity.TypeOfRest != null)
			{
				TypeOfRest = new TypeOfRest(entity.TypeOfRest, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			LinkToFileId = entity.LinkToFileId;
			if (deep > 0 && entity.LinkToFile != null)
			{
				LinkToFile = new LinkToFile(entity.LinkToFile, deep - 1);
			}

			ParentId = entity.ParentId;
			if (deep > 0 && entity.Parent != null)
			{
				Parent = new ListTravelers(entity.Parent, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ListTravelers CreateCopy()
		{
			var res = new ListTravelers(this);
			if (StateMachineState != null)
			{
				res.StateMachineState = new StateMachineState{Id=StateMachineState.Id, Eid=StateMachineState.Eid};
			}
			if (TypeOfRest != null)
			{
				res.TypeOfRest = new TypeOfRest{Id=TypeOfRest.Id, Eid=TypeOfRest.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (LinkToFile != null)
			{
				res.LinkToFile = new LinkToFile{Id=LinkToFile.Id, Eid=LinkToFile.Eid};
			}
			if (Parent != null)
			{
				res.Parent = new ListTravelers{Id=Parent.Id, Eid=Parent.Eid};
			}
			res.Requests = Requests?.Select(p=>new ListTravelersRequest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Children = Children?.Select(p=>new ListTravelers {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(ListTravelers entity)
		{
			Id = entity.Id;
			SignNumber = entity.SignNumber;
			SignDate = entity.SignDate;
			Name = entity.Name;
			Point = entity.Point;
			Limit = entity.Limit;
			StateMachineStateId = entity.StateMachineStateId;
			TypeOfRestId = entity.TypeOfRestId;
			YearOfRestId = entity.YearOfRestId;
			HistoryLinkId = entity.HistoryLinkId;
			LinkToFileId = entity.LinkToFileId;
			ParentId = entity.ParentId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ListTravelersRequest : ILastUpdateTick
	{
		public ListTravelersRequest()
		{
		}

		public ListTravelersRequest(ListTravelersRequest entity) : this(entity, null)
		{
		}

		public ListTravelersRequest(ListTravelersRequest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			IsIncluded = entity.IsIncluded;
			DateInclude = entity.DateInclude;
			Rank = entity.Rank;
			DateRequest = entity.DateRequest;
			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			ListTravelersId = entity.ListTravelersId;
			if (deep > 0 && entity.ListTravelers != null)
			{
				ListTravelers = new ListTravelers(entity.ListTravelers, deep - 1);
			}

			StateMachineStateId = entity.StateMachineStateId;
			if (deep > 0 && entity.StateMachineState != null)
			{
				StateMachineState = new StateMachineState(entity.StateMachineState, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ListTravelersRequest CreateCopy()
		{
			var res = new ListTravelersRequest(this);
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (ListTravelers != null)
			{
				res.ListTravelers = new ListTravelers{Id=ListTravelers.Id, Eid=ListTravelers.Eid};
			}
			if (StateMachineState != null)
			{
				res.StateMachineState = new StateMachineState{Id=StateMachineState.Id, Eid=StateMachineState.Eid};
			}
			res.Details = Details?.Select(p=>new ListTravelersRequestDetail {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(ListTravelersRequest entity)
		{
			Id = entity.Id;
			IsIncluded = entity.IsIncluded;
			DateInclude = entity.DateInclude;
			Rank = entity.Rank;
			DateRequest = entity.DateRequest;
			RequestId = entity.RequestId;
			ListTravelersId = entity.ListTravelersId;
			StateMachineStateId = entity.StateMachineStateId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ListTravelersRequestDetail : ILastUpdateTick
	{
		public ListTravelersRequestDetail()
		{
		}

		public ListTravelersRequestDetail(ListTravelersRequestDetail entity) : this(entity, null)
		{
		}

		public ListTravelersRequestDetail(ListTravelersRequestDetail entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Detail = entity.Detail;
			ListTravelersRequestId = entity.ListTravelersRequestId;
			if (deep > 0 && entity.ListTravelersRequest != null)
			{
				ListTravelersRequest = new ListTravelersRequest(entity.ListTravelersRequest, deep - 1);
			}

			ChildId = entity.ChildId;
			if (deep > 0 && entity.Child != null)
			{
				Child = new Child(entity.Child, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ListTravelersRequestDetail CreateCopy()
		{
			var res = new ListTravelersRequestDetail(this);
			if (ListTravelersRequest != null)
			{
				res.ListTravelersRequest = new ListTravelersRequest{Id=ListTravelersRequest.Id, Eid=ListTravelersRequest.Eid};
			}
			if (Child != null)
			{
				res.Child = new Child{Id=Child.Id, Eid=Child.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			return res;
		}

		public void CopyEntity(ListTravelersRequestDetail entity)
		{
			Id = entity.Id;
			Detail = entity.Detail;
			ListTravelersRequestId = entity.ListTravelersRequestId;
			ChildId = entity.ChildId;
			ApplicantId = entity.ApplicantId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MatrialStatus : ILastUpdateTick
	{
		public MatrialStatus()
		{
		}

		public MatrialStatus(MatrialStatus entity) : this(entity, null)
		{
		}

		public MatrialStatus(MatrialStatus entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MatrialStatus CreateCopy()
		{
			var res = new MatrialStatus(this);
			return res;
		}

		public void CopyEntity(MatrialStatus entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MGTBookingVisit : ILastUpdateTick
	{
		public MGTBookingVisit()
		{
		}

		public MGTBookingVisit(MGTBookingVisit entity) : this(entity, null)
		{
		}

		public MGTBookingVisit(MGTBookingVisit entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			VisitCell = entity.VisitCell;
			PINCode = entity.PINCode;
			MPGURegNum = entity.MPGURegNum;
			ServiceNumber = entity.ServiceNumber;
			MPGURegDate = entity.MPGURegDate;
			StatusId = entity.StatusId;
			if (deep > 0 && entity.Status != null)
			{
				Status = new MGTVisitBookingStatus(entity.Status, deep - 1);
			}

			WorkingDayId = entity.WorkingDayId;
			if (deep > 0 && entity.WorkingDay != null)
			{
				WorkingDay = new MGTWorkingDay(entity.WorkingDay, deep - 1);
			}

			TargetId = entity.TargetId;
			if (deep > 0 && entity.Target != null)
			{
				Target = new MGTVisitTarget(entity.Target, deep - 1);
			}

			ParrentId = entity.ParrentId;
			if (deep > 0 && entity.Parrent != null)
			{
				Parrent = new MGTBookingVisit(entity.Parrent, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MGTBookingVisit CreateCopy()
		{
			var res = new MGTBookingVisit(this);
			if (Status != null)
			{
				res.Status = new MGTVisitBookingStatus{Id=Status.Id, Eid=Status.Eid};
			}
			if (WorkingDay != null)
			{
				res.WorkingDay = new MGTWorkingDay{Id=WorkingDay.Id, Eid=WorkingDay.Eid};
			}
			if (Target != null)
			{
				res.Target = new MGTVisitTarget{Id=Target.Id, Eid=Target.Eid};
			}
			if (Parrent != null)
			{
				res.Parrent = new MGTBookingVisit{Id=Parrent.Id, Eid=Parrent.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			res.Children = Children?.Select(p=>new MGTBookingVisit {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Persons = Persons?.Select(p=>new MGTVisitBookingPerson {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MGTBookingVisit entity)
		{
			Id = entity.Id;
			VisitCell = entity.VisitCell;
			PINCode = entity.PINCode;
			MPGURegNum = entity.MPGURegNum;
			ServiceNumber = entity.ServiceNumber;
			MPGURegDate = entity.MPGURegDate;
			StatusId = entity.StatusId;
			WorkingDayId = entity.WorkingDayId;
			TargetId = entity.TargetId;
			ParrentId = entity.ParrentId;
			HistoryLinkId = entity.HistoryLinkId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MGTVisitBookingMPGUStatus : ILastUpdateTick
	{
		public MGTVisitBookingMPGUStatus()
		{
		}

		public MGTVisitBookingMPGUStatus(MGTVisitBookingMPGUStatus entity) : this(entity, null)
		{
		}

		public MGTVisitBookingMPGUStatus(MGTVisitBookingMPGUStatus entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Parent = entity.Parent;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MGTVisitBookingMPGUStatus CreateCopy()
		{
			var res = new MGTVisitBookingMPGUStatus(this);
			return res;
		}

		public void CopyEntity(MGTVisitBookingMPGUStatus entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Parent = entity.Parent;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MGTVisitBookingMPGUStatusModel : ILastUpdateTick
	{
		public MGTVisitBookingMPGUStatusModel()
		{
		}

		public MGTVisitBookingMPGUStatusModel(MGTVisitBookingMPGUStatusModel entity) : this(entity, null)
		{
		}

		public MGTVisitBookingMPGUStatusModel(MGTVisitBookingMPGUStatusModel entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Order = entity.Order;
			StatusFromId = entity.StatusFromId;
			if (deep > 0 && entity.StatusFrom != null)
			{
				StatusFrom = new MGTVisitBookingStatus(entity.StatusFrom, deep - 1);
			}

			StatusToId = entity.StatusToId;
			if (deep > 0 && entity.StatusTo != null)
			{
				StatusTo = new MGTVisitBookingStatus(entity.StatusTo, deep - 1);
			}

			MPGUStatusId = entity.MPGUStatusId;
			if (deep > 0 && entity.MPGUStatus != null)
			{
				MPGUStatus = new MGTVisitBookingMPGUStatus(entity.MPGUStatus, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MGTVisitBookingMPGUStatusModel CreateCopy()
		{
			var res = new MGTVisitBookingMPGUStatusModel(this);
			if (StatusFrom != null)
			{
				res.StatusFrom = new MGTVisitBookingStatus{Id=StatusFrom.Id, Eid=StatusFrom.Eid};
			}
			if (StatusTo != null)
			{
				res.StatusTo = new MGTVisitBookingStatus{Id=StatusTo.Id, Eid=StatusTo.Eid};
			}
			if (MPGUStatus != null)
			{
				res.MPGUStatus = new MGTVisitBookingMPGUStatus{Id=MPGUStatus.Id, Eid=MPGUStatus.Eid};
			}
			return res;
		}

		public void CopyEntity(MGTVisitBookingMPGUStatusModel entity)
		{
			Id = entity.Id;
			Order = entity.Order;
			StatusFromId = entity.StatusFromId;
			StatusToId = entity.StatusToId;
			MPGUStatusId = entity.MPGUStatusId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MGTVisitBookingPerson : ILastUpdateTick
	{
		public MGTVisitBookingPerson()
		{
		}

		public MGTVisitBookingPerson(MGTVisitBookingPerson entity) : this(entity, null)
		{
		}

		public MGTVisitBookingPerson(MGTVisitBookingPerson entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			TypePerson = entity.TypePerson;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			Male = entity.Male;
			DateOfBirth = entity.DateOfBirth;
			Phone = entity.Phone;
			Snils = entity.Snils;
			Email = entity.Email;
			Benefit = entity.Benefit;
			VisitBookingId = entity.VisitBookingId;
			if (deep > 0 && entity.VisitBooking != null)
			{
				VisitBooking = new MGTBookingVisit(entity.VisitBooking, deep - 1);
			}

			PersonTypeId = entity.PersonTypeId;
			if (deep > 0 && entity.PersonType != null)
			{
				PersonType = new MGTVisitBookingPersonType(entity.PersonType, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MGTVisitBookingPerson CreateCopy()
		{
			var res = new MGTVisitBookingPerson(this);
			if (VisitBooking != null)
			{
				res.VisitBooking = new MGTBookingVisit{Id=VisitBooking.Id, Eid=VisitBooking.Eid};
			}
			if (PersonType != null)
			{
				res.PersonType = new MGTVisitBookingPersonType{Id=PersonType.Id, Eid=PersonType.Eid};
			}
			return res;
		}

		public void CopyEntity(MGTVisitBookingPerson entity)
		{
			Id = entity.Id;
			TypePerson = entity.TypePerson;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			Male = entity.Male;
			DateOfBirth = entity.DateOfBirth;
			Phone = entity.Phone;
			Snils = entity.Snils;
			Email = entity.Email;
			Benefit = entity.Benefit;
			VisitBookingId = entity.VisitBookingId;
			PersonTypeId = entity.PersonTypeId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MGTVisitBookingPersonType : ILastUpdateTick
	{
		public MGTVisitBookingPersonType()
		{
		}

		public MGTVisitBookingPersonType(MGTVisitBookingPersonType entity) : this(entity, null)
		{
		}

		public MGTVisitBookingPersonType(MGTVisitBookingPersonType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Code = entity.Code;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MGTVisitBookingPersonType CreateCopy()
		{
			var res = new MGTVisitBookingPersonType(this);
			res.Persons = Persons?.Select(p=>new MGTVisitBookingPerson {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MGTVisitBookingPersonType entity)
		{
			Id = entity.Id;
			Code = entity.Code;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MGTVisitBookingStatus : ILastUpdateTick
	{
		public MGTVisitBookingStatus()
		{
		}

		public MGTVisitBookingStatus(MGTVisitBookingStatus entity) : this(entity, null)
		{
		}

		public MGTVisitBookingStatus(MGTVisitBookingStatus entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			MGTCode = entity.MGTCode;
			Name = entity.Name;
			Description = entity.Description;
			ParrentId = entity.ParrentId;
			if (deep > 0 && entity.Parrent != null)
			{
				Parrent = new MGTVisitBookingStatus(entity.Parrent, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MGTVisitBookingStatus CreateCopy()
		{
			var res = new MGTVisitBookingStatus(this);
			if (Parrent != null)
			{
				res.Parrent = new MGTVisitBookingStatus{Id=Parrent.Id, Eid=Parrent.Eid};
			}
			return res;
		}

		public void CopyEntity(MGTVisitBookingStatus entity)
		{
			Id = entity.Id;
			MGTCode = entity.MGTCode;
			Name = entity.Name;
			Description = entity.Description;
			ParrentId = entity.ParrentId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MGTVisitTarget : ILastUpdateTick
	{
		public MGTVisitTarget()
		{
		}

		public MGTVisitTarget(MGTVisitTarget entity) : this(entity, null)
		{
		}

		public MGTVisitTarget(MGTVisitTarget entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			Description = entity.Description;
			IsForMPGU = entity.IsForMPGU;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MGTVisitTarget CreateCopy()
		{
			var res = new MGTVisitTarget(this);
			res.Window = Window?.Select(p=>new MGTWorkingDayWindow {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MGTVisitTarget entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			Description = entity.Description;
			IsForMPGU = entity.IsForMPGU;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MGTWindowWorkingPeriod : ILastUpdateTick
	{
		public MGTWindowWorkingPeriod()
		{
		}

		public MGTWindowWorkingPeriod(MGTWindowWorkingPeriod entity) : this(entity, null)
		{
		}

		public MGTWindowWorkingPeriod(MGTWindowWorkingPeriod entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			TimeFrom = entity.TimeFrom;
			TimeTo = entity.TimeTo;
			WindowId = entity.WindowId;
			if (deep > 0 && entity.Window != null)
			{
				Window = new MGTWorkingDayWindow(entity.Window, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MGTWindowWorkingPeriod CreateCopy()
		{
			var res = new MGTWindowWorkingPeriod(this);
			if (Window != null)
			{
				res.Window = new MGTWorkingDayWindow{Id=Window.Id, Eid=Window.Eid};
			}
			return res;
		}

		public void CopyEntity(MGTWindowWorkingPeriod entity)
		{
			Id = entity.Id;
			TimeFrom = entity.TimeFrom;
			TimeTo = entity.TimeTo;
			WindowId = entity.WindowId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MGTWorkingDay : ILastUpdateTick
	{
		public MGTWorkingDay()
		{
		}

		public MGTWorkingDay(MGTWorkingDay entity) : this(entity, null)
		{
		}

		public MGTWorkingDay(MGTWorkingDay entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Date = entity.Date;
			WorkingInterval = entity.WorkingInterval;
			IsDeleted = entity.IsDeleted;
			SuoVisitTooEarly = entity.SuoVisitTooEarly;
			SuoVisitTooLate = entity.SuoVisitTooLate;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
			WindowCount = entity.WindowCount;
			BookingCount = entity.BookingCount;
			BookingMaximum = entity.BookingMaximum;
			BeginTime = entity.BeginTime;
			EndTime = entity.EndTime;
		}

		public MGTWorkingDay CreateCopy()
		{
			var res = new MGTWorkingDay(this);
			res.Windows = Windows?.Select(p=>new MGTWorkingDayWindow {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.VisitBookings = VisitBookings?.Select(p=>new MGTBookingVisit {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.WorkingDayHistory = WorkingDayHistory?.Select(p=>new MGTWorkingDaysHistory {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MGTWorkingDay entity)
		{
			Id = entity.Id;
			Date = entity.Date;
			WorkingInterval = entity.WorkingInterval;
			IsDeleted = entity.IsDeleted;
			SuoVisitTooEarly = entity.SuoVisitTooEarly;
			SuoVisitTooLate = entity.SuoVisitTooLate;
			LastUpdateTick = entity.LastUpdateTick;
			WindowCount = entity.WindowCount;
			BookingCount = entity.BookingCount;
			BookingMaximum = entity.BookingMaximum;
			BeginTime = entity.BeginTime;
			EndTime = entity.EndTime;
		}
	}
	public partial class MGTWorkingDaysHistory : ILastUpdateTick
	{
		public MGTWorkingDaysHistory()
		{
		}

		public MGTWorkingDaysHistory(MGTWorkingDaysHistory entity) : this(entity, null)
		{
		}

		public MGTWorkingDaysHistory(MGTWorkingDaysHistory entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			EventName = entity.EventName;
			EventDescription = entity.EventDescription;
			EventDate = entity.EventDate;
			WorkingDayId = entity.WorkingDayId;
			if (deep > 0 && entity.WorkingDay != null)
			{
				WorkingDay = new MGTWorkingDay(entity.WorkingDay, deep - 1);
			}

			AuthorId = entity.AuthorId;
			if (deep > 0 && entity.Author != null)
			{
				Author = new Account(entity.Author, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MGTWorkingDaysHistory CreateCopy()
		{
			var res = new MGTWorkingDaysHistory(this);
			if (WorkingDay != null)
			{
				res.WorkingDay = new MGTWorkingDay{Id=WorkingDay.Id, Eid=WorkingDay.Eid};
			}
			if (Author != null)
			{
				res.Author = new Account{Id=Author.Id, Eid=Author.Eid};
			}
			return res;
		}

		public void CopyEntity(MGTWorkingDaysHistory entity)
		{
			Id = entity.Id;
			EventName = entity.EventName;
			EventDescription = entity.EventDescription;
			EventDate = entity.EventDate;
			WorkingDayId = entity.WorkingDayId;
			AuthorId = entity.AuthorId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MGTWorkingDayWindow : ILastUpdateTick
	{
		public MGTWorkingDayWindow()
		{
		}

		public MGTWorkingDayWindow(MGTWorkingDayWindow entity) : this(entity, null)
		{
		}

		public MGTWorkingDayWindow(MGTWorkingDayWindow entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			IsCanceled = entity.IsCanceled;
			WindowNumber = entity.WindowNumber;
			WorkingDayId = entity.WorkingDayId;
			if (deep > 0 && entity.WorkingDay != null)
			{
				WorkingDay = new MGTWorkingDay(entity.WorkingDay, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MGTWorkingDayWindow CreateCopy()
		{
			var res = new MGTWorkingDayWindow(this);
			if (WorkingDay != null)
			{
				res.WorkingDay = new MGTWorkingDay{Id=WorkingDay.Id, Eid=WorkingDay.Eid};
			}
			res.WorkingPeriods = WorkingPeriods?.Select(p=>new MGTWindowWorkingPeriod {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Targets = Targets?.Select(p=>new MGTVisitTarget {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MGTWorkingDayWindow entity)
		{
			Id = entity.Id;
			IsCanceled = entity.IsCanceled;
			WindowNumber = entity.WindowNumber;
			WorkingDayId = entity.WorkingDayId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MilitaryDuty : ILastUpdateTick
	{
		public MilitaryDuty()
		{
		}

		public MilitaryDuty(MilitaryDuty entity) : this(entity, null)
		{
		}

		public MilitaryDuty(MilitaryDuty entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MilitaryDuty CreateCopy()
		{
			var res = new MilitaryDuty(this);
			return res;
		}

		public void CopyEntity(MilitaryDuty entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MonitoringChildrenNumberInformation : ILastUpdateTick
	{
		public MonitoringChildrenNumberInformation()
		{
		}

		public MonitoringChildrenNumberInformation(MonitoringChildrenNumberInformation entity) : this(entity, null)
		{
		}

		public MonitoringChildrenNumberInformation(MonitoringChildrenNumberInformation entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			OrganisationId = entity.OrganisationId;
			if (deep > 0 && entity.Organisation != null)
			{
				Organisation = new Organization(entity.Organisation, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			LinkToFilesId = entity.LinkToFilesId;
			if (deep > 0 && entity.LinkToFiles != null)
			{
				LinkToFiles = new LinkToFile(entity.LinkToFiles, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MonitoringChildrenNumberInformation CreateCopy()
		{
			var res = new MonitoringChildrenNumberInformation(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (Organisation != null)
			{
				res.Organisation = new Organization{Id=Organisation.Id, Eid=Organisation.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (LinkToFiles != null)
			{
				res.LinkToFiles = new LinkToFile{Id=LinkToFiles.Id, Eid=LinkToFiles.Eid};
			}
			res.HotelDatas = HotelDatas?.Select(p=>new MonitoringHotelData {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MonitoringChildrenNumberInformation entity)
		{
			Id = entity.Id;
			HistoryLinkId = entity.HistoryLinkId;
			StateId = entity.StateId;
			OrganisationId = entity.OrganisationId;
			YearOfRestId = entity.YearOfRestId;
			LinkToFilesId = entity.LinkToFilesId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MonitoringFinancialData : ILastUpdateTick
	{
		public MonitoringFinancialData()
		{
		}

		public MonitoringFinancialData(MonitoringFinancialData entity) : this(entity, null)
		{
		}

		public MonitoringFinancialData(MonitoringFinancialData entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Plan = entity.Plan;
			Jan = entity.Jan;
			Feb = entity.Feb;
			Mar = entity.Mar;
			Apr = entity.Apr;
			May = entity.May;
			Jun = entity.Jun;
			Jul = entity.Jul;
			Aug = entity.Aug;
			Sep = entity.Sep;
			Oct = entity.Oct;
			Nov = entity.Nov;
			Dec = entity.Dec;
			Comment = entity.Comment;
			Formula = entity.Formula;
			FinanceInformationId = entity.FinanceInformationId;
			if (deep > 0 && entity.FinanceInformation != null)
			{
				FinanceInformation = new MonitoringFinancialInformation(entity.FinanceInformation, deep - 1);
			}

			MonitoringFinancialSourceId = entity.MonitoringFinancialSourceId;
			if (deep > 0 && entity.MonitoringFinancialSource != null)
			{
				MonitoringFinancialSource = new MonitoringFinancialSource(entity.MonitoringFinancialSource, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MonitoringFinancialData CreateCopy()
		{
			var res = new MonitoringFinancialData(this);
			if (FinanceInformation != null)
			{
				res.FinanceInformation = new MonitoringFinancialInformation{Id=FinanceInformation.Id, Eid=FinanceInformation.Eid};
			}
			if (MonitoringFinancialSource != null)
			{
				res.MonitoringFinancialSource = new MonitoringFinancialSource{Id=MonitoringFinancialSource.Id, Eid=MonitoringFinancialSource.Eid};
			}
			return res;
		}

		public void CopyEntity(MonitoringFinancialData entity)
		{
			Id = entity.Id;
			Plan = entity.Plan;
			Jan = entity.Jan;
			Feb = entity.Feb;
			Mar = entity.Mar;
			Apr = entity.Apr;
			May = entity.May;
			Jun = entity.Jun;
			Jul = entity.Jul;
			Aug = entity.Aug;
			Sep = entity.Sep;
			Oct = entity.Oct;
			Nov = entity.Nov;
			Dec = entity.Dec;
			Comment = entity.Comment;
			Formula = entity.Formula;
			FinanceInformationId = entity.FinanceInformationId;
			MonitoringFinancialSourceId = entity.MonitoringFinancialSourceId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MonitoringFinancialInformation : ILastUpdateTick
	{
		public MonitoringFinancialInformation()
		{
		}

		public MonitoringFinancialInformation(MonitoringFinancialInformation entity) : this(entity, null)
		{
		}

		public MonitoringFinancialInformation(MonitoringFinancialInformation entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			OrganisationId = entity.OrganisationId;
			if (deep > 0 && entity.Organisation != null)
			{
				Organisation = new Organization(entity.Organisation, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			LinkToFilesId = entity.LinkToFilesId;
			if (deep > 0 && entity.LinkToFiles != null)
			{
				LinkToFiles = new LinkToFile(entity.LinkToFiles, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MonitoringFinancialInformation CreateCopy()
		{
			var res = new MonitoringFinancialInformation(this);
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (Organisation != null)
			{
				res.Organisation = new Organization{Id=Organisation.Id, Eid=Organisation.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (LinkToFiles != null)
			{
				res.LinkToFiles = new LinkToFile{Id=LinkToFiles.Id, Eid=LinkToFiles.Eid};
			}
			res.FinantialDatas = FinantialDatas?.Select(p=>new MonitoringFinancialData {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MonitoringFinancialInformation entity)
		{
			Id = entity.Id;
			StateId = entity.StateId;
			OrganisationId = entity.OrganisationId;
			HistoryLinkId = entity.HistoryLinkId;
			YearOfRestId = entity.YearOfRestId;
			LinkToFilesId = entity.LinkToFilesId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MonitoringFinancialSource : ILastUpdateTick
	{
		public MonitoringFinancialSource()
		{
		}

		public MonitoringFinancialSource(MonitoringFinancialSource entity) : this(entity, null)
		{
		}

		public MonitoringFinancialSource(MonitoringFinancialSource entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			Code = entity.Code;
			ShowInForm = entity.ShowInForm;
			ParrentId = entity.ParrentId;
			if (deep > 0 && entity.Parrent != null)
			{
				Parrent = new MonitoringFinancialSource(entity.Parrent, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MonitoringFinancialSource CreateCopy()
		{
			var res = new MonitoringFinancialSource(this);
			if (Parrent != null)
			{
				res.Parrent = new MonitoringFinancialSource{Id=Parrent.Id, Eid=Parrent.Eid};
			}
			res.MonitoringFinancialDatas = MonitoringFinancialDatas?.Select(p=>new MonitoringFinancialData {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Children = Children?.Select(p=>new MonitoringFinancialSource {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MonitoringFinancialSource entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			Code = entity.Code;
			ShowInForm = entity.ShowInForm;
			ParrentId = entity.ParrentId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MonitoringGBU : ILastUpdateTick
	{
		public MonitoringGBU()
		{
		}

		public MonitoringGBU(MonitoringGBU entity) : this(entity, null)
		{
		}

		public MonitoringGBU(MonitoringGBU entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			ShortName = entity.ShortName;
			FullName = entity.FullName;
			FactAddress = entity.FactAddress;
			AddressId = entity.AddressId;
			if (deep > 0 && entity.Address != null)
			{
				Address = new Address(entity.Address, deep - 1);
			}

			OrganisationId = entity.OrganisationId;
			if (deep > 0 && entity.Organisation != null)
			{
				Organisation = new Organization(entity.Organisation, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MonitoringGBU CreateCopy()
		{
			var res = new MonitoringGBU(this);
			if (Address != null)
			{
				res.Address = new Address{Id=Address.Id, Eid=Address.Eid};
			}
			if (Organisation != null)
			{
				res.Organisation = new Organization{Id=Organisation.Id, Eid=Organisation.Eid};
			}
			res.SmallLeisureInfoConnectedGBUs = SmallLeisureInfoConnectedGBUs?.Select(p=>new MonitoringSmallLeisureInfoGBU {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MonitoringGBU entity)
		{
			Id = entity.Id;
			ShortName = entity.ShortName;
			FullName = entity.FullName;
			FactAddress = entity.FactAddress;
			AddressId = entity.AddressId;
			OrganisationId = entity.OrganisationId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MonitoringHotel : ILastUpdateTick
	{
		public MonitoringHotel()
		{
		}

		public MonitoringHotel(MonitoringHotel entity) : this(entity, null)
		{
		}

		public MonitoringHotel(MonitoringHotel entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			ShortName = entity.ShortName;
			FullName = entity.FullName;
			FactAddress = entity.FactAddress;
			Inn = entity.Inn;
			IsDeleted = entity.IsDeleted;
			AddressId = entity.AddressId;
			if (deep > 0 && entity.Address != null)
			{
				Address = new Address(entity.Address, deep - 1);
			}

			RegionId = entity.RegionId;
			if (deep > 0 && entity.Region != null)
			{
				Region = new StateDistrict(entity.Region, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MonitoringHotel CreateCopy()
		{
			var res = new MonitoringHotel(this);
			if (Address != null)
			{
				res.Address = new Address{Id=Address.Id, Eid=Address.Eid};
			}
			if (Region != null)
			{
				res.Region = new StateDistrict{Id=Region.Id, Eid=Region.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			res.HotelDatas = HotelDatas?.Select(p=>new MonitoringHotelData {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MonitoringHotel entity)
		{
			Id = entity.Id;
			ShortName = entity.ShortName;
			FullName = entity.FullName;
			FactAddress = entity.FactAddress;
			Inn = entity.Inn;
			IsDeleted = entity.IsDeleted;
			AddressId = entity.AddressId;
			RegionId = entity.RegionId;
			HistoryLinkId = entity.HistoryLinkId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MonitoringHotelData : ILastUpdateTick
	{
		public MonitoringHotelData()
		{
		}

		public MonitoringHotelData(MonitoringHotelData entity) : this(entity, null)
		{
		}

		public MonitoringHotelData(MonitoringHotelData entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			ChildrenNumberInformationId = entity.ChildrenNumberInformationId;
			if (deep > 0 && entity.ChildrenNumberInformation != null)
			{
				ChildrenNumberInformation = new MonitoringChildrenNumberInformation(entity.ChildrenNumberInformation, deep - 1);
			}

			HotelId = entity.HotelId;
			if (deep > 0 && entity.Hotel != null)
			{
				Hotel = new MonitoringHotel(entity.Hotel, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MonitoringHotelData CreateCopy()
		{
			var res = new MonitoringHotelData(this);
			if (ChildrenNumberInformation != null)
			{
				res.ChildrenNumberInformation = new MonitoringChildrenNumberInformation{Id=ChildrenNumberInformation.Id, Eid=ChildrenNumberInformation.Eid};
			}
			if (Hotel != null)
			{
				res.Hotel = new MonitoringHotel{Id=Hotel.Id, Eid=Hotel.Eid};
			}
			res.TourDatas = TourDatas?.Select(p=>new MonitoringTourData {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MonitoringHotelData entity)
		{
			Id = entity.Id;
			ChildrenNumberInformationId = entity.ChildrenNumberInformationId;
			HotelId = entity.HotelId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MonitoringSmallLeisureInfo : ILastUpdateTick
	{
		public MonitoringSmallLeisureInfo()
		{
		}

		public MonitoringSmallLeisureInfo(MonitoringSmallLeisureInfo entity) : this(entity, null)
		{
		}

		public MonitoringSmallLeisureInfo(MonitoringSmallLeisureInfo entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Month = entity.Month;
			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			OrganisationId = entity.OrganisationId;
			if (deep > 0 && entity.Organisation != null)
			{
				Organisation = new Organization(entity.Organisation, deep - 1);
			}

			LinkToFilesId = entity.LinkToFilesId;
			if (deep > 0 && entity.LinkToFiles != null)
			{
				LinkToFiles = new LinkToFile(entity.LinkToFiles, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MonitoringSmallLeisureInfo CreateCopy()
		{
			var res = new MonitoringSmallLeisureInfo(this);
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (Organisation != null)
			{
				res.Organisation = new Organization{Id=Organisation.Id, Eid=Organisation.Eid};
			}
			if (LinkToFiles != null)
			{
				res.LinkToFiles = new LinkToFile{Id=LinkToFiles.Id, Eid=LinkToFiles.Eid};
			}
			res.SmallLeisureInfoGBUs = SmallLeisureInfoGBUs?.Select(p=>new MonitoringSmallLeisureInfoGBU {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MonitoringSmallLeisureInfo entity)
		{
			Id = entity.Id;
			Month = entity.Month;
			YearOfRestId = entity.YearOfRestId;
			HistoryLinkId = entity.HistoryLinkId;
			StateId = entity.StateId;
			OrganisationId = entity.OrganisationId;
			LinkToFilesId = entity.LinkToFilesId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MonitoringSmallLeisureInfoData : ILastUpdateTick
	{
		public MonitoringSmallLeisureInfoData()
		{
		}

		public MonitoringSmallLeisureInfoData(MonitoringSmallLeisureInfoData entity) : this(entity, null)
		{
		}

		public MonitoringSmallLeisureInfoData(MonitoringSmallLeisureInfoData entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			ChildrenCountPost = entity.ChildrenCountPost;
			ChildernCountCovered = entity.ChildernCountCovered;
			MoneyOutcome = entity.MoneyOutcome;
			NoteOne = entity.NoteOne;
			NoteTwo = entity.NoteTwo;
			NoteThree = entity.NoteThree;
			MonitoringSmallLeisureInfoGBUId = entity.MonitoringSmallLeisureInfoGBUId;
			if (deep > 0 && entity.MonitoringSmallLeisureInfoGBU != null)
			{
				MonitoringSmallLeisureInfoGBU = new MonitoringSmallLeisureInfoGBU(entity.MonitoringSmallLeisureInfoGBU, deep - 1);
			}

			SmallLeisureTypeId = entity.SmallLeisureTypeId;
			if (deep > 0 && entity.SmallLeisureType != null)
			{
				SmallLeisureType = new SmallLeisureType(entity.SmallLeisureType, deep - 1);
			}

			SmallLeisureSubtypeId = entity.SmallLeisureSubtypeId;
			if (deep > 0 && entity.SmallLeisureSubtype != null)
			{
				SmallLeisureSubtype = new SmallLeisureSubtype(entity.SmallLeisureSubtype, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MonitoringSmallLeisureInfoData CreateCopy()
		{
			var res = new MonitoringSmallLeisureInfoData(this);
			if (MonitoringSmallLeisureInfoGBU != null)
			{
				res.MonitoringSmallLeisureInfoGBU = new MonitoringSmallLeisureInfoGBU{Id=MonitoringSmallLeisureInfoGBU.Id, Eid=MonitoringSmallLeisureInfoGBU.Eid};
			}
			if (SmallLeisureType != null)
			{
				res.SmallLeisureType = new SmallLeisureType{Id=SmallLeisureType.Id, Eid=SmallLeisureType.Eid};
			}
			if (SmallLeisureSubtype != null)
			{
				res.SmallLeisureSubtype = new SmallLeisureSubtype{Id=SmallLeisureSubtype.Id, Eid=SmallLeisureSubtype.Eid};
			}
			return res;
		}

		public void CopyEntity(MonitoringSmallLeisureInfoData entity)
		{
			Id = entity.Id;
			ChildrenCountPost = entity.ChildrenCountPost;
			ChildernCountCovered = entity.ChildernCountCovered;
			MoneyOutcome = entity.MoneyOutcome;
			NoteOne = entity.NoteOne;
			NoteTwo = entity.NoteTwo;
			NoteThree = entity.NoteThree;
			MonitoringSmallLeisureInfoGBUId = entity.MonitoringSmallLeisureInfoGBUId;
			SmallLeisureTypeId = entity.SmallLeisureTypeId;
			SmallLeisureSubtypeId = entity.SmallLeisureSubtypeId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MonitoringSmallLeisureInfoGBU : ILastUpdateTick
	{
		public MonitoringSmallLeisureInfoGBU()
		{
		}

		public MonitoringSmallLeisureInfoGBU(MonitoringSmallLeisureInfoGBU entity) : this(entity, null)
		{
		}

		public MonitoringSmallLeisureInfoGBU(MonitoringSmallLeisureInfoGBU entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			LastUploadData = entity.LastUploadData;
			MonitoringSmallLeisureInfoId = entity.MonitoringSmallLeisureInfoId;
			if (deep > 0 && entity.MonitoringSmallLeisureInfo != null)
			{
				MonitoringSmallLeisureInfo = new MonitoringSmallLeisureInfo(entity.MonitoringSmallLeisureInfo, deep - 1);
			}

			GBUId = entity.GBUId;
			if (deep > 0 && entity.GBU != null)
			{
				GBU = new MonitoringGBU(entity.GBU, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MonitoringSmallLeisureInfoGBU CreateCopy()
		{
			var res = new MonitoringSmallLeisureInfoGBU(this);
			if (MonitoringSmallLeisureInfo != null)
			{
				res.MonitoringSmallLeisureInfo = new MonitoringSmallLeisureInfo{Id=MonitoringSmallLeisureInfo.Id, Eid=MonitoringSmallLeisureInfo.Eid};
			}
			if (GBU != null)
			{
				res.GBU = new MonitoringGBU{Id=GBU.Id, Eid=GBU.Eid};
			}
			res.MonitoringSmallLeisureInfoDatas = MonitoringSmallLeisureInfoDatas?.Select(p=>new MonitoringSmallLeisureInfoData {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(MonitoringSmallLeisureInfoGBU entity)
		{
			Id = entity.Id;
			LastUploadData = entity.LastUploadData;
			MonitoringSmallLeisureInfoId = entity.MonitoringSmallLeisureInfoId;
			GBUId = entity.GBUId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class MonitoringTourData : ILastUpdateTick
	{
		public MonitoringTourData()
		{
		}

		public MonitoringTourData(MonitoringTourData entity) : this(entity, null)
		{
		}

		public MonitoringTourData(MonitoringTourData entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateIn = entity.DateIn;
			DateOut = entity.DateOut;
			PlanChildrenCount = entity.PlanChildrenCount;
			FactChildrenCount = entity.FactChildrenCount;
			HotelDataId = entity.HotelDataId;
			if (deep > 0 && entity.HotelData != null)
			{
				HotelData = new MonitoringHotelData(entity.HotelData, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public MonitoringTourData CreateCopy()
		{
			var res = new MonitoringTourData(this);
			if (HotelData != null)
			{
				res.HotelData = new MonitoringHotelData{Id=HotelData.Id, Eid=HotelData.Eid};
			}
			return res;
		}

		public void CopyEntity(MonitoringTourData entity)
		{
			Id = entity.Id;
			DateIn = entity.DateIn;
			DateOut = entity.DateOut;
			PlanChildrenCount = entity.PlanChildrenCount;
			FactChildrenCount = entity.FactChildrenCount;
			HotelDataId = entity.HotelDataId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class NotNeedTicketReason : ILastUpdateTick
	{
		public NotNeedTicketReason()
		{
		}

		public NotNeedTicketReason(NotNeedTicketReason entity) : this(entity, null)
		{
		}

		public NotNeedTicketReason(NotNeedTicketReason entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public NotNeedTicketReason CreateCopy()
		{
			var res = new NotNeedTicketReason(this);
			return res;
		}

		public void CopyEntity(NotNeedTicketReason entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class OfferInRequest : ILastUpdateTick
	{
		public OfferInRequest()
		{
		}

		public OfferInRequest(OfferInRequest entity) : this(entity, null)
		{
		}

		public OfferInRequest(OfferInRequest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			RoomRatesId = entity.RoomRatesId;
			if (deep > 0 && entity.RoomRates != null)
			{
				RoomRates = new RoomRates(entity.RoomRates, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
			Index = entity.Index;
		}

		public OfferInRequest CreateCopy()
		{
			var res = new OfferInRequest(this);
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (RoomRates != null)
			{
				res.RoomRates = new RoomRates{Id=RoomRates.Id, Eid=RoomRates.Eid};
			}
			res.Children = Children?.Select(p=>new Child {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Attendants = Attendants?.Select(p=>new Applicant {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(OfferInRequest entity)
		{
			Id = entity.Id;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			RequestId = entity.RequestId;
			RoomRatesId = entity.RoomRatesId;
			LastUpdateTick = entity.LastUpdateTick;
			Index = entity.Index;
		}
	}
	public partial class Okved : ILastUpdateTick
	{
		public Okved()
		{
		}

		public Okved(Okved entity) : this(entity, null)
		{
		}

		public Okved(Okved entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Code = entity.Code;
			Name = entity.Name;
			ParentId = entity.ParentId;
			if (deep > 0 && entity.Parent != null)
			{
				Parent = new Okved(entity.Parent, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Okved CreateCopy()
		{
			var res = new Okved(this);
			if (Parent != null)
			{
				res.Parent = new Okved{Id=Parent.Id, Eid=Parent.Eid};
			}
			res.Organizations = Organizations?.Select(p=>new Organization {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Okved entity)
		{
			Id = entity.Id;
			Code = entity.Code;
			Name = entity.Name;
			ParentId = entity.ParentId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class OrganisatorCollaborator : ILastUpdateTick
	{
		public OrganisatorCollaborator()
		{
		}

		public OrganisatorCollaborator(OrganisatorCollaborator entity) : this(entity, null)
		{
		}

		public OrganisatorCollaborator(OrganisatorCollaborator entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			AditionalPhone = entity.AditionalPhone;
			OrganisationPosition = entity.OrganisationPosition;
			Filled = entity.Filled;
			WellnessOrganisationPositionId = entity.WellnessOrganisationPositionId;
			if (deep > 0 && entity.WellnessOrganisationPosition != null)
			{
				WellnessOrganisationPosition = new TypeOfLinkPeople(entity.WellnessOrganisationPosition, deep - 1);
			}

			OrganisatonAddressId = entity.OrganisatonAddressId;
			if (deep > 0 && entity.OrganisatonAddress != null)
			{
				OrganisatonAddress = new OrphanageAddress(entity.OrganisatonAddress, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			PositionId = entity.PositionId;
			if (deep > 0 && entity.Position != null)
			{
				Position = new OrganizationCollaboratorPostType(entity.Position, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			OrganisatonId = entity.OrganisatonId;
			if (deep > 0 && entity.Organisaton != null)
			{
				Organisaton = new Organization(entity.Organisaton, deep - 1);
			}

			EntityId = entity.EntityId;
			if (deep > 0 && entity.Entity != null)
			{
				Entity = new OrganisatorCollaborator(entity.Entity, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public OrganisatorCollaborator CreateCopy()
		{
			var res = new OrganisatorCollaborator(this);
			if (WellnessOrganisationPosition != null)
			{
				res.WellnessOrganisationPosition = new TypeOfLinkPeople{Id=WellnessOrganisationPosition.Id, Eid=WellnessOrganisationPosition.Eid};
			}
			if (OrganisatonAddress != null)
			{
				res.OrganisatonAddress = new OrphanageAddress{Id=OrganisatonAddress.Id, Eid=OrganisatonAddress.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			if (Position != null)
			{
				res.Position = new OrganizationCollaboratorPostType{Id=Position.Id, Eid=Position.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (Organisaton != null)
			{
				res.Organisaton = new Organization{Id=Organisaton.Id, Eid=Organisaton.Eid};
			}
			if (Entity != null)
			{
				res.Entity = new OrganisatorCollaborator{Id=Entity.Id, Eid=Entity.Eid};
			}
			return res;
		}

		public void CopyEntity(OrganisatorCollaborator entity)
		{
			Id = entity.Id;
			AditionalPhone = entity.AditionalPhone;
			OrganisationPosition = entity.OrganisationPosition;
			Filled = entity.Filled;
			WellnessOrganisationPositionId = entity.WellnessOrganisationPositionId;
			OrganisatonAddressId = entity.OrganisatonAddressId;
			ApplicantId = entity.ApplicantId;
			PositionId = entity.PositionId;
			HistoryLinkId = entity.HistoryLinkId;
			OrganisatonId = entity.OrganisatonId;
			EntityId = entity.EntityId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Organization : ILastUpdateTick
	{
		public Organization()
		{
		}

		public Organization(Organization entity) : this(entity, null)
		{
		}

		public Organization(Organization entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			ShortName = entity.ShortName;
			ExternalUid = entity.ExternalUid;
			Inn = entity.Inn;
			Kpp = entity.Kpp;
			Ogrn = entity.Ogrn;
			IsDeleted = entity.IsDeleted;
			IsLast = entity.IsLast;
			IsVedomstvo = entity.IsVedomstvo;
			Phone = entity.Phone;
			EkisSourcePk = entity.EkisSourcePk;
			EkisExternalPk = entity.EkisExternalPk;
			EkisStatus = entity.EkisStatus;
			EkisGuid = entity.EkisGuid;
			IsVedOrganization = entity.IsVedOrganization;
			IsContractor = entity.IsContractor;
			IsTransport = entity.IsTransport;
			TargetOrganizationPk = entity.TargetOrganizationPk;
			Address = entity.Address;
			Email = entity.Email;
			ContactPerson = entity.ContactPerson;
			Comment = entity.Comment;
			Commission = entity.Commission;
			LatinName = entity.LatinName;
			Ownership = entity.Ownership;
			PostAdderss = entity.PostAdderss;
			HeadPerson = entity.HeadPerson;
			IsTradeUnion = entity.IsTradeUnion;
			IsHotel = entity.IsHotel;
			CountInTour = entity.CountInTour;
			Orphanage = entity.Orphanage;
			IsInMonitoring = entity.IsInMonitoring;
			OKATO = entity.OKATO;
			ESNSIType = entity.ESNSIType;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			ParentId = entity.ParentId;
			if (deep > 0 && entity.Parent != null)
			{
				Parent = new Organization(entity.Parent, deep - 1);
			}

			EntityId = entity.EntityId;
			if (deep > 0 && entity.Entity != null)
			{
				Entity = new Organization(entity.Entity, deep - 1);
			}

			StateDistrictId = entity.StateDistrictId;
			if (deep > 0 && entity.StateDistrict != null)
			{
				StateDistrict = new StateDistrict(entity.StateDistrict, deep - 1);
			}

			CuratorId = entity.CuratorId;
			if (deep > 0 && entity.Curator != null)
			{
				Curator = new Account(entity.Curator, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Organization CreateCopy()
		{
			var res = new Organization(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (Parent != null)
			{
				res.Parent = new Organization{Id=Parent.Id, Eid=Parent.Eid};
			}
			if (Entity != null)
			{
				res.Entity = new Organization{Id=Entity.Id, Eid=Entity.Eid};
			}
			if (StateDistrict != null)
			{
				res.StateDistrict = new StateDistrict{Id=StateDistrict.Id, Eid=StateDistrict.Eid};
			}
			if (Curator != null)
			{
				res.Curator = new Account{Id=Curator.Id, Eid=Curator.Eid};
			}
			res.Okved = Okved?.Select(p=>new Okved {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Bank = Bank?.Select(p=>new OrganizationBank {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Vedomstvo = Vedomstvo?.Select(p=>new LimitOnVedomstvo {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.LimitOrganization = LimitOrganization?.Select(p=>new LimitOnOrganization {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.OrphanageOrganizationAddresses = OrphanageOrganizationAddresses?.Select(p=>new OrphanageAddress {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.OrganisatonCollaborators = OrganisatonCollaborators?.Select(p=>new OrganisatorCollaborator {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.MonitoringChildrenNumberInformations = MonitoringChildrenNumberInformations?.Select(p=>new MonitoringChildrenNumberInformation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.MonitoringFinanceInformations = MonitoringFinanceInformations?.Select(p=>new MonitoringFinancialInformation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.GBUs = GBUs?.Select(p=>new MonitoringGBU {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.TypeOfTransport = TypeOfTransport?.Select(p=>new TypeOfTransport {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Organization entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			ShortName = entity.ShortName;
			ExternalUid = entity.ExternalUid;
			Inn = entity.Inn;
			Kpp = entity.Kpp;
			Ogrn = entity.Ogrn;
			IsDeleted = entity.IsDeleted;
			IsLast = entity.IsLast;
			IsVedomstvo = entity.IsVedomstvo;
			Phone = entity.Phone;
			EkisSourcePk = entity.EkisSourcePk;
			EkisExternalPk = entity.EkisExternalPk;
			EkisStatus = entity.EkisStatus;
			EkisGuid = entity.EkisGuid;
			IsVedOrganization = entity.IsVedOrganization;
			IsContractor = entity.IsContractor;
			IsTransport = entity.IsTransport;
			TargetOrganizationPk = entity.TargetOrganizationPk;
			Address = entity.Address;
			Email = entity.Email;
			ContactPerson = entity.ContactPerson;
			Comment = entity.Comment;
			Commission = entity.Commission;
			LatinName = entity.LatinName;
			Ownership = entity.Ownership;
			PostAdderss = entity.PostAdderss;
			HeadPerson = entity.HeadPerson;
			IsTradeUnion = entity.IsTradeUnion;
			IsHotel = entity.IsHotel;
			CountInTour = entity.CountInTour;
			Orphanage = entity.Orphanage;
			IsInMonitoring = entity.IsInMonitoring;
			OKATO = entity.OKATO;
			ESNSIType = entity.ESNSIType;
			HistoryLinkId = entity.HistoryLinkId;
			ParentId = entity.ParentId;
			EntityId = entity.EntityId;
			StateDistrictId = entity.StateDistrictId;
			CuratorId = entity.CuratorId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class OrganizationBank : ILastUpdateTick
	{
		public OrganizationBank()
		{
		}

		public OrganizationBank(OrganizationBank entity) : this(entity, null)
		{
		}

		public OrganizationBank(OrganizationBank entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Bank = entity.Bank;
			Bik = entity.Bik;
			Inn = entity.Inn;
			Correspondent = entity.Correspondent;
			Account = entity.Account;
			Comment = entity.Comment;
			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public OrganizationBank CreateCopy()
		{
			var res = new OrganizationBank(this);
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			return res;
		}

		public void CopyEntity(OrganizationBank entity)
		{
			Id = entity.Id;
			Bank = entity.Bank;
			Bik = entity.Bik;
			Inn = entity.Inn;
			Correspondent = entity.Correspondent;
			Account = entity.Account;
			Comment = entity.Comment;
			OrganizationId = entity.OrganizationId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class OrganizationCollaboratorPostType : ILastUpdateTick
	{
		public OrganizationCollaboratorPostType()
		{
		}

		public OrganizationCollaboratorPostType(OrganizationCollaboratorPostType entity) : this(entity, null)
		{
		}

		public OrganizationCollaboratorPostType(OrganizationCollaboratorPostType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public OrganizationCollaboratorPostType CreateCopy()
		{
			var res = new OrganizationCollaboratorPostType(this);
			res.OrganisatonCollaborator = OrganisatonCollaborator?.Select(p=>new OrganisatorCollaborator {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(OrganizationCollaboratorPostType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class OrphanageAddress : ILastUpdateTick
	{
		public OrphanageAddress()
		{
		}

		public OrphanageAddress(OrphanageAddress entity) : this(entity, null)
		{
		}

		public OrphanageAddress(OrphanageAddress entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FencedArea = entity.FencedArea;
			LargeParking = entity.LargeParking;
			AddressId = entity.AddressId;
			if (deep > 0 && entity.Address != null)
			{
				Address = new Address(entity.Address, deep - 1);
			}

			OrganisationId = entity.OrganisationId;
			if (deep > 0 && entity.Organisation != null)
			{
				Organisation = new Organization(entity.Organisation, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public OrphanageAddress CreateCopy()
		{
			var res = new OrphanageAddress(this);
			if (Address != null)
			{
				res.Address = new Address{Id=Address.Id, Eid=Address.Eid};
			}
			if (Organisation != null)
			{
				res.Organisation = new Organization{Id=Organisation.Id, Eid=Organisation.Eid};
			}
			res.Pupils = Pupils?.Select(p=>new Pupil {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.PupilGroupListCollaborators = PupilGroupListCollaborators?.Select(p=>new PupilGroupListCollaborator {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.PupilGroupListPupils = PupilGroupListPupils?.Select(p=>new PupilGroupListMember {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.OrganisatonCollaborators = OrganisatonCollaborators?.Select(p=>new OrganisatorCollaborator {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(OrphanageAddress entity)
		{
			Id = entity.Id;
			FencedArea = entity.FencedArea;
			LargeParking = entity.LargeParking;
			AddressId = entity.AddressId;
			OrganisationId = entity.OrganisationId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Party : ILastUpdateTick
	{
		public Party()
		{
		}

		public Party(Party entity) : this(entity, null)
		{
		}

		public Party(Party entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			PartyNumber = entity.PartyNumber;
			BoutsId = entity.BoutsId;
			if (deep > 0 && entity.Bouts != null)
			{
				Bouts = new Bout(entity.Bouts, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HotelsId = entity.HotelsId;
			if (deep > 0 && entity.Hotels != null)
			{
				Hotels = new Hotels(entity.Hotels, deep - 1);
			}

			TimeOfRestId = entity.TimeOfRestId;
			if (deep > 0 && entity.TimeOfRest != null)
			{
				TimeOfRest = new TimeOfRest(entity.TimeOfRest, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Party CreateCopy()
		{
			var res = new Party(this);
			if (Bouts != null)
			{
				res.Bouts = new Bout{Id=Bouts.Id, Eid=Bouts.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (Hotels != null)
			{
				res.Hotels = new Hotels{Id=Hotels.Id, Eid=Hotels.Eid};
			}
			if (TimeOfRest != null)
			{
				res.TimeOfRest = new TimeOfRest{Id=TimeOfRest.Id, Eid=TimeOfRest.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			res.Tours = Tours?.Select(p=>new Tour {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Counselors = Counselors?.Select(p=>new Counselors {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Childs = Childs?.Select(p=>new Child {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Party entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			PartyNumber = entity.PartyNumber;
			BoutsId = entity.BoutsId;
			StateId = entity.StateId;
			HotelsId = entity.HotelsId;
			TimeOfRestId = entity.TimeOfRestId;
			YearOfRestId = entity.YearOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Payment : ILastUpdateTick
	{
		public Payment()
		{
		}

		public Payment(Payment entity) : this(entity, null)
		{
		}

		public Payment(Payment entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			PaymentDate = entity.PaymentDate;
			PaymentNumber = entity.PaymentNumber;
			PaymentSumm = entity.PaymentSumm;
			Purpose = entity.Purpose;
			Description = entity.Description;
			DateCreate = entity.DateCreate;
			PaymentFileUrl = entity.PaymentFileUrl;
			PaymentFileTitle = entity.PaymentFileTitle;
			Payer = entity.Payer;
			Source = entity.Source;
			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HistoryId = entity.HistoryId;
			if (deep > 0 && entity.History != null)
			{
				History = new HistoryLink(entity.History, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Payment CreateCopy()
		{
			var res = new Payment(this);
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (History != null)
			{
				res.History = new HistoryLink{Id=History.Id, Eid=History.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			res.Calculations = Calculations?.Select(p=>new Calculation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Payment entity)
		{
			Id = entity.Id;
			PaymentDate = entity.PaymentDate;
			PaymentNumber = entity.PaymentNumber;
			PaymentSumm = entity.PaymentSumm;
			Purpose = entity.Purpose;
			Description = entity.Description;
			DateCreate = entity.DateCreate;
			PaymentFileUrl = entity.PaymentFileUrl;
			PaymentFileTitle = entity.PaymentFileTitle;
			Payer = entity.Payer;
			Source = entity.Source;
			StateId = entity.StateId;
			HistoryId = entity.HistoryId;
			AccountId = entity.AccountId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class PedParty : ILastUpdateTick
	{
		public PedParty()
		{
		}

		public PedParty(PedParty entity) : this(entity, null)
		{
		}

		public PedParty(PedParty entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			City = entity.City;
			DateCreate = entity.DateCreate;
			IsActive = entity.IsActive;
			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public PedParty CreateCopy()
		{
			var res = new PedParty(this);
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			return res;
		}

		public void CopyEntity(PedParty entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			City = entity.City;
			DateCreate = entity.DateCreate;
			IsActive = entity.IsActive;
			StateId = entity.StateId;
			HistoryLinkId = entity.HistoryLinkId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Person : ILastUpdateTick
	{
		public Person()
		{
		}

		public Person(Person entity) : this(entity, null)
		{
		}

		public Person(Person entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			HaveMiddleName = entity.HaveMiddleName;
			DocumentSeria = entity.DocumentSeria;
			DocumentNumber = entity.DocumentNumber;
			DocumentDateOfIssue = entity.DocumentDateOfIssue;
			DocumentSubjectIssue = entity.DocumentSubjectIssue;
			DateOfBirth = entity.DateOfBirth;
			Male = entity.Male;
			PlaceOfBirth = entity.PlaceOfBirth;
			Snils = entity.Snils;
			Phone = entity.Phone;
			Email = entity.Email;
			ContingentUid = entity.ContingentUid;
			IsChild = entity.IsChild;
			KeyField = entity.KeyField;
			DocumentTypeId = entity.DocumentTypeId;
			if (deep > 0 && entity.DocumentType != null)
			{
				DocumentType = new DocumentType(entity.DocumentType, deep - 1);
			}

			AddressId = entity.AddressId;
			if (deep > 0 && entity.Address != null)
			{
				Address = new Address(entity.Address, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Person CreateCopy()
		{
			var res = new Person(this);
			if (DocumentType != null)
			{
				res.DocumentType = new DocumentType{Id=DocumentType.Id, Eid=DocumentType.Eid};
			}
			if (Address != null)
			{
				res.Address = new Address{Id=Address.Id, Eid=Address.Eid};
			}
			res.TradeUnionCamper = TradeUnionCamper?.Select(p=>new TradeUnionCamper {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.PersonCheck = PersonCheck?.Select(p=>new TradeUnionPersonCheck {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.PersonCheckResults = PersonCheckResults?.Select(p=>new TradeUnionPersonCheck {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Person entity)
		{
			Id = entity.Id;
			LastName = entity.LastName;
			FirstName = entity.FirstName;
			MiddleName = entity.MiddleName;
			HaveMiddleName = entity.HaveMiddleName;
			DocumentSeria = entity.DocumentSeria;
			DocumentNumber = entity.DocumentNumber;
			DocumentDateOfIssue = entity.DocumentDateOfIssue;
			DocumentSubjectIssue = entity.DocumentSubjectIssue;
			DateOfBirth = entity.DateOfBirth;
			Male = entity.Male;
			PlaceOfBirth = entity.PlaceOfBirth;
			Snils = entity.Snils;
			Phone = entity.Phone;
			Email = entity.Email;
			ContingentUid = entity.ContingentUid;
			IsChild = entity.IsChild;
			KeyField = entity.KeyField;
			DocumentTypeId = entity.DocumentTypeId;
			AddressId = entity.AddressId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class PlaceOfRest : ILastUpdateTick
	{
		public PlaceOfRest()
		{
		}

		public PlaceOfRest(PlaceOfRest entity) : this(entity, null)
		{
		}

		public PlaceOfRest(PlaceOfRest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Description = entity.Description;
			PhotoUrl = entity.PhotoUrl;
			IsForegin = entity.IsForegin;
			IsActive = entity.IsActive;
			PriceBasePlace = entity.PriceBasePlace;
			PriceAddonPlace = entity.PriceAddonPlace;
			ZoneOfSea = entity.ZoneOfSea;
			ForMpgu = entity.ForMpgu;
			ForSite = entity.ForSite;
			NotForSelect = entity.NotForSelect;
			NeedTypeOfTransport = entity.NeedTypeOfTransport;
			GroupId = entity.GroupId;
			if (deep > 0 && entity.Group != null)
			{
				Group = new PlaceOfRest(entity.Group, deep - 1);
			}

			CreateUserId = entity.CreateUserId;
			if (deep > 0 && entity.CreateUser != null)
			{
				CreateUser = new Account(entity.CreateUser, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			CountryId = entity.CountryId;
			if (deep > 0 && entity.Country != null)
			{
				Country = new Country(entity.Country, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public PlaceOfRest CreateCopy()
		{
			var res = new PlaceOfRest(this);
			if (Group != null)
			{
				res.Group = new PlaceOfRest{Id=Group.Id, Eid=Group.Eid};
			}
			if (CreateUser != null)
			{
				res.CreateUser = new Account{Id=CreateUser.Id, Eid=CreateUser.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (Country != null)
			{
				res.Country = new Country{Id=Country.Id, Eid=Country.Eid};
			}
			res.Requests = Requests?.Select(p=>new RequestPlaceOfRest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.TypeOfRests = TypeOfRests?.Select(p=>new PlaceOfRestTypeOfRest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.AddonServices = AddonServices?.Select(p=>new AddonServices {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(PlaceOfRest entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Description = entity.Description;
			PhotoUrl = entity.PhotoUrl;
			IsForegin = entity.IsForegin;
			IsActive = entity.IsActive;
			PriceBasePlace = entity.PriceBasePlace;
			PriceAddonPlace = entity.PriceAddonPlace;
			ZoneOfSea = entity.ZoneOfSea;
			ForMpgu = entity.ForMpgu;
			ForSite = entity.ForSite;
			NotForSelect = entity.NotForSelect;
			NeedTypeOfTransport = entity.NeedTypeOfTransport;
			GroupId = entity.GroupId;
			CreateUserId = entity.CreateUserId;
			HistoryLinkId = entity.HistoryLinkId;
			CountryId = entity.CountryId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class PlaceOfRestTypeOfRest : ILastUpdateTick
	{
		public PlaceOfRestTypeOfRest()
		{
		}

		public PlaceOfRestTypeOfRest(PlaceOfRestTypeOfRest entity) : this(entity, null)
		{
		}

		public PlaceOfRestTypeOfRest(PlaceOfRestTypeOfRest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			TypeOfRestId = entity.TypeOfRestId;
			if (deep > 0 && entity.TypeOfRest != null)
			{
				TypeOfRest = new TypeOfRest(entity.TypeOfRest, deep - 1);
			}

			PlaceOfRestId = entity.PlaceOfRestId;
			if (deep > 0 && entity.PlaceOfRest != null)
			{
				PlaceOfRest = new PlaceOfRest(entity.PlaceOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public PlaceOfRestTypeOfRest CreateCopy()
		{
			var res = new PlaceOfRestTypeOfRest(this);
			if (TypeOfRest != null)
			{
				res.TypeOfRest = new TypeOfRest{Id=TypeOfRest.Id, Eid=TypeOfRest.Eid};
			}
			if (PlaceOfRest != null)
			{
				res.PlaceOfRest = new PlaceOfRest{Id=PlaceOfRest.Id, Eid=PlaceOfRest.Eid};
			}
			return res;
		}

		public void CopyEntity(PlaceOfRestTypeOfRest entity)
		{
			Id = entity.Id;
			TypeOfRestId = entity.TypeOfRestId;
			PlaceOfRestId = entity.PlaceOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Product : ILastUpdateTick
	{
		public Product()
		{
		}

		public Product(Product entity) : this(entity, null)
		{
		}

		public Product(Product entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			HotelsId = entity.HotelsId;
			if (deep > 0 && entity.Hotels != null)
			{
				Hotels = new Hotels(entity.Hotels, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			LinkToFileId = entity.LinkToFileId;
			if (deep > 0 && entity.LinkToFile != null)
			{
				LinkToFile = new LinkToFile(entity.LinkToFile, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Product CreateCopy()
		{
			var res = new Product(this);
			if (Hotels != null)
			{
				res.Hotels = new Hotels{Id=Hotels.Id, Eid=Hotels.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (LinkToFile != null)
			{
				res.LinkToFile = new LinkToFile{Id=LinkToFile.Id, Eid=LinkToFile.Eid};
			}
			res.Tours = Tours?.Select(p=>new Tour {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.EventGeographys = EventGeographys?.Select(p=>new EventGeography {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Product entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			HotelsId = entity.HotelsId;
			StateId = entity.StateId;
			HistoryLinkId = entity.HistoryLinkId;
			LinkToFileId = entity.LinkToFileId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Pupil : ILastUpdateTick
	{
		public Pupil()
		{
		}

		public Pupil(Pupil entity) : this(entity, null)
		{
		}

		public Pupil(Pupil entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateIn = entity.DateIn;
			DateOut = entity.DateOut;
			OrganisationOut = entity.OrganisationOut;
			SchoolNotFound = entity.SchoolNotFound;
			SchoolName = entity.SchoolName;
			GlutenFreeFood = entity.GlutenFreeFood;
			PureedFood = entity.PureedFood;
			FoodAditionals = entity.FoodAditionals;
			Filled = entity.Filled;
			Foul = entity.Foul;
			FoulRegionRestriction = entity.FoulRegionRestriction;
			FoulRegionRestrictionFrom = entity.FoulRegionRestrictionFrom;
			FoulRegionRestrictionTo = entity.FoulRegionRestrictionTo;
			OrphanageAddressId = entity.OrphanageAddressId;
			if (deep > 0 && entity.OrphanageAddress != null)
			{
				OrphanageAddress = new OrphanageAddress(entity.OrphanageAddress, deep - 1);
			}

			ChildId = entity.ChildId;
			if (deep > 0 && entity.Child != null)
			{
				Child = new Child(entity.Child, deep - 1);
			}

			SchoolId = entity.SchoolId;
			if (deep > 0 && entity.School != null)
			{
				School = new School(entity.School, deep - 1);
			}

			LinkToFilesId = entity.LinkToFilesId;
			if (deep > 0 && entity.LinkToFiles != null)
			{
				LinkToFiles = new LinkToFile(entity.LinkToFiles, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			EntityId = entity.EntityId;
			if (deep > 0 && entity.Entity != null)
			{
				Entity = new Pupil(entity.Entity, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Pupil CreateCopy()
		{
			var res = new Pupil(this);
			if (OrphanageAddress != null)
			{
				res.OrphanageAddress = new OrphanageAddress{Id=OrphanageAddress.Id, Eid=OrphanageAddress.Eid};
			}
			if (Child != null)
			{
				res.Child = new Child{Id=Child.Id, Eid=Child.Eid};
			}
			if (School != null)
			{
				res.School = new School{Id=School.Id, Eid=School.Eid};
			}
			if (LinkToFiles != null)
			{
				res.LinkToFiles = new LinkToFile{Id=LinkToFiles.Id, Eid=LinkToFiles.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (Entity != null)
			{
				res.Entity = new Pupil{Id=Entity.Id, Eid=Entity.Eid};
			}
			res.Drugs = Drugs?.Select(p=>new PupilDose {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.PupilGroups = PupilGroups?.Select(p=>new PupilGroup {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Pupil entity)
		{
			Id = entity.Id;
			DateIn = entity.DateIn;
			DateOut = entity.DateOut;
			OrganisationOut = entity.OrganisationOut;
			SchoolNotFound = entity.SchoolNotFound;
			SchoolName = entity.SchoolName;
			GlutenFreeFood = entity.GlutenFreeFood;
			PureedFood = entity.PureedFood;
			FoodAditionals = entity.FoodAditionals;
			Filled = entity.Filled;
			Foul = entity.Foul;
			FoulRegionRestriction = entity.FoulRegionRestriction;
			FoulRegionRestrictionFrom = entity.FoulRegionRestrictionFrom;
			FoulRegionRestrictionTo = entity.FoulRegionRestrictionTo;
			OrphanageAddressId = entity.OrphanageAddressId;
			ChildId = entity.ChildId;
			SchoolId = entity.SchoolId;
			LinkToFilesId = entity.LinkToFilesId;
			HistoryLinkId = entity.HistoryLinkId;
			EntityId = entity.EntityId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class PupilDose : ILastUpdateTick
	{
		public PupilDose()
		{
		}

		public PupilDose(PupilDose entity) : this(entity, null)
		{
		}

		public PupilDose(PupilDose entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Dose = entity.Dose;
			IsDeleted = entity.IsDeleted;
			PupilId = entity.PupilId;
			if (deep > 0 && entity.Pupil != null)
			{
				Pupil = new Pupil(entity.Pupil, deep - 1);
			}

			DrugId = entity.DrugId;
			if (deep > 0 && entity.Drug != null)
			{
				Drug = new Drug(entity.Drug, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public PupilDose CreateCopy()
		{
			var res = new PupilDose(this);
			if (Pupil != null)
			{
				res.Pupil = new Pupil{Id=Pupil.Id, Eid=Pupil.Eid};
			}
			if (Drug != null)
			{
				res.Drug = new Drug{Id=Drug.Id, Eid=Drug.Eid};
			}
			res.PupilGroupListMemberDrugDoses = PupilGroupListMemberDrugDoses?.Select(p=>new PupilGroupListMemberDrugDose {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(PupilDose entity)
		{
			Id = entity.Id;
			Dose = entity.Dose;
			IsDeleted = entity.IsDeleted;
			PupilId = entity.PupilId;
			DrugId = entity.DrugId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class PupilGroup : ILastUpdateTick
	{
		public PupilGroup()
		{
		}

		public PupilGroup(PupilGroup entity) : this(entity, null)
		{
		}

		public PupilGroup(PupilGroup entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			PupilsCount = entity.PupilsCount;
			CollaboratorsCount = entity.CollaboratorsCount;
			MGTCollaboratorsCount = entity.MGTCollaboratorsCount;
			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			VacationPeriodId = entity.VacationPeriodId;
			if (deep > 0 && entity.VacationPeriod != null)
			{
				VacationPeriod = new PupilGroupVacationPeriod(entity.VacationPeriod, deep - 1);
			}

			FormOfRestId = entity.FormOfRestId;
			if (deep > 0 && entity.FormOfRest != null)
			{
				FormOfRest = new FormOfRest(entity.FormOfRest, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public PupilGroup CreateCopy()
		{
			var res = new PupilGroup(this);
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (VacationPeriod != null)
			{
				res.VacationPeriod = new PupilGroupVacationPeriod{Id=VacationPeriod.Id, Eid=VacationPeriod.Eid};
			}
			if (FormOfRest != null)
			{
				res.FormOfRest = new FormOfRest{Id=FormOfRest.Id, Eid=FormOfRest.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			res.PupilsHealthStatuses = PupilsHealthStatuses?.Select(p=>new PupilsHealthStatus {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Requests = Requests?.Select(p=>new RequestForPeriodOfRest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Pupils = Pupils?.Select(p=>new Pupil {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(PupilGroup entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			PupilsCount = entity.PupilsCount;
			CollaboratorsCount = entity.CollaboratorsCount;
			MGTCollaboratorsCount = entity.MGTCollaboratorsCount;
			OrganizationId = entity.OrganizationId;
			StateId = entity.StateId;
			HistoryLinkId = entity.HistoryLinkId;
			VacationPeriodId = entity.VacationPeriodId;
			FormOfRestId = entity.FormOfRestId;
			YearOfRestId = entity.YearOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class PupilGroupListCollaborator : ILastUpdateTick
	{
		public PupilGroupListCollaborator()
		{
		}

		public PupilGroupListCollaborator(PupilGroupListCollaborator entity) : this(entity, null)
		{
		}

		public PupilGroupListCollaborator(PupilGroupListCollaborator entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			TicketTo = entity.TicketTo;
			TicketFrom = entity.TicketFrom;
			OrganisatonCollaboratorId = entity.OrganisatonCollaboratorId;
			if (deep > 0 && entity.OrganisatonCollaborator != null)
			{
				OrganisatonCollaborator = new OrganisatorCollaborator(entity.OrganisatonCollaborator, deep - 1);
			}

			GroupRequestListId = entity.GroupRequestListId;
			if (deep > 0 && entity.GroupRequestList != null)
			{
				GroupRequestList = new ListOfChilds(entity.GroupRequestList, deep - 1);
			}

			OrganisatonAddresId = entity.OrganisatonAddresId;
			if (deep > 0 && entity.OrganisatonAddres != null)
			{
				OrganisatonAddres = new OrphanageAddress(entity.OrganisatonAddres, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public PupilGroupListCollaborator CreateCopy()
		{
			var res = new PupilGroupListCollaborator(this);
			if (OrganisatonCollaborator != null)
			{
				res.OrganisatonCollaborator = new OrganisatorCollaborator{Id=OrganisatonCollaborator.Id, Eid=OrganisatonCollaborator.Eid};
			}
			if (GroupRequestList != null)
			{
				res.GroupRequestList = new ListOfChilds{Id=GroupRequestList.Id, Eid=GroupRequestList.Eid};
			}
			if (OrganisatonAddres != null)
			{
				res.OrganisatonAddres = new OrphanageAddress{Id=OrganisatonAddres.Id, Eid=OrganisatonAddres.Eid};
			}
			return res;
		}

		public void CopyEntity(PupilGroupListCollaborator entity)
		{
			Id = entity.Id;
			TicketTo = entity.TicketTo;
			TicketFrom = entity.TicketFrom;
			OrganisatonCollaboratorId = entity.OrganisatonCollaboratorId;
			GroupRequestListId = entity.GroupRequestListId;
			OrganisatonAddresId = entity.OrganisatonAddresId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class PupilGroupListMember : ILastUpdateTick
	{
		public PupilGroupListMember()
		{
		}

		public PupilGroupListMember(PupilGroupListMember entity) : this(entity, null)
		{
		}

		public PupilGroupListMember(PupilGroupListMember entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			TicketTo = entity.TicketTo;
			TicketFrom = entity.TicketFrom;
			GroupRequestListId = entity.GroupRequestListId;
			if (deep > 0 && entity.GroupRequestList != null)
			{
				GroupRequestList = new ListOfChilds(entity.GroupRequestList, deep - 1);
			}

			PupilId = entity.PupilId;
			if (deep > 0 && entity.Pupil != null)
			{
				Pupil = new Pupil(entity.Pupil, deep - 1);
			}

			OrganisatonAddresId = entity.OrganisatonAddresId;
			if (deep > 0 && entity.OrganisatonAddres != null)
			{
				OrganisatonAddres = new OrphanageAddress(entity.OrganisatonAddres, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public PupilGroupListMember CreateCopy()
		{
			var res = new PupilGroupListMember(this);
			if (GroupRequestList != null)
			{
				res.GroupRequestList = new ListOfChilds{Id=GroupRequestList.Id, Eid=GroupRequestList.Eid};
			}
			if (Pupil != null)
			{
				res.Pupil = new Pupil{Id=Pupil.Id, Eid=Pupil.Eid};
			}
			if (OrganisatonAddres != null)
			{
				res.OrganisatonAddres = new OrphanageAddress{Id=OrganisatonAddres.Id, Eid=OrganisatonAddres.Eid};
			}
			res.GroupPupilDoses = GroupPupilDoses?.Select(p=>new PupilGroupListMemberDrugDose {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(PupilGroupListMember entity)
		{
			Id = entity.Id;
			TicketTo = entity.TicketTo;
			TicketFrom = entity.TicketFrom;
			GroupRequestListId = entity.GroupRequestListId;
			PupilId = entity.PupilId;
			OrganisatonAddresId = entity.OrganisatonAddresId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class PupilGroupListMemberDrugDose : ILastUpdateTick
	{
		public PupilGroupListMemberDrugDose()
		{
		}

		public PupilGroupListMemberDrugDose(PupilGroupListMemberDrugDose entity) : this(entity, null)
		{
		}

		public PupilGroupListMemberDrugDose(PupilGroupListMemberDrugDose entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DrugQuantity = entity.DrugQuantity;
			DoseId = entity.DoseId;
			if (deep > 0 && entity.Dose != null)
			{
				Dose = new PupilDose(entity.Dose, deep - 1);
			}

			GroupPupilId = entity.GroupPupilId;
			if (deep > 0 && entity.GroupPupil != null)
			{
				GroupPupil = new PupilGroupListMember(entity.GroupPupil, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public PupilGroupListMemberDrugDose CreateCopy()
		{
			var res = new PupilGroupListMemberDrugDose(this);
			if (Dose != null)
			{
				res.Dose = new PupilDose{Id=Dose.Id, Eid=Dose.Eid};
			}
			if (GroupPupil != null)
			{
				res.GroupPupil = new PupilGroupListMember{Id=GroupPupil.Id, Eid=GroupPupil.Eid};
			}
			return res;
		}

		public void CopyEntity(PupilGroupListMemberDrugDose entity)
		{
			Id = entity.Id;
			DrugQuantity = entity.DrugQuantity;
			DoseId = entity.DoseId;
			GroupPupilId = entity.GroupPupilId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class PupilGroupListTransfer : ILastUpdateTick
	{
		public PupilGroupListTransfer()
		{
		}

		public PupilGroupListTransfer(PupilGroupListTransfer entity) : this(entity, null)
		{
		}

		public PupilGroupListTransfer(PupilGroupListTransfer entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			LargeParkingReAddress = entity.LargeParkingReAddress;
			Note = entity.Note;
			CountPeople = entity.CountPeople;
			BoardingHelp = entity.BoardingHelp;
			GroupRequestListId = entity.GroupRequestListId;
			if (deep > 0 && entity.GroupRequestList != null)
			{
				GroupRequestList = new ListOfChilds(entity.GroupRequestList, deep - 1);
			}

			AddressId = entity.AddressId;
			if (deep > 0 && entity.Address != null)
			{
				Address = new OrphanageAddress(entity.Address, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public PupilGroupListTransfer CreateCopy()
		{
			var res = new PupilGroupListTransfer(this);
			if (GroupRequestList != null)
			{
				res.GroupRequestList = new ListOfChilds{Id=GroupRequestList.Id, Eid=GroupRequestList.Eid};
			}
			if (Address != null)
			{
				res.Address = new OrphanageAddress{Id=Address.Id, Eid=Address.Eid};
			}
			return res;
		}

		public void CopyEntity(PupilGroupListTransfer entity)
		{
			Id = entity.Id;
			LargeParkingReAddress = entity.LargeParkingReAddress;
			Note = entity.Note;
			CountPeople = entity.CountPeople;
			BoardingHelp = entity.BoardingHelp;
			GroupRequestListId = entity.GroupRequestListId;
			AddressId = entity.AddressId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class PupilGroupVacationPeriod : ILastUpdateTick
	{
		public PupilGroupVacationPeriod()
		{
		}

		public PupilGroupVacationPeriod(PupilGroupVacationPeriod entity) : this(entity, null)
		{
		}

		public PupilGroupVacationPeriod(PupilGroupVacationPeriod entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public PupilGroupVacationPeriod CreateCopy()
		{
			var res = new PupilGroupVacationPeriod(this);
			res.PupilGroups = PupilGroups?.Select(p=>new PupilGroup {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(PupilGroupVacationPeriod entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class PupilsHealthStatus : ILastUpdateTick
	{
		public PupilsHealthStatus()
		{
		}

		public PupilsHealthStatus(PupilsHealthStatus entity) : this(entity, null)
		{
		}

		public PupilsHealthStatus(PupilsHealthStatus entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			PupilsCount = entity.PupilsCount;
			TypeOfRestrictionId = entity.TypeOfRestrictionId;
			if (deep > 0 && entity.TypeOfRestriction != null)
			{
				TypeOfRestriction = new TypeOfRestriction(entity.TypeOfRestriction, deep - 1);
			}

			TypeOfSubRestrictionId = entity.TypeOfSubRestrictionId;
			if (deep > 0 && entity.TypeOfSubRestriction != null)
			{
				TypeOfSubRestriction = new TypeOfSubRestriction(entity.TypeOfSubRestriction, deep - 1);
			}

			PupilGroupId = entity.PupilGroupId;
			if (deep > 0 && entity.PupilGroup != null)
			{
				PupilGroup = new PupilGroup(entity.PupilGroup, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public PupilsHealthStatus CreateCopy()
		{
			var res = new PupilsHealthStatus(this);
			if (TypeOfRestriction != null)
			{
				res.TypeOfRestriction = new TypeOfRestriction{Id=TypeOfRestriction.Id, Eid=TypeOfRestriction.Eid};
			}
			if (TypeOfSubRestriction != null)
			{
				res.TypeOfSubRestriction = new TypeOfSubRestriction{Id=TypeOfSubRestriction.Id, Eid=TypeOfSubRestriction.Eid};
			}
			if (PupilGroup != null)
			{
				res.PupilGroup = new PupilGroup{Id=PupilGroup.Id, Eid=PupilGroup.Eid};
			}
			return res;
		}

		public void CopyEntity(PupilsHealthStatus entity)
		{
			Id = entity.Id;
			PupilsCount = entity.PupilsCount;
			TypeOfRestrictionId = entity.TypeOfRestrictionId;
			TypeOfSubRestrictionId = entity.TypeOfSubRestrictionId;
			PupilGroupId = entity.PupilGroupId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Relative : ILastUpdateTick
	{
		public Relative()
		{
		}

		public Relative(Relative entity) : this(entity, null)
		{
		}

		public Relative(Relative entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			StatusByChildId = entity.StatusByChildId;
			if (deep > 0 && entity.StatusByChild != null)
			{
				StatusByChild = new StatusByChild(entity.StatusByChild, deep - 1);
			}

			ChildId = entity.ChildId;
			if (deep > 0 && entity.Child != null)
			{
				Child = new Child(entity.Child, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Relative CreateCopy()
		{
			var res = new Relative(this);
			if (StatusByChild != null)
			{
				res.StatusByChild = new StatusByChild{Id=StatusByChild.Id, Eid=StatusByChild.Eid};
			}
			if (Child != null)
			{
				res.Child = new Child{Id=Child.Id, Eid=Child.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			return res;
		}

		public void CopyEntity(Relative entity)
		{
			Id = entity.Id;
			StatusByChildId = entity.StatusByChildId;
			ChildId = entity.ChildId;
			ApplicantId = entity.ApplicantId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RelativeUniqe : ILastUpdateTick
	{
		public RelativeUniqe()
		{
		}

		public RelativeUniqe(RelativeUniqe entity) : this(entity, null)
		{
		}

		public RelativeUniqe(RelativeUniqe entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Snils = entity.Snils;
			LastInfoId = entity.LastInfoId;
			if (deep > 0 && entity.LastInfo != null)
			{
				LastInfo = new Applicant(entity.LastInfo, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RelativeUniqe CreateCopy()
		{
			var res = new RelativeUniqe(this);
			if (LastInfo != null)
			{
				res.LastInfo = new Applicant{Id=LastInfo.Id, Eid=LastInfo.Eid};
			}
			res.Relatives = Relatives?.Select(p=>new Applicant {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.RelativeRequests = RelativeRequests?.Select(p=>new RelativeUniqeApplicant {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Children = Children?.Select(p=>new ChildUniqe {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(RelativeUniqe entity)
		{
			Id = entity.Id;
			Snils = entity.Snils;
			LastInfoId = entity.LastInfoId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RelativeUniqeApplicant : ILastUpdateTick
	{
		public RelativeUniqeApplicant()
		{
		}

		public RelativeUniqeApplicant(RelativeUniqeApplicant entity) : this(entity, null)
		{
		}

		public RelativeUniqeApplicant(RelativeUniqeApplicant entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			RelativeUniqeId = entity.RelativeUniqeId;
			if (deep > 0 && entity.RelativeUniqe != null)
			{
				RelativeUniqe = new RelativeUniqe(entity.RelativeUniqe, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RelativeUniqeApplicant CreateCopy()
		{
			var res = new RelativeUniqeApplicant(this);
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (RelativeUniqe != null)
			{
				res.RelativeUniqe = new RelativeUniqe{Id=RelativeUniqe.Id, Eid=RelativeUniqe.Eid};
			}
			return res;
		}

		public void CopyEntity(RelativeUniqeApplicant entity)
		{
			Id = entity.Id;
			ApplicantId = entity.ApplicantId;
			RequestId = entity.RequestId;
			RelativeUniqeId = entity.RelativeUniqeId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ReportRowData : ILastUpdateTick
	{
		public ReportRowData()
		{
		}

		public ReportRowData(ReportRowData entity) : this(entity, null)
		{
		}

		public ReportRowData(ReportRowData entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			SortOrder = entity.SortOrder;
			Style = entity.Style;
			CssClass = entity.CssClass;
			Value = entity.Value;
			Url = entity.Url;
			RowId = entity.RowId;
			if (deep > 0 && entity.Row != null)
			{
				Row = new ReportTableRow(entity.Row, deep - 1);
			}

			ReportTableHeadId = entity.ReportTableHeadId;
			if (deep > 0 && entity.ReportTableHead != null)
			{
				ReportTableHead = new ReportTableHead(entity.ReportTableHead, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ReportRowData CreateCopy()
		{
			var res = new ReportRowData(this);
			if (Row != null)
			{
				res.Row = new ReportTableRow{Id=Row.Id, Eid=Row.Eid};
			}
			if (ReportTableHead != null)
			{
				res.ReportTableHead = new ReportTableHead{Id=ReportTableHead.Id, Eid=ReportTableHead.Eid};
			}
			return res;
		}

		public void CopyEntity(ReportRowData entity)
		{
			Id = entity.Id;
			SortOrder = entity.SortOrder;
			Style = entity.Style;
			CssClass = entity.CssClass;
			Value = entity.Value;
			Url = entity.Url;
			RowId = entity.RowId;
			ReportTableHeadId = entity.ReportTableHeadId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ReportSheet : ILastUpdateTick
	{
		public ReportSheet()
		{
		}

		public ReportSheet(ReportSheet entity) : this(entity, null)
		{
		}

		public ReportSheet(ReportSheet entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			CodeAccess = entity.CodeAccess;
			ReportName = entity.ReportName;
			SortOrder = entity.SortOrder;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ReportSheet CreateCopy()
		{
			var res = new ReportSheet(this);
			res.ReportTables = ReportTables?.Select(p=>new ReportTable {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(ReportSheet entity)
		{
			Id = entity.Id;
			CodeAccess = entity.CodeAccess;
			ReportName = entity.ReportName;
			SortOrder = entity.SortOrder;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ReportTable : ILastUpdateTick
	{
		public ReportTable()
		{
		}

		public ReportTable(ReportTable entity) : this(entity, null)
		{
		}

		public ReportTable(ReportTable entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			CssClass = entity.CssClass;
			SortOrder = entity.SortOrder;
			ReportSheetId = entity.ReportSheetId;
			if (deep > 0 && entity.ReportSheet != null)
			{
				ReportSheet = new ReportSheet(entity.ReportSheet, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ReportTable CreateCopy()
		{
			var res = new ReportTable(this);
			if (ReportSheet != null)
			{
				res.ReportSheet = new ReportSheet{Id=ReportSheet.Id, Eid=ReportSheet.Eid};
			}
			res.ReportTableHeads = ReportTableHeads?.Select(p=>new ReportTableHead {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Rows = Rows?.Select(p=>new ReportTableRow {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(ReportTable entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			CssClass = entity.CssClass;
			SortOrder = entity.SortOrder;
			ReportSheetId = entity.ReportSheetId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ReportTableHead : ILastUpdateTick
	{
		public ReportTableHead()
		{
		}

		public ReportTableHead(ReportTableHead entity) : this(entity, null)
		{
		}

		public ReportTableHead(ReportTableHead entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			CssClass = entity.CssClass;
			SortOrder = entity.SortOrder;
			Style = entity.Style;
			RowSpan = entity.RowSpan;
			ColSpan = entity.ColSpan;
			RowIndex = entity.RowIndex;
			ReportTableId = entity.ReportTableId;
			if (deep > 0 && entity.ReportTable != null)
			{
				ReportTable = new ReportTable(entity.ReportTable, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
			Key = entity.Key;
		}

		public ReportTableHead CreateCopy()
		{
			var res = new ReportTableHead(this);
			if (ReportTable != null)
			{
				res.ReportTable = new ReportTable{Id=ReportTable.Id, Eid=ReportTable.Eid};
			}
			return res;
		}

		public void CopyEntity(ReportTableHead entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			CssClass = entity.CssClass;
			SortOrder = entity.SortOrder;
			Style = entity.Style;
			RowSpan = entity.RowSpan;
			ColSpan = entity.ColSpan;
			RowIndex = entity.RowIndex;
			ReportTableId = entity.ReportTableId;
			LastUpdateTick = entity.LastUpdateTick;
			Key = entity.Key;
		}
	}
	public partial class ReportTableRow : ILastUpdateTick
	{
		public ReportTableRow()
		{
		}

		public ReportTableRow(ReportTableRow entity) : this(entity, null)
		{
		}

		public ReportTableRow(ReportTableRow entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			CssClass = entity.CssClass;
			Style = entity.Style;
			SortOrder = entity.SortOrder;
			TableId = entity.TableId;
			if (deep > 0 && entity.Table != null)
			{
				Table = new ReportTable(entity.Table, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ReportTableRow CreateCopy()
		{
			var res = new ReportTableRow(this);
			if (Table != null)
			{
				res.Table = new ReportTable{Id=Table.Id, Eid=Table.Eid};
			}
			res.RowData = RowData?.Select(p=>new ReportRowData {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(ReportTableRow entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			CssClass = entity.CssClass;
			Style = entity.Style;
			SortOrder = entity.SortOrder;
			TableId = entity.TableId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RepresentInterest : ILastUpdateTick
	{
		public RepresentInterest()
		{
		}

		public RepresentInterest(RepresentInterest entity) : this(entity, null)
		{
		}

		public RepresentInterest(RepresentInterest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RepresentInterest CreateCopy()
		{
			var res = new RepresentInterest(this);
			return res;
		}

		public void CopyEntity(RepresentInterest entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Request : ILastUpdateTick
	{
		public Request()
		{
		}

		public Request(Request entity) : this(entity, null)
		{
		}

		public Request(Request entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			AgentApplicant = entity.AgentApplicant;
			RequestNumber = entity.RequestNumber;
			DateRequest = entity.DateRequest;
			UpdateDate = entity.UpdateDate;
			IsLast = entity.IsLast;
			IsDeleted = entity.IsDeleted;
			Version = entity.Version;
			ExternalUid = entity.ExternalUid;
			ExternalSystem = entity.ExternalSystem;
			MainPlaces = entity.MainPlaces;
			AdditionalPlaces = entity.AdditionalPlaces;
			IsDraft = entity.IsDraft;
			RequestNumberMpgu = entity.RequestNumberMpgu;
			NeedEmail = entity.NeedEmail;
			NeedSms = entity.NeedSms;
			DateChangeStatus = entity.DateChangeStatus;
			BookingGuid = entity.BookingGuid;
			CountPlace = entity.CountPlace;
			CountAttendants = entity.CountAttendants;
			CertificateNumber = entity.CertificateNumber;
			CertificateDate = entity.CertificateDate;
			Price = entity.Price;
			DateIncome = entity.DateIncome;
			DateOutcome = entity.DateOutcome;
			Commentary = entity.Commentary;
			BankName = entity.BankName;
			BankBik = entity.BankBik;
			BankInn = entity.BankInn;
			BankKpp = entity.BankKpp;
			BankCardNumber = entity.BankCardNumber;
			BankCorr = entity.BankCorr;
			BankLastName = entity.BankLastName;
			BankFirstName = entity.BankFirstName;
			BankMiddleName = entity.BankMiddleName;
			BankAccount = entity.BankAccount;
			PriceInternal = entity.PriceInternal;
			DiscountCardNumber = entity.DiscountCardNumber;
			DiscountProcent = entity.DiscountProcent;
			ForIndex = entity.ForIndex;
			SiteUser = entity.SiteUser;
			ChangeByScan = entity.ChangeByScan;
			ProcentPrepaid = entity.ProcentPrepaid;
			ProcentOver = entity.ProcentOver;
			CalculationOnPerson = entity.CalculationOnPerson;
			InternalCommentary = entity.InternalCommentary;
			IsApplicantOrganization = entity.IsApplicantOrganization;
			IsFirstCompany = entity.IsFirstCompany;
			RequestOnMoney = entity.RequestOnMoney;
			NeedSendForBenefit = entity.NeedSendForBenefit;
			NeedSendToRelative = entity.NeedSendToRelative;
			SsoId = entity.SsoId;
			StatusApplicant = entity.StatusApplicant;
			MayFinalSend = entity.MayFinalSend;
			Repared = entity.Repared;
			RefusalOfAdmission = entity.RefusalOfAdmission;
			NeedSendForSnils = entity.NeedSendForSnils;
			NeedSendForCPMPK = entity.NeedSendForCPMPK;
			NeedSendForParent = entity.NeedSendForParent;
			NeedSendForPassport = entity.NeedSendForPassport;
			NeedSendForRegistrationByPassport = entity.NeedSendForRegistrationByPassport;
			NeedSendForAisoLegalRepresentation = entity.NeedSendForAisoLegalRepresentation;
			NeedSendForFRI = entity.NeedSendForFRI;
			StatusId = entity.StatusId;
			if (deep > 0 && entity.Status != null)
			{
				Status = new Status(entity.Status, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			TypeOfRestId = entity.TypeOfRestId;
			if (deep > 0 && entity.TypeOfRest != null)
			{
				TypeOfRest = new TypeOfRest(entity.TypeOfRest, deep - 1);
			}

			TimeOfRestId = entity.TimeOfRestId;
			if (deep > 0 && entity.TimeOfRest != null)
			{
				TimeOfRest = new TimeOfRest(entity.TimeOfRest, deep - 1);
			}

			SubjectOfRestId = entity.SubjectOfRestId;
			if (deep > 0 && entity.SubjectOfRest != null)
			{
				SubjectOfRest = new SubjectOfRest(entity.SubjectOfRest, deep - 1);
			}

			AttendantTypeId = entity.AttendantTypeId;
			if (deep > 0 && entity.AttendantType != null)
			{
				AttendantType = new AttendantType(entity.AttendantType, deep - 1);
			}

			PlaceOfRestId = entity.PlaceOfRestId;
			if (deep > 0 && entity.PlaceOfRest != null)
			{
				PlaceOfRest = new PlaceOfRest(entity.PlaceOfRest, deep - 1);
			}

			AgentId = entity.AgentId;
			if (deep > 0 && entity.Agent != null)
			{
				Agent = new Agent(entity.Agent, deep - 1);
			}

			EntityId = entity.EntityId;
			if (deep > 0 && entity.Entity != null)
			{
				Entity = new Request(entity.Entity, deep - 1);
			}

			SourceId = entity.SourceId;
			if (deep > 0 && entity.Source != null)
			{
				Source = new Source(entity.Source, deep - 1);
			}

			DeclineReasonId = entity.DeclineReasonId;
			if (deep > 0 && entity.DeclineReason != null)
			{
				DeclineReason = new DeclineReason(entity.DeclineReason, deep - 1);
			}

			CuratorId = entity.CuratorId;
			if (deep > 0 && entity.Curator != null)
			{
				Curator = new Account(entity.Curator, deep - 1);
			}

			BeneficiariesId = entity.BeneficiariesId;
			if (deep > 0 && entity.Beneficiaries != null)
			{
				Beneficiaries = new Beneficiaries(entity.Beneficiaries, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			RepresentInterestId = entity.RepresentInterestId;
			if (deep > 0 && entity.RepresentInterest != null)
			{
				RepresentInterest = new RepresentInterest(entity.RepresentInterest, deep - 1);
			}

			TransferFromId = entity.TransferFromId;
			if (deep > 0 && entity.TransferFrom != null)
			{
				TransferFrom = new TypeOfTransfer(entity.TransferFrom, deep - 1);
			}

			TransferToId = entity.TransferToId;
			if (deep > 0 && entity.TransferTo != null)
			{
				TransferTo = new TypeOfTransfer(entity.TransferTo, deep - 1);
			}

			PriorityTypeOfTransportInRequestId = entity.PriorityTypeOfTransportInRequestId;
			if (deep > 0 && entity.PriorityTypeOfTransportInRequest != null)
			{
				PriorityTypeOfTransportInRequest = new TypeOfTransportInRequest(entity.PriorityTypeOfTransportInRequest, deep - 1);
			}

			AdditionalTypeOfTransportInRequestId = entity.AdditionalTypeOfTransportInRequestId;
			if (deep > 0 && entity.AdditionalTypeOfTransportInRequest != null)
			{
				AdditionalTypeOfTransportInRequest = new TypeOfTransportInRequest(entity.AdditionalTypeOfTransportInRequest, deep - 1);
			}

			TypeOfCampId = entity.TypeOfCampId;
			if (deep > 0 && entity.TypeOfCamp != null)
			{
				TypeOfCamp = new TypeOfCamp(entity.TypeOfCamp, deep - 1);
			}

			TypeOfCampAddonId = entity.TypeOfCampAddonId;
			if (deep > 0 && entity.TypeOfCampAddon != null)
			{
				TypeOfCampAddon = new TypeOfCamp(entity.TypeOfCampAddon, deep - 1);
			}

			CreateUserId = entity.CreateUserId;
			if (deep > 0 && entity.CreateUser != null)
			{
				CreateUser = new Account(entity.CreateUser, deep - 1);
			}

			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			HotelsId = entity.HotelsId;
			if (deep > 0 && entity.Hotels != null)
			{
				Hotels = new Hotels(entity.Hotels, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			GroupedTimeOfRestId = entity.GroupedTimeOfRestId;
			if (deep > 0 && entity.GroupedTimeOfRest != null)
			{
				GroupedTimeOfRest = new GroupedTimeOfRest(entity.GroupedTimeOfRest, deep - 1);
			}

			ParentRequestId = entity.ParentRequestId;
			if (deep > 0 && entity.ParentRequest != null)
			{
				ParentRequest = new Request(entity.ParentRequest, deep - 1);
			}

			CityId = entity.CityId;
			if (deep > 0 && entity.City != null)
			{
				City = new City(entity.City, deep - 1);
			}

			TypeOfRestSubtypeId = entity.TypeOfRestSubtypeId;
			if (deep > 0 && entity.TypeOfRestSubtype != null)
			{
				TypeOfRestSubtype = new TypeOfRestSubtype(entity.TypeOfRestSubtype, deep - 1);
			}

			BaseServiceId = entity.BaseServiceId;
			if (deep > 0 && entity.BaseService != null)
			{
				BaseService = new AddonServices(entity.BaseService, deep - 1);
			}

			ParentListOfChildId = entity.ParentListOfChildId;
			if (deep > 0 && entity.ParentListOfChild != null)
			{
				ParentListOfChild = new ListOfChilds(entity.ParentListOfChild, deep - 1);
			}

			ApplicantOrganizationId = entity.ApplicantOrganizationId;
			if (deep > 0 && entity.ApplicantOrganization != null)
			{
				ApplicantOrganization = new Organization(entity.ApplicantOrganization, deep - 1);
			}

			DiscountCardId = entity.DiscountCardId;
			if (deep > 0 && entity.DiscountCard != null)
			{
				DiscountCard = new DiscountCard(entity.DiscountCard, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Request CreateCopy()
		{
			var res = new Request(this);
			if (Status != null)
			{
				res.Status = new Status{Id=Status.Id, Eid=Status.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			if (TypeOfRest != null)
			{
				res.TypeOfRest = new TypeOfRest{Id=TypeOfRest.Id, Eid=TypeOfRest.Eid};
			}
			if (TimeOfRest != null)
			{
				res.TimeOfRest = new TimeOfRest{Id=TimeOfRest.Id, Eid=TimeOfRest.Eid};
			}
			if (SubjectOfRest != null)
			{
				res.SubjectOfRest = new SubjectOfRest{Id=SubjectOfRest.Id, Eid=SubjectOfRest.Eid};
			}
			if (AttendantType != null)
			{
				res.AttendantType = new AttendantType{Id=AttendantType.Id, Eid=AttendantType.Eid};
			}
			if (PlaceOfRest != null)
			{
				res.PlaceOfRest = new PlaceOfRest{Id=PlaceOfRest.Id, Eid=PlaceOfRest.Eid};
			}
			if (Agent != null)
			{
				res.Agent = new Agent{Id=Agent.Id, Eid=Agent.Eid};
			}
			if (Entity != null)
			{
				res.Entity = new Request{Id=Entity.Id, Eid=Entity.Eid};
			}
			if (Source != null)
			{
				res.Source = new Source{Id=Source.Id, Eid=Source.Eid};
			}
			if (DeclineReason != null)
			{
				res.DeclineReason = new DeclineReason{Id=DeclineReason.Id, Eid=DeclineReason.Eid};
			}
			if (Curator != null)
			{
				res.Curator = new Account{Id=Curator.Id, Eid=Curator.Eid};
			}
			if (Beneficiaries != null)
			{
				res.Beneficiaries = new Beneficiaries{Id=Beneficiaries.Id, Eid=Beneficiaries.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (RepresentInterest != null)
			{
				res.RepresentInterest = new RepresentInterest{Id=RepresentInterest.Id, Eid=RepresentInterest.Eid};
			}
			if (TransferFrom != null)
			{
				res.TransferFrom = new TypeOfTransfer{Id=TransferFrom.Id, Eid=TransferFrom.Eid};
			}
			if (TransferTo != null)
			{
				res.TransferTo = new TypeOfTransfer{Id=TransferTo.Id, Eid=TransferTo.Eid};
			}
			if (PriorityTypeOfTransportInRequest != null)
			{
				res.PriorityTypeOfTransportInRequest = new TypeOfTransportInRequest{Id=PriorityTypeOfTransportInRequest.Id, Eid=PriorityTypeOfTransportInRequest.Eid};
			}
			if (AdditionalTypeOfTransportInRequest != null)
			{
				res.AdditionalTypeOfTransportInRequest = new TypeOfTransportInRequest{Id=AdditionalTypeOfTransportInRequest.Id, Eid=AdditionalTypeOfTransportInRequest.Eid};
			}
			if (TypeOfCamp != null)
			{
				res.TypeOfCamp = new TypeOfCamp{Id=TypeOfCamp.Id, Eid=TypeOfCamp.Eid};
			}
			if (TypeOfCampAddon != null)
			{
				res.TypeOfCampAddon = new TypeOfCamp{Id=TypeOfCampAddon.Id, Eid=TypeOfCampAddon.Eid};
			}
			if (CreateUser != null)
			{
				res.CreateUser = new Account{Id=CreateUser.Id, Eid=CreateUser.Eid};
			}
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			if (Hotels != null)
			{
				res.Hotels = new Hotels{Id=Hotels.Id, Eid=Hotels.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			if (GroupedTimeOfRest != null)
			{
				res.GroupedTimeOfRest = new GroupedTimeOfRest{Id=GroupedTimeOfRest.Id, Eid=GroupedTimeOfRest.Eid};
			}
			if (ParentRequest != null)
			{
				res.ParentRequest = new Request{Id=ParentRequest.Id, Eid=ParentRequest.Eid};
			}
			if (City != null)
			{
				res.City = new City{Id=City.Id, Eid=City.Eid};
			}
			if (TypeOfRestSubtype != null)
			{
				res.TypeOfRestSubtype = new TypeOfRestSubtype{Id=TypeOfRestSubtype.Id, Eid=TypeOfRestSubtype.Eid};
			}
			if (BaseService != null)
			{
				res.BaseService = new AddonServices{Id=BaseService.Id, Eid=BaseService.Eid};
			}
			if (ParentListOfChild != null)
			{
				res.ParentListOfChild = new ListOfChilds{Id=ParentListOfChild.Id, Eid=ParentListOfChild.Eid};
			}
			if (ApplicantOrganization != null)
			{
				res.ApplicantOrganization = new Organization{Id=ApplicantOrganization.Id, Eid=ApplicantOrganization.Eid};
			}
			if (DiscountCard != null)
			{
				res.DiscountCard = new DiscountCard{Id=DiscountCard.Id, Eid=DiscountCard.Eid};
			}
			res.Child = Child?.Select(p=>new Child {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Attendant = Attendant?.Select(p=>new Applicant {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Files = Files?.Select(p=>new RequestFile {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Certificates = Certificates?.Select(p=>new Certificate {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.PlacesOfRest = PlacesOfRest?.Select(p=>new RequestPlaceOfRest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.TimesOfRest = TimesOfRest?.Select(p=>new RequestsTimeOfRest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.BookingsCom = BookingsCom?.Select(p=>new BookingCommercial {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.AddonRequests = AddonRequests?.Select(p=>new Request {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.AddonServicesLinks = AddonServicesLinks?.Select(p=>new AddonServicesLink {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.RequestAccommodations = RequestAccommodations?.Select(p=>new RequestAccommodation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Calculations = Calculations?.Select(p=>new Calculation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Tickets = Tickets?.Select(p=>new Ticket {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.InformationVouchers = InformationVouchers?.Select(p=>new RequestInformationVoucher {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.RequestServices = RequestServices?.Select(p=>new RequestService {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.OfferInRequest = OfferInRequest?.Select(p=>new OfferInRequest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Tours = Tours?.Select(p=>new Tour {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Discounts = Discounts?.Select(p=>new Discount {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Request entity)
		{
			Id = entity.Id;
			AgentApplicant = entity.AgentApplicant;
			RequestNumber = entity.RequestNumber;
			DateRequest = entity.DateRequest;
			UpdateDate = entity.UpdateDate;
			IsLast = entity.IsLast;
			IsDeleted = entity.IsDeleted;
			Version = entity.Version;
			ExternalUid = entity.ExternalUid;
			ExternalSystem = entity.ExternalSystem;
			MainPlaces = entity.MainPlaces;
			AdditionalPlaces = entity.AdditionalPlaces;
			IsDraft = entity.IsDraft;
			RequestNumberMpgu = entity.RequestNumberMpgu;
			NeedEmail = entity.NeedEmail;
			NeedSms = entity.NeedSms;
			DateChangeStatus = entity.DateChangeStatus;
			BookingGuid = entity.BookingGuid;
			CountPlace = entity.CountPlace;
			CountAttendants = entity.CountAttendants;
			CertificateNumber = entity.CertificateNumber;
			CertificateDate = entity.CertificateDate;
			Price = entity.Price;
			DateIncome = entity.DateIncome;
			DateOutcome = entity.DateOutcome;
			Commentary = entity.Commentary;
			BankName = entity.BankName;
			BankBik = entity.BankBik;
			BankInn = entity.BankInn;
			BankKpp = entity.BankKpp;
			BankCardNumber = entity.BankCardNumber;
			BankCorr = entity.BankCorr;
			BankLastName = entity.BankLastName;
			BankFirstName = entity.BankFirstName;
			BankMiddleName = entity.BankMiddleName;
			BankAccount = entity.BankAccount;
			PriceInternal = entity.PriceInternal;
			DiscountCardNumber = entity.DiscountCardNumber;
			DiscountProcent = entity.DiscountProcent;
			ForIndex = entity.ForIndex;
			SiteUser = entity.SiteUser;
			ChangeByScan = entity.ChangeByScan;
			ProcentPrepaid = entity.ProcentPrepaid;
			ProcentOver = entity.ProcentOver;
			CalculationOnPerson = entity.CalculationOnPerson;
			InternalCommentary = entity.InternalCommentary;
			IsApplicantOrganization = entity.IsApplicantOrganization;
			IsFirstCompany = entity.IsFirstCompany;
			RequestOnMoney = entity.RequestOnMoney;
			NeedSendForBenefit = entity.NeedSendForBenefit;
			NeedSendToRelative = entity.NeedSendToRelative;
			SsoId = entity.SsoId;
			StatusApplicant = entity.StatusApplicant;
			MayFinalSend = entity.MayFinalSend;
			Repared = entity.Repared;
			RefusalOfAdmission = entity.RefusalOfAdmission;
			NeedSendForSnils = entity.NeedSendForSnils;
			NeedSendForCPMPK = entity.NeedSendForCPMPK;
			NeedSendForParent = entity.NeedSendForParent;
			NeedSendForPassport = entity.NeedSendForPassport;
			NeedSendForRegistrationByPassport = entity.NeedSendForRegistrationByPassport;
			NeedSendForAisoLegalRepresentation = entity.NeedSendForAisoLegalRepresentation;
			NeedSendForFRI = entity.NeedSendForFRI;
			StatusId = entity.StatusId;
			ApplicantId = entity.ApplicantId;
			TypeOfRestId = entity.TypeOfRestId;
			TimeOfRestId = entity.TimeOfRestId;
			SubjectOfRestId = entity.SubjectOfRestId;
			AttendantTypeId = entity.AttendantTypeId;
			PlaceOfRestId = entity.PlaceOfRestId;
			AgentId = entity.AgentId;
			EntityId = entity.EntityId;
			SourceId = entity.SourceId;
			DeclineReasonId = entity.DeclineReasonId;
			CuratorId = entity.CuratorId;
			BeneficiariesId = entity.BeneficiariesId;
			HistoryLinkId = entity.HistoryLinkId;
			RepresentInterestId = entity.RepresentInterestId;
			TransferFromId = entity.TransferFromId;
			TransferToId = entity.TransferToId;
			PriorityTypeOfTransportInRequestId = entity.PriorityTypeOfTransportInRequestId;
			AdditionalTypeOfTransportInRequestId = entity.AdditionalTypeOfTransportInRequestId;
			TypeOfCampId = entity.TypeOfCampId;
			TypeOfCampAddonId = entity.TypeOfCampAddonId;
			CreateUserId = entity.CreateUserId;
			OrganizationId = entity.OrganizationId;
			HotelsId = entity.HotelsId;
			YearOfRestId = entity.YearOfRestId;
			TourId = entity.TourId;
			GroupedTimeOfRestId = entity.GroupedTimeOfRestId;
			ParentRequestId = entity.ParentRequestId;
			CityId = entity.CityId;
			TypeOfRestSubtypeId = entity.TypeOfRestSubtypeId;
			BaseServiceId = entity.BaseServiceId;
			ParentListOfChildId = entity.ParentListOfChildId;
			ApplicantOrganizationId = entity.ApplicantOrganizationId;
			DiscountCardId = entity.DiscountCardId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestAccommodation : ILastUpdateTick
	{
		public RequestAccommodation()
		{
		}

		public RequestAccommodation(RequestAccommodation entity) : this(entity, null)
		{
		}

		public RequestAccommodation(RequestAccommodation entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			Approved = entity.Approved;
			ForCalculation = entity.ForCalculation;
			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			TourVolumeId = entity.TourVolumeId;
			if (deep > 0 && entity.TourVolume != null)
			{
				TourVolume = new TourVolume(entity.TourVolume, deep - 1);
			}

			RoomRatesId = entity.RoomRatesId;
			if (deep > 0 && entity.RoomRates != null)
			{
				RoomRates = new RoomRates(entity.RoomRates, deep - 1);
			}

			TypeOfRoomsId = entity.TypeOfRoomsId;
			if (deep > 0 && entity.TypeOfRooms != null)
			{
				TypeOfRooms = new TypeOfRooms(entity.TypeOfRooms, deep - 1);
			}

			DiningOptionsId = entity.DiningOptionsId;
			if (deep > 0 && entity.DiningOptions != null)
			{
				DiningOptions = new DiningOptions(entity.DiningOptions, deep - 1);
			}

			HotelsId = entity.HotelsId;
			if (deep > 0 && entity.Hotels != null)
			{
				Hotels = new Hotels(entity.Hotels, deep - 1);
			}

			SubjectOfRestId = entity.SubjectOfRestId;
			if (deep > 0 && entity.SubjectOfRest != null)
			{
				SubjectOfRest = new SubjectOfRest(entity.SubjectOfRest, deep - 1);
			}

			AccommodationId = entity.AccommodationId;
			if (deep > 0 && entity.Accommodation != null)
			{
				Accommodation = new Accommodation(entity.Accommodation, deep - 1);
			}

			EventGeographyId = entity.EventGeographyId;
			if (deep > 0 && entity.EventGeography != null)
			{
				EventGeography = new EventGeography(entity.EventGeography, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestAccommodation CreateCopy()
		{
			var res = new RequestAccommodation(this);
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (TourVolume != null)
			{
				res.TourVolume = new TourVolume{Id=TourVolume.Id, Eid=TourVolume.Eid};
			}
			if (RoomRates != null)
			{
				res.RoomRates = new RoomRates{Id=RoomRates.Id, Eid=RoomRates.Eid};
			}
			if (TypeOfRooms != null)
			{
				res.TypeOfRooms = new TypeOfRooms{Id=TypeOfRooms.Id, Eid=TypeOfRooms.Eid};
			}
			if (DiningOptions != null)
			{
				res.DiningOptions = new DiningOptions{Id=DiningOptions.Id, Eid=DiningOptions.Eid};
			}
			if (Hotels != null)
			{
				res.Hotels = new Hotels{Id=Hotels.Id, Eid=Hotels.Eid};
			}
			if (SubjectOfRest != null)
			{
				res.SubjectOfRest = new SubjectOfRest{Id=SubjectOfRest.Id, Eid=SubjectOfRest.Eid};
			}
			if (Accommodation != null)
			{
				res.Accommodation = new Accommodation{Id=Accommodation.Id, Eid=Accommodation.Eid};
			}
			if (EventGeography != null)
			{
				res.EventGeography = new EventGeography{Id=EventGeography.Id, Eid=EventGeography.Eid};
			}
			res.RequestAccommodationLinks = RequestAccommodationLinks?.Select(p=>new RequestAccommodationLink {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Calculations = Calculations?.Select(p=>new Calculation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(RequestAccommodation entity)
		{
			Id = entity.Id;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			Approved = entity.Approved;
			ForCalculation = entity.ForCalculation;
			RequestId = entity.RequestId;
			TourVolumeId = entity.TourVolumeId;
			RoomRatesId = entity.RoomRatesId;
			TypeOfRoomsId = entity.TypeOfRoomsId;
			DiningOptionsId = entity.DiningOptionsId;
			HotelsId = entity.HotelsId;
			SubjectOfRestId = entity.SubjectOfRestId;
			AccommodationId = entity.AccommodationId;
			EventGeographyId = entity.EventGeographyId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestAccommodationLink : ILastUpdateTick
	{
		public RequestAccommodationLink()
		{
		}

		public RequestAccommodationLink(RequestAccommodationLink entity) : this(entity, null)
		{
		}

		public RequestAccommodationLink(RequestAccommodationLink entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Approved = entity.Approved;
			ForCalculation = entity.ForCalculation;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			ChildId = entity.ChildId;
			if (deep > 0 && entity.Child != null)
			{
				Child = new Child(entity.Child, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			RequestAccommodationId = entity.RequestAccommodationId;
			if (deep > 0 && entity.RequestAccommodation != null)
			{
				RequestAccommodation = new RequestAccommodation(entity.RequestAccommodation, deep - 1);
			}

			DiningOptionsId = entity.DiningOptionsId;
			if (deep > 0 && entity.DiningOptions != null)
			{
				DiningOptions = new DiningOptions(entity.DiningOptions, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestAccommodationLink CreateCopy()
		{
			var res = new RequestAccommodationLink(this);
			if (Child != null)
			{
				res.Child = new Child{Id=Child.Id, Eid=Child.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			if (RequestAccommodation != null)
			{
				res.RequestAccommodation = new RequestAccommodation{Id=RequestAccommodation.Id, Eid=RequestAccommodation.Eid};
			}
			if (DiningOptions != null)
			{
				res.DiningOptions = new DiningOptions{Id=DiningOptions.Id, Eid=DiningOptions.Eid};
			}
			return res;
		}

		public void CopyEntity(RequestAccommodationLink entity)
		{
			Id = entity.Id;
			Approved = entity.Approved;
			ForCalculation = entity.ForCalculation;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			ChildId = entity.ChildId;
			ApplicantId = entity.ApplicantId;
			RequestAccommodationId = entity.RequestAccommodationId;
			DiningOptionsId = entity.DiningOptionsId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestEvent : ILastUpdateTick
	{
		public RequestEvent()
		{
		}

		public RequestEvent(RequestEvent entity) : this(entity, null)
		{
		}

		public RequestEvent(RequestEvent entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			EventCode = entity.EventCode;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestEvent CreateCopy()
		{
			var res = new RequestEvent(this);
			return res;
		}

		public void CopyEntity(RequestEvent entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			EventCode = entity.EventCode;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestEventPlanied : ILastUpdateTick
	{
		public RequestEventPlanied()
		{
		}

		public RequestEventPlanied(RequestEventPlanied entity) : this(entity, null)
		{
		}

		public RequestEventPlanied(RequestEventPlanied entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			EventCode = entity.EventCode;
			DateEvent = entity.DateEvent;
			Processed = entity.Processed;
			DateCreate = entity.DateCreate;
			PlanDate = entity.PlanDate;
			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestEventPlanied CreateCopy()
		{
			var res = new RequestEventPlanied(this);
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			return res;
		}

		public void CopyEntity(RequestEventPlanied entity)
		{
			Id = entity.Id;
			EventCode = entity.EventCode;
			DateEvent = entity.DateEvent;
			Processed = entity.Processed;
			DateCreate = entity.DateCreate;
			PlanDate = entity.PlanDate;
			AccountId = entity.AccountId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestFile : ILastUpdateTick
	{
		public RequestFile()
		{
		}

		public RequestFile(RequestFile entity) : this(entity, null)
		{
		}

		public RequestFile(RequestFile entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FileName = entity.FileName;
			FileTitle = entity.FileTitle;
			DataCreate = entity.DataCreate;
			RemoteSave = entity.RemoteSave;
			Description = entity.Description;
			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			RequestFileTypeId = entity.RequestFileTypeId;
			if (deep > 0 && entity.RequestFileType != null)
			{
				RequestFileType = new RequestFileType(entity.RequestFileType, deep - 1);
			}

			CreateUserId = entity.CreateUserId;
			if (deep > 0 && entity.CreateUser != null)
			{
				CreateUser = new Account(entity.CreateUser, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestFile CreateCopy()
		{
			var res = new RequestFile(this);
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (RequestFileType != null)
			{
				res.RequestFileType = new RequestFileType{Id=RequestFileType.Id, Eid=RequestFileType.Eid};
			}
			if (CreateUser != null)
			{
				res.CreateUser = new Account{Id=CreateUser.Id, Eid=CreateUser.Eid};
			}
			return res;
		}

		public void CopyEntity(RequestFile entity)
		{
			Id = entity.Id;
			FileName = entity.FileName;
			FileTitle = entity.FileTitle;
			DataCreate = entity.DataCreate;
			RemoteSave = entity.RemoteSave;
			Description = entity.Description;
			RequestId = entity.RequestId;
			RequestFileTypeId = entity.RequestFileTypeId;
			CreateUserId = entity.CreateUserId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestFileType : ILastUpdateTick
	{
		public RequestFileType()
		{
		}

		public RequestFileType(RequestFileType entity) : this(entity, null)
		{
		}

		public RequestFileType(RequestFileType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			ForMpgu = entity.ForMpgu;
			ForOperator = entity.ForOperator;
			CodeChed = entity.CodeChed;
			CodeAsGuf = entity.CodeAsGuf;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestFileType CreateCopy()
		{
			var res = new RequestFileType(this);
			res.TypeOfRests = TypeOfRests?.Select(p=>new TypeOfRest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(RequestFileType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			ForMpgu = entity.ForMpgu;
			ForOperator = entity.ForOperator;
			CodeChed = entity.CodeChed;
			CodeAsGuf = entity.CodeAsGuf;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestForPeriodOfRest : ILastUpdateTick
	{
		public RequestForPeriodOfRest()
		{
		}

		public RequestForPeriodOfRest(RequestForPeriodOfRest entity) : this(entity, null)
		{
		}

		public RequestForPeriodOfRest(RequestForPeriodOfRest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			PupilsCount = entity.PupilsCount;
			CollaboratorsCount = entity.CollaboratorsCount;
			MGTCollaboratorsCount = entity.MGTCollaboratorsCount;
			VacationFrom = entity.VacationFrom;
			VacationTo = entity.VacationTo;
			TimeOfRestId = entity.TimeOfRestId;
			if (deep > 0 && entity.TimeOfRest != null)
			{
				TimeOfRest = new TimeOfRest(entity.TimeOfRest, deep - 1);
			}

			PlaceOfRestId = entity.PlaceOfRestId;
			if (deep > 0 && entity.PlaceOfRest != null)
			{
				PlaceOfRest = new PlaceOfRest(entity.PlaceOfRest, deep - 1);
			}

			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			PupilGroupId = entity.PupilGroupId;
			if (deep > 0 && entity.PupilGroup != null)
			{
				PupilGroup = new PupilGroup(entity.PupilGroup, deep - 1);
			}

			ListsId = entity.ListsId;
			if (deep > 0 && entity.Lists != null)
			{
				Lists = new ListOfChilds(entity.Lists, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestForPeriodOfRest CreateCopy()
		{
			var res = new RequestForPeriodOfRest(this);
			if (TimeOfRest != null)
			{
				res.TimeOfRest = new TimeOfRest{Id=TimeOfRest.Id, Eid=TimeOfRest.Eid};
			}
			if (PlaceOfRest != null)
			{
				res.PlaceOfRest = new PlaceOfRest{Id=PlaceOfRest.Id, Eid=PlaceOfRest.Eid};
			}
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			if (PupilGroup != null)
			{
				res.PupilGroup = new PupilGroup{Id=PupilGroup.Id, Eid=PupilGroup.Eid};
			}
			if (Lists != null)
			{
				res.Lists = new ListOfChilds{Id=Lists.Id, Eid=Lists.Eid};
			}
			return res;
		}

		public void CopyEntity(RequestForPeriodOfRest entity)
		{
			Id = entity.Id;
			PupilsCount = entity.PupilsCount;
			CollaboratorsCount = entity.CollaboratorsCount;
			MGTCollaboratorsCount = entity.MGTCollaboratorsCount;
			VacationFrom = entity.VacationFrom;
			VacationTo = entity.VacationTo;
			TimeOfRestId = entity.TimeOfRestId;
			PlaceOfRestId = entity.PlaceOfRestId;
			TourId = entity.TourId;
			PupilGroupId = entity.PupilGroupId;
			ListsId = entity.ListsId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestInformationVoucher : ILastUpdateTick
	{
		public RequestInformationVoucher()
		{
		}

		public RequestInformationVoucher(RequestInformationVoucher entity) : this(entity, null)
		{
		}

		public RequestInformationVoucher(RequestInformationVoucher entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			OrganizationName = entity.OrganizationName;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Price = entity.Price;
			CostOfRide = entity.CostOfRide;
			CountPeople = entity.CountPeople;
			TypeId = entity.TypeId;
			if (deep > 0 && entity.Type != null)
			{
				Type = new TypeRequestInformationVoucher(entity.Type, deep - 1);
			}

			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestInformationVoucher CreateCopy()
		{
			var res = new RequestInformationVoucher(this);
			if (Type != null)
			{
				res.Type = new TypeRequestInformationVoucher{Id=Type.Id, Eid=Type.Eid};
			}
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			res.AttendantsPrice = AttendantsPrice?.Select(p=>new RequestInformationVoucherAttendant {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(RequestInformationVoucher entity)
		{
			Id = entity.Id;
			OrganizationName = entity.OrganizationName;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Price = entity.Price;
			CostOfRide = entity.CostOfRide;
			CountPeople = entity.CountPeople;
			TypeId = entity.TypeId;
			RequestId = entity.RequestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestInformationVoucherAttendant : ILastUpdateTick
	{
		public RequestInformationVoucherAttendant()
		{
		}

		public RequestInformationVoucherAttendant(RequestInformationVoucherAttendant entity) : this(entity, null)
		{
		}

		public RequestInformationVoucherAttendant(RequestInformationVoucherAttendant entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Price = entity.Price;
			CostOfRide = entity.CostOfRide;
			AmountOfCompensation = entity.AmountOfCompensation;
			RequestInformationVoucherId = entity.RequestInformationVoucherId;
			if (deep > 0 && entity.RequestInformationVoucher != null)
			{
				RequestInformationVoucher = new RequestInformationVoucher(entity.RequestInformationVoucher, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
			AttendantGuid = entity.AttendantGuid;
		}

		public RequestInformationVoucherAttendant CreateCopy()
		{
			var res = new RequestInformationVoucherAttendant(this);
			if (RequestInformationVoucher != null)
			{
				res.RequestInformationVoucher = new RequestInformationVoucher{Id=RequestInformationVoucher.Id, Eid=RequestInformationVoucher.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			return res;
		}

		public void CopyEntity(RequestInformationVoucherAttendant entity)
		{
			Id = entity.Id;
			Price = entity.Price;
			CostOfRide = entity.CostOfRide;
			AmountOfCompensation = entity.AmountOfCompensation;
			RequestInformationVoucherId = entity.RequestInformationVoucherId;
			ApplicantId = entity.ApplicantId;
			LastUpdateTick = entity.LastUpdateTick;
			AttendantGuid = entity.AttendantGuid;
		}
	}
	public partial class RequestPlaceOfRest : ILastUpdateTick
	{
		public RequestPlaceOfRest()
		{
		}

		public RequestPlaceOfRest(RequestPlaceOfRest entity) : this(entity, null)
		{
		}

		public RequestPlaceOfRest(RequestPlaceOfRest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Order = entity.Order;
			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			PlaceOfRestId = entity.PlaceOfRestId;
			if (deep > 0 && entity.PlaceOfRest != null)
			{
				PlaceOfRest = new PlaceOfRest(entity.PlaceOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestPlaceOfRest CreateCopy()
		{
			var res = new RequestPlaceOfRest(this);
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (PlaceOfRest != null)
			{
				res.PlaceOfRest = new PlaceOfRest{Id=PlaceOfRest.Id, Eid=PlaceOfRest.Eid};
			}
			return res;
		}

		public void CopyEntity(RequestPlaceOfRest entity)
		{
			Id = entity.Id;
			Order = entity.Order;
			RequestId = entity.RequestId;
			PlaceOfRestId = entity.PlaceOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestService : ILastUpdateTick
	{
		public RequestService()
		{
		}

		public RequestService(RequestService entity) : this(entity, null)
		{
		}

		public RequestService(RequestService entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			AddonServicesId = entity.AddonServicesId;
			if (deep > 0 && entity.AddonServices != null)
			{
				AddonServices = new AddonServices(entity.AddonServices, deep - 1);
			}

			DirectoryFlightsId = entity.DirectoryFlightsId;
			if (deep > 0 && entity.DirectoryFlights != null)
			{
				DirectoryFlights = new DirectoryFlights(entity.DirectoryFlights, deep - 1);
			}

			ParentId = entity.ParentId;
			if (deep > 0 && entity.Parent != null)
			{
				Parent = new RequestService(entity.Parent, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestService CreateCopy()
		{
			var res = new RequestService(this);
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (AddonServices != null)
			{
				res.AddonServices = new AddonServices{Id=AddonServices.Id, Eid=AddonServices.Eid};
			}
			if (DirectoryFlights != null)
			{
				res.DirectoryFlights = new DirectoryFlights{Id=DirectoryFlights.Id, Eid=DirectoryFlights.Eid};
			}
			if (Parent != null)
			{
				res.Parent = new RequestService{Id=Parent.Id, Eid=Parent.Eid};
			}
			res.Peoples = Peoples?.Select(p=>new AddonServicesLink {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Childs = Childs?.Select(p=>new RequestService {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(RequestService entity)
		{
			Id = entity.Id;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			RequestId = entity.RequestId;
			AddonServicesId = entity.AddonServicesId;
			DirectoryFlightsId = entity.DirectoryFlightsId;
			ParentId = entity.ParentId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestStatusChainForMpgu : ILastUpdateTick
	{
		public RequestStatusChainForMpgu()
		{
		}

		public RequestStatusChainForMpgu(RequestStatusChainForMpgu entity) : this(entity, null)
		{
		}

		public RequestStatusChainForMpgu(RequestStatusChainForMpgu entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			RequestOnMoney = entity.RequestOnMoney;
			IsFirstCompany = entity.IsFirstCompany;
			StatusId = entity.StatusId;
			if (deep > 0 && entity.Status != null)
			{
				Status = new Status(entity.Status, deep - 1);
			}

			StatusActionId = entity.StatusActionId;
			if (deep > 0 && entity.StatusAction != null)
			{
				StatusAction = new StatusAction(entity.StatusAction, deep - 1);
			}

			DeclineReasonId = entity.DeclineReasonId;
			if (deep > 0 && entity.DeclineReason != null)
			{
				DeclineReason = new DeclineReason(entity.DeclineReason, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			RequestEventId = entity.RequestEventId;
			if (deep > 0 && entity.RequestEvent != null)
			{
				RequestEvent = new RequestEvent(entity.RequestEvent, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestStatusChainForMpgu CreateCopy()
		{
			var res = new RequestStatusChainForMpgu(this);
			if (Status != null)
			{
				res.Status = new Status{Id=Status.Id, Eid=Status.Eid};
			}
			if (StatusAction != null)
			{
				res.StatusAction = new StatusAction{Id=StatusAction.Id, Eid=StatusAction.Eid};
			}
			if (DeclineReason != null)
			{
				res.DeclineReason = new DeclineReason{Id=DeclineReason.Id, Eid=DeclineReason.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (RequestEvent != null)
			{
				res.RequestEvent = new RequestEvent{Id=RequestEvent.Id, Eid=RequestEvent.Eid};
			}
			res.Statuses = Statuses?.Select(p=>new RequestStatusForMpgu {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(RequestStatusChainForMpgu entity)
		{
			Id = entity.Id;
			RequestOnMoney = entity.RequestOnMoney;
			IsFirstCompany = entity.IsFirstCompany;
			StatusId = entity.StatusId;
			StatusActionId = entity.StatusActionId;
			DeclineReasonId = entity.DeclineReasonId;
			YearOfRestId = entity.YearOfRestId;
			RequestEventId = entity.RequestEventId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestStatusCshedSendAndSignDocument : ILastUpdateTick
	{
		public RequestStatusCshedSendAndSignDocument()
		{
		}

		public RequestStatusCshedSendAndSignDocument(RequestStatusCshedSendAndSignDocument entity) : this(entity, null)
		{
		}

		public RequestStatusCshedSendAndSignDocument(RequestStatusCshedSendAndSignDocument entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DocumentPath = entity.DocumentPath;
			SignNeed = entity.SignNeed;
			MpguStatusId = entity.MpguStatusId;
			if (deep > 0 && entity.MpguStatus != null)
			{
				MpguStatus = new RequestStatusForMpgu(entity.MpguStatus, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestStatusCshedSendAndSignDocument CreateCopy()
		{
			var res = new RequestStatusCshedSendAndSignDocument(this);
			if (MpguStatus != null)
			{
				res.MpguStatus = new RequestStatusForMpgu{Id=MpguStatus.Id, Eid=MpguStatus.Eid};
			}
			return res;
		}

		public void CopyEntity(RequestStatusCshedSendAndSignDocument entity)
		{
			Id = entity.Id;
			DocumentPath = entity.DocumentPath;
			SignNeed = entity.SignNeed;
			MpguStatusId = entity.MpguStatusId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestStatusForMpgu : ILastUpdateTick
	{
		public RequestStatusForMpgu()
		{
		}

		public RequestStatusForMpgu(RequestStatusForMpgu entity) : this(entity, null)
		{
		}

		public RequestStatusForMpgu(RequestStatusForMpgu entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Status = entity.Status;
			ReasonCode = entity.ReasonCode;
			Commentary = entity.Commentary;
			Name = entity.Name;
			OrderField = entity.OrderField;
			SendEmail = entity.SendEmail;
			NotificationToSend = entity.NotificationToSend;
			ChainId = entity.ChainId;
			if (deep > 0 && entity.Chain != null)
			{
				Chain = new RequestStatusChainForMpgu(entity.Chain, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestStatusForMpgu CreateCopy()
		{
			var res = new RequestStatusForMpgu(this);
			if (Chain != null)
			{
				res.Chain = new RequestStatusChainForMpgu{Id=Chain.Id, Eid=Chain.Eid};
			}
			res.CshedDocAndSign = CshedDocAndSign?.Select(p=>new RequestStatusCshedSendAndSignDocument {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(RequestStatusForMpgu entity)
		{
			Id = entity.Id;
			Status = entity.Status;
			ReasonCode = entity.ReasonCode;
			Commentary = entity.Commentary;
			Name = entity.Name;
			OrderField = entity.OrderField;
			SendEmail = entity.SendEmail;
			NotificationToSend = entity.NotificationToSend;
			ChainId = entity.ChainId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RequestsTimeOfRest : ILastUpdateTick
	{
		public RequestsTimeOfRest()
		{
		}

		public RequestsTimeOfRest(RequestsTimeOfRest entity) : this(entity, null)
		{
		}

		public RequestsTimeOfRest(RequestsTimeOfRest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Order = entity.Order;
			TimeOfRestId = entity.TimeOfRestId;
			if (deep > 0 && entity.TimeOfRest != null)
			{
				TimeOfRest = new TimeOfRest(entity.TimeOfRest, deep - 1);
			}

			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RequestsTimeOfRest CreateCopy()
		{
			var res = new RequestsTimeOfRest(this);
			if (TimeOfRest != null)
			{
				res.TimeOfRest = new TimeOfRest{Id=TimeOfRest.Id, Eid=TimeOfRest.Eid};
			}
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			return res;
		}

		public void CopyEntity(RequestsTimeOfRest entity)
		{
			Id = entity.Id;
			Order = entity.Order;
			TimeOfRestId = entity.TimeOfRestId;
			RequestId = entity.RequestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ResponsibilityForTask : ILastUpdateTick
	{
		public ResponsibilityForTask()
		{
		}

		public ResponsibilityForTask(ResponsibilityForTask entity) : this(entity, null)
		{
		}

		public ResponsibilityForTask(ResponsibilityForTask entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			CounselorsId = entity.CounselorsId;
			if (deep > 0 && entity.Counselors != null)
			{
				Counselors = new Counselors(entity.Counselors, deep - 1);
			}

			AdministratorTourId = entity.AdministratorTourId;
			if (deep > 0 && entity.AdministratorTour != null)
			{
				AdministratorTour = new AdministratorTour(entity.AdministratorTour, deep - 1);
			}

			BoutId = entity.BoutId;
			if (deep > 0 && entity.Bout != null)
			{
				Bout = new Bout(entity.Bout, deep - 1);
			}

			PartyId = entity.PartyId;
			if (deep > 0 && entity.Party != null)
			{
				Party = new Party(entity.Party, deep - 1);
			}

			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			CounselorTaskExecutorTypeId = entity.CounselorTaskExecutorTypeId;
			if (deep > 0 && entity.CounselorTaskExecutorType != null)
			{
				CounselorTaskExecutorType = new CounselorTaskExecutorType(entity.CounselorTaskExecutorType, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ResponsibilityForTask CreateCopy()
		{
			var res = new ResponsibilityForTask(this);
			if (Counselors != null)
			{
				res.Counselors = new Counselors{Id=Counselors.Id, Eid=Counselors.Eid};
			}
			if (AdministratorTour != null)
			{
				res.AdministratorTour = new AdministratorTour{Id=AdministratorTour.Id, Eid=AdministratorTour.Eid};
			}
			if (Bout != null)
			{
				res.Bout = new Bout{Id=Bout.Id, Eid=Bout.Eid};
			}
			if (Party != null)
			{
				res.Party = new Party{Id=Party.Id, Eid=Party.Eid};
			}
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			if (CounselorTaskExecutorType != null)
			{
				res.CounselorTaskExecutorType = new CounselorTaskExecutorType{Id=CounselorTaskExecutorType.Id, Eid=CounselorTaskExecutorType.Eid};
			}
			return res;
		}

		public void CopyEntity(ResponsibilityForTask entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			CounselorsId = entity.CounselorsId;
			AdministratorTourId = entity.AdministratorTourId;
			BoutId = entity.BoutId;
			PartyId = entity.PartyId;
			AccountId = entity.AccountId;
			CounselorTaskExecutorTypeId = entity.CounselorTaskExecutorTypeId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RestrictionGroup : ILastUpdateTick
	{
		public RestrictionGroup()
		{
		}

		public RestrictionGroup(RestrictionGroup entity) : this(entity, null)
		{
		}

		public RestrictionGroup(RestrictionGroup entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Number = entity.Number;
			IsDeleted = entity.IsDeleted;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RestrictionGroup CreateCopy()
		{
			var res = new RestrictionGroup(this);
			return res;
		}

		public void CopyEntity(RestrictionGroup entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Number = entity.Number;
			IsDeleted = entity.IsDeleted;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Role : ILastUpdateTick
	{
		public Role()
		{
		}

		public Role(Role entity) : this(entity, null)
		{
		}

		public Role(Role entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			CreateUserId = entity.CreateUserId;
			if (deep > 0 && entity.CreateUser != null)
			{
				CreateUser = new Account(entity.CreateUser, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Role CreateCopy()
		{
			var res = new Role(this);
			if (CreateUser != null)
			{
				res.CreateUser = new Account{Id=CreateUser.Id, Eid=CreateUser.Eid};
			}
			res.AccessRights = AccessRights?.Select(p=>new AccessRight {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Role entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			CreateUserId = entity.CreateUserId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class RoomRates : ILastUpdateTick
	{
		public RoomRates()
		{
		}

		public RoomRates(RoomRates entity) : this(entity, null)
		{
		}

		public RoomRates(RoomRates entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Price = entity.Price;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			IsAddonPlace = entity.IsAddonPlace;
			PriceInternal = entity.PriceInternal;
			PriceTotal = entity.PriceTotal;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			HotelId = entity.HotelId;
			if (deep > 0 && entity.Hotel != null)
			{
				Hotel = new Hotels(entity.Hotel, deep - 1);
			}

			DiningOptionsId = entity.DiningOptionsId;
			if (deep > 0 && entity.DiningOptions != null)
			{
				DiningOptions = new DiningOptions(entity.DiningOptions, deep - 1);
			}

			AccommodationId = entity.AccommodationId;
			if (deep > 0 && entity.Accommodation != null)
			{
				Accommodation = new Accommodation(entity.Accommodation, deep - 1);
			}

			TypeOfRoomsId = entity.TypeOfRoomsId;
			if (deep > 0 && entity.TypeOfRooms != null)
			{
				TypeOfRooms = new TypeOfRooms(entity.TypeOfRooms, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			SubjectOfRestId = entity.SubjectOfRestId;
			if (deep > 0 && entity.SubjectOfRest != null)
			{
				SubjectOfRest = new SubjectOfRest(entity.SubjectOfRest, deep - 1);
			}

			TourAccommodationId = entity.TourAccommodationId;
			if (deep > 0 && entity.TourAccommodation != null)
			{
				TourAccommodation = new TourAccommodation(entity.TourAccommodation, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public RoomRates CreateCopy()
		{
			var res = new RoomRates(this);
			if (Hotel != null)
			{
				res.Hotel = new Hotels{Id=Hotel.Id, Eid=Hotel.Eid};
			}
			if (DiningOptions != null)
			{
				res.DiningOptions = new DiningOptions{Id=DiningOptions.Id, Eid=DiningOptions.Eid};
			}
			if (Accommodation != null)
			{
				res.Accommodation = new Accommodation{Id=Accommodation.Id, Eid=Accommodation.Eid};
			}
			if (TypeOfRooms != null)
			{
				res.TypeOfRooms = new TypeOfRooms{Id=TypeOfRooms.Id, Eid=TypeOfRooms.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			if (SubjectOfRest != null)
			{
				res.SubjectOfRest = new SubjectOfRest{Id=SubjectOfRest.Id, Eid=SubjectOfRest.Eid};
			}
			if (TourAccommodation != null)
			{
				res.TourAccommodation = new TourAccommodation{Id=TourAccommodation.Id, Eid=TourAccommodation.Eid};
			}
			return res;
		}

		public void CopyEntity(RoomRates entity)
		{
			Id = entity.Id;
			Price = entity.Price;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			IsAddonPlace = entity.IsAddonPlace;
			PriceInternal = entity.PriceInternal;
			PriceTotal = entity.PriceTotal;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			HotelId = entity.HotelId;
			DiningOptionsId = entity.DiningOptionsId;
			AccommodationId = entity.AccommodationId;
			TypeOfRoomsId = entity.TypeOfRoomsId;
			YearOfRestId = entity.YearOfRestId;
			TourId = entity.TourId;
			SubjectOfRestId = entity.SubjectOfRestId;
			TourAccommodationId = entity.TourAccommodationId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ScheduleMessage : ILastUpdateTick
	{
		public ScheduleMessage()
		{
		}

		public ScheduleMessage(ScheduleMessage entity) : this(entity, null)
		{
		}

		public ScheduleMessage(ScheduleMessage entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Message = entity.Message;
			DateMessage = entity.DateMessage;
			Processed = entity.Processed;
			HasError = entity.HasError;
			ErrorMessage = entity.ErrorMessage;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ScheduleMessage CreateCopy()
		{
			var res = new ScheduleMessage(this);
			return res;
		}

		public void CopyEntity(ScheduleMessage entity)
		{
			Id = entity.Id;
			Message = entity.Message;
			DateMessage = entity.DateMessage;
			Processed = entity.Processed;
			HasError = entity.HasError;
			ErrorMessage = entity.ErrorMessage;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class School : ILastUpdateTick
	{
		public School()
		{
		}

		public School(School entity) : this(entity, null)
		{
		}

		public School(School entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			SourcePk = entity.SourcePk;
			Status = entity.Status;
			CloseDate = entity.CloseDate;
			ToOrganizationId = entity.ToOrganizationId;
			OrganizationGuid = entity.OrganizationGuid;
			DateChange = entity.DateChange;
			ExternalId = entity.ExternalId;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public School CreateCopy()
		{
			var res = new School(this);
			res.Pupil = Pupil?.Select(p=>new Pupil {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(School entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			SourcePk = entity.SourcePk;
			Status = entity.Status;
			CloseDate = entity.CloseDate;
			ToOrganizationId = entity.ToOrganizationId;
			OrganizationGuid = entity.OrganizationGuid;
			DateChange = entity.DateChange;
			ExternalId = entity.ExternalId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SearchFormSetting : ILastUpdateTick
	{
		public SearchFormSetting()
		{
		}

		public SearchFormSetting(SearchFormSetting entity) : this(entity, null)
		{
		}

		public SearchFormSetting(SearchFormSetting entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FormCode = entity.FormCode;
			Settings = entity.Settings;
			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SearchFormSetting CreateCopy()
		{
			var res = new SearchFormSetting(this);
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			return res;
		}

		public void CopyEntity(SearchFormSetting entity)
		{
			Id = entity.Id;
			FormCode = entity.FormCode;
			Settings = entity.Settings;
			AccountId = entity.AccountId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SecurityJournal : ILastUpdateTick
	{
		public SecurityJournal()
		{
		}

		public SecurityJournal(SecurityJournal entity) : this(entity, null)
		{
		}

		public SecurityJournal(SecurityJournal entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateEvent = entity.DateEvent;
			EventName = entity.EventName;
			Description = entity.Description;
			Brouser = entity.Brouser;
			UserName = entity.UserName;
			SecurityJournalTypeId = entity.SecurityJournalTypeId;
			if (deep > 0 && entity.SecurityJournalType != null)
			{
				SecurityJournalType = new SecurityJournalType(entity.SecurityJournalType, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SecurityJournal CreateCopy()
		{
			var res = new SecurityJournal(this);
			if (SecurityJournalType != null)
			{
				res.SecurityJournalType = new SecurityJournalType{Id=SecurityJournalType.Id, Eid=SecurityJournalType.Eid};
			}
			return res;
		}

		public void CopyEntity(SecurityJournal entity)
		{
			Id = entity.Id;
			DateEvent = entity.DateEvent;
			EventName = entity.EventName;
			Description = entity.Description;
			Brouser = entity.Brouser;
			UserName = entity.UserName;
			SecurityJournalTypeId = entity.SecurityJournalTypeId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SecurityJournalType : ILastUpdateTick
	{
		public SecurityJournalType()
		{
		}

		public SecurityJournalType(SecurityJournalType entity) : this(entity, null)
		{
		}

		public SecurityJournalType(SecurityJournalType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SecurityJournalType CreateCopy()
		{
			var res = new SecurityJournalType(this);
			return res;
		}

		public void CopyEntity(SecurityJournalType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SecuritySetting : ILastUpdateTick
	{
		public SecuritySetting()
		{
		}

		public SecuritySetting(SecuritySetting entity) : this(entity, null)
		{
		}

		public SecuritySetting(SecuritySetting entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			ValueJson = entity.ValueJson;
			ValueInt = entity.ValueInt;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SecuritySetting CreateCopy()
		{
			var res = new SecuritySetting(this);
			return res;
		}

		public void CopyEntity(SecuritySetting entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			ValueJson = entity.ValueJson;
			ValueInt = entity.ValueInt;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SendEmailAndSms : ILastUpdateTick
	{
		public SendEmailAndSms()
		{
		}

		public SendEmailAndSms(SendEmailAndSms entity) : this(entity, null)
		{
		}

		public SendEmailAndSms(SendEmailAndSms entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Email = entity.Email;
			Phone = entity.Phone;
			EmailMessage = entity.EmailMessage;
			EmailTitle = entity.EmailTitle;
			SmsMessage = entity.SmsMessage;
			IsEmailSended = entity.IsEmailSended;
			IsSmsSended = entity.IsSmsSended;
			DateCreate = entity.DateCreate;
			DateEmail = entity.DateEmail;
			DateSms = entity.DateSms;
			DateToSend = entity.DateToSend;
			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			StatusRequestId = entity.StatusRequestId;
			if (deep > 0 && entity.StatusRequest != null)
			{
				StatusRequest = new Status(entity.StatusRequest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SendEmailAndSms CreateCopy()
		{
			var res = new SendEmailAndSms(this);
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (StatusRequest != null)
			{
				res.StatusRequest = new Status{Id=StatusRequest.Id, Eid=StatusRequest.Eid};
			}
			res.Attachments = Attachments?.Select(p=>new SendEmailAndSmsAttachment {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(SendEmailAndSms entity)
		{
			Id = entity.Id;
			Email = entity.Email;
			Phone = entity.Phone;
			EmailMessage = entity.EmailMessage;
			EmailTitle = entity.EmailTitle;
			SmsMessage = entity.SmsMessage;
			IsEmailSended = entity.IsEmailSended;
			IsSmsSended = entity.IsSmsSended;
			DateCreate = entity.DateCreate;
			DateEmail = entity.DateEmail;
			DateSms = entity.DateSms;
			DateToSend = entity.DateToSend;
			RequestId = entity.RequestId;
			StatusRequestId = entity.StatusRequestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SendEmailAndSmsAttachment : ILastUpdateTick
	{
		public SendEmailAndSmsAttachment()
		{
		}

		public SendEmailAndSmsAttachment(SendEmailAndSmsAttachment entity) : this(entity, null)
		{
		}

		public SendEmailAndSmsAttachment(SendEmailAndSmsAttachment entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			UrlToDownload = entity.UrlToDownload;
			SendEmailAndSmsId = entity.SendEmailAndSmsId;
			if (deep > 0 && entity.SendEmailAndSms != null)
			{
				SendEmailAndSms = new SendEmailAndSms(entity.SendEmailAndSms, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SendEmailAndSmsAttachment CreateCopy()
		{
			var res = new SendEmailAndSmsAttachment(this);
			if (SendEmailAndSms != null)
			{
				res.SendEmailAndSms = new SendEmailAndSms{Id=SendEmailAndSms.Id, Eid=SendEmailAndSms.Eid};
			}
			return res;
		}

		public void CopyEntity(SendEmailAndSmsAttachment entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			UrlToDownload = entity.UrlToDownload;
			SendEmailAndSmsId = entity.SendEmailAndSmsId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ServiceBlock : ILastUpdateTick
	{
		public ServiceBlock()
		{
		}

		public ServiceBlock(ServiceBlock entity) : this(entity, null)
		{
		}

		public ServiceBlock(ServiceBlock entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Count = entity.Count;
			AddonServicesId = entity.AddonServicesId;
			if (deep > 0 && entity.AddonServices != null)
			{
				AddonServices = new AddonServices(entity.AddonServices, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ServiceBlock CreateCopy()
		{
			var res = new ServiceBlock(this);
			if (AddonServices != null)
			{
				res.AddonServices = new AddonServices{Id=AddonServices.Id, Eid=AddonServices.Eid};
			}
			res.Dates = Dates?.Select(p=>new ServiceBlockDate {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(ServiceBlock entity)
		{
			Id = entity.Id;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			Count = entity.Count;
			AddonServicesId = entity.AddonServicesId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class ServiceBlockDate : ILastUpdateTick
	{
		public ServiceBlockDate()
		{
		}

		public ServiceBlockDate(ServiceBlockDate entity) : this(entity, null)
		{
		}

		public ServiceBlockDate(ServiceBlockDate entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Date = entity.Date;
			Count = entity.Count;
			Free = entity.Free;
			BlockId = entity.BlockId;
			if (deep > 0 && entity.Block != null)
			{
				Block = new ServiceBlock(entity.Block, deep - 1);
			}

			AddonServicesId = entity.AddonServicesId;
			if (deep > 0 && entity.AddonServices != null)
			{
				AddonServices = new AddonServices(entity.AddonServices, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public ServiceBlockDate CreateCopy()
		{
			var res = new ServiceBlockDate(this);
			if (Block != null)
			{
				res.Block = new ServiceBlock{Id=Block.Id, Eid=Block.Eid};
			}
			if (AddonServices != null)
			{
				res.AddonServices = new AddonServices{Id=AddonServices.Id, Eid=AddonServices.Eid};
			}
			return res;
		}

		public void CopyEntity(ServiceBlockDate entity)
		{
			Id = entity.Id;
			Date = entity.Date;
			Count = entity.Count;
			Free = entity.Free;
			BlockId = entity.BlockId;
			AddonServicesId = entity.AddonServicesId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SignInfo : ILastUpdateTick
	{
		public SignInfo()
		{
		}

		public SignInfo(SignInfo entity) : this(entity, null)
		{
		}

		public SignInfo(SignInfo entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			SignDate = entity.SignDate;
			FileUrl = entity.FileUrl;
			Title = entity.Title;
			Information = entity.Information;
			AccountId = entity.AccountId;
			if (deep > 0 && entity.Account != null)
			{
				Account = new Account(entity.Account, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SignInfo CreateCopy()
		{
			var res = new SignInfo(this);
			if (Account != null)
			{
				res.Account = new Account{Id=Account.Id, Eid=Account.Eid};
			}
			return res;
		}

		public void CopyEntity(SignInfo entity)
		{
			Id = entity.Id;
			SignDate = entity.SignDate;
			FileUrl = entity.FileUrl;
			Title = entity.Title;
			Information = entity.Information;
			AccountId = entity.AccountId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Skill : ILastUpdateTick
	{
		public Skill()
		{
		}

		public Skill(Skill entity) : this(entity, null)
		{
		}

		public Skill(Skill entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			SortOrder = entity.SortOrder;
			NeedText = entity.NeedText;
			NeedVocabulary = entity.NeedVocabulary;
			SkillsGroupId = entity.SkillsGroupId;
			if (deep > 0 && entity.SkillsGroup != null)
			{
				SkillsGroup = new SkillsGroup(entity.SkillsGroup, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Skill CreateCopy()
		{
			var res = new Skill(this);
			if (SkillsGroup != null)
			{
				res.SkillsGroup = new SkillsGroup{Id=SkillsGroup.Id, Eid=SkillsGroup.Eid};
			}
			res.Values = Values?.Select(p=>new SkillVocabulary {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Skill entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			SortOrder = entity.SortOrder;
			NeedText = entity.NeedText;
			NeedVocabulary = entity.NeedVocabulary;
			SkillsGroupId = entity.SkillsGroupId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SkillsGroup : ILastUpdateTick
	{
		public SkillsGroup()
		{
		}

		public SkillsGroup(SkillsGroup entity) : this(entity, null)
		{
		}

		public SkillsGroup(SkillsGroup entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			SortOrder = entity.SortOrder;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SkillsGroup CreateCopy()
		{
			var res = new SkillsGroup(this);
			return res;
		}

		public void CopyEntity(SkillsGroup entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			SortOrder = entity.SortOrder;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SkillVocabulary : ILastUpdateTick
	{
		public SkillVocabulary()
		{
		}

		public SkillVocabulary(SkillVocabulary entity) : this(entity, null)
		{
		}

		public SkillVocabulary(SkillVocabulary entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			SortOrder = entity.SortOrder;
			IsActive = entity.IsActive;
			SkillId = entity.SkillId;
			if (deep > 0 && entity.Skill != null)
			{
				Skill = new Skill(entity.Skill, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SkillVocabulary CreateCopy()
		{
			var res = new SkillVocabulary(this);
			if (Skill != null)
			{
				res.Skill = new Skill{Id=Skill.Id, Eid=Skill.Eid};
			}
			return res;
		}

		public void CopyEntity(SkillVocabulary entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			SortOrder = entity.SortOrder;
			IsActive = entity.IsActive;
			SkillId = entity.SkillId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SmallLeisureSubtype : ILastUpdateTick
	{
		public SmallLeisureSubtype()
		{
		}

		public SmallLeisureSubtype(SmallLeisureSubtype entity) : this(entity, null)
		{
		}

		public SmallLeisureSubtype(SmallLeisureSubtype entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			SmallLeisureTypeId = entity.SmallLeisureTypeId;
			if (deep > 0 && entity.SmallLeisureType != null)
			{
				SmallLeisureType = new SmallLeisureType(entity.SmallLeisureType, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SmallLeisureSubtype CreateCopy()
		{
			var res = new SmallLeisureSubtype(this);
			if (SmallLeisureType != null)
			{
				res.SmallLeisureType = new SmallLeisureType{Id=SmallLeisureType.Id, Eid=SmallLeisureType.Eid};
			}
			return res;
		}

		public void CopyEntity(SmallLeisureSubtype entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			SmallLeisureTypeId = entity.SmallLeisureTypeId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SmallLeisureType : ILastUpdateTick
	{
		public SmallLeisureType()
		{
		}

		public SmallLeisureType(SmallLeisureType entity) : this(entity, null)
		{
		}

		public SmallLeisureType(SmallLeisureType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			MergeSubtypes = entity.MergeSubtypes;
			IsTextData = entity.IsTextData;
			Formula = entity.Formula;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SmallLeisureType CreateCopy()
		{
			var res = new SmallLeisureType(this);
			res.SmallLeisureSubtypes = SmallLeisureSubtypes?.Select(p=>new SmallLeisureSubtype {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(SmallLeisureType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			MergeSubtypes = entity.MergeSubtypes;
			IsTextData = entity.IsTextData;
			Formula = entity.Formula;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Source : ILastUpdateTick
	{
		public Source()
		{
		}

		public Source(Source entity) : this(entity, null)
		{
		}

		public Source(Source entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			Commercial = entity.Commercial;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Source CreateCopy()
		{
			var res = new Source(this);
			return res;
		}

		public void CopyEntity(Source entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			Commercial = entity.Commercial;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class StateDistrict : ILastUpdateTick
	{
		public StateDistrict()
		{
		}

		public StateDistrict(StateDistrict entity) : this(entity, null)
		{
		}

		public StateDistrict(StateDistrict entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public StateDistrict CreateCopy()
		{
			var res = new StateDistrict(this);
			return res;
		}

		public void CopyEntity(StateDistrict entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class StateMachine : ILastUpdateTick
	{
		public StateMachine()
		{
		}

		public StateMachine(StateMachine entity) : this(entity, null)
		{
		}

		public StateMachine(StateMachine entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public StateMachine CreateCopy()
		{
			var res = new StateMachine(this);
			return res;
		}

		public void CopyEntity(StateMachine entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class StateMachineAction : ILastUpdateTick
	{
		public StateMachineAction()
		{
		}

		public StateMachineAction(StateMachineAction entity) : this(entity, null)
		{
		}

		public StateMachineAction(StateMachineAction entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			ActionName = entity.ActionName;
			Description = entity.Description;
			ActionCode = entity.ActionCode;
			IsSystemAction = entity.IsSystemAction;
			NeedSign = entity.NeedSign;
			StateMachineId = entity.StateMachineId;
			if (deep > 0 && entity.StateMachine != null)
			{
				StateMachine = new StateMachine(entity.StateMachine, deep - 1);
			}

			ToStateId = entity.ToStateId;
			if (deep > 0 && entity.ToState != null)
			{
				ToState = new StateMachineState(entity.ToState, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public StateMachineAction CreateCopy()
		{
			var res = new StateMachineAction(this);
			if (StateMachine != null)
			{
				res.StateMachine = new StateMachine{Id=StateMachine.Id, Eid=StateMachine.Eid};
			}
			if (ToState != null)
			{
				res.ToState = new StateMachineState{Id=ToState.Id, Eid=ToState.Eid};
			}
			res.FromStates = FromStates?.Select(p=>new StateMachineFromStatus {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(StateMachineAction entity)
		{
			Id = entity.Id;
			ActionName = entity.ActionName;
			Description = entity.Description;
			ActionCode = entity.ActionCode;
			IsSystemAction = entity.IsSystemAction;
			NeedSign = entity.NeedSign;
			StateMachineId = entity.StateMachineId;
			ToStateId = entity.ToStateId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class StateMachineFromStatus : ILastUpdateTick
	{
		public StateMachineFromStatus()
		{
		}

		public StateMachineFromStatus(StateMachineFromStatus entity) : this(entity, null)
		{
		}

		public StateMachineFromStatus(StateMachineFromStatus entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			ServiceCode = entity.ServiceCode;
			RightCode = entity.RightCode;
			StateMachineActionId = entity.StateMachineActionId;
			if (deep > 0 && entity.StateMachineAction != null)
			{
				StateMachineAction = new StateMachineAction(entity.StateMachineAction, deep - 1);
			}

			FromStateId = entity.FromStateId;
			if (deep > 0 && entity.FromState != null)
			{
				FromState = new StateMachineState(entity.FromState, deep - 1);
			}

			StateMachineId = entity.StateMachineId;
			if (deep > 0 && entity.StateMachine != null)
			{
				StateMachine = new StateMachine(entity.StateMachine, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public StateMachineFromStatus CreateCopy()
		{
			var res = new StateMachineFromStatus(this);
			if (StateMachineAction != null)
			{
				res.StateMachineAction = new StateMachineAction{Id=StateMachineAction.Id, Eid=StateMachineAction.Eid};
			}
			if (FromState != null)
			{
				res.FromState = new StateMachineState{Id=FromState.Id, Eid=FromState.Eid};
			}
			if (StateMachine != null)
			{
				res.StateMachine = new StateMachine{Id=StateMachine.Id, Eid=StateMachine.Eid};
			}
			return res;
		}

		public void CopyEntity(StateMachineFromStatus entity)
		{
			Id = entity.Id;
			ServiceCode = entity.ServiceCode;
			RightCode = entity.RightCode;
			StateMachineActionId = entity.StateMachineActionId;
			FromStateId = entity.FromStateId;
			StateMachineId = entity.StateMachineId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class StateMachineState : ILastUpdateTick
	{
		public StateMachineState()
		{
		}

		public StateMachineState(StateMachineState entity) : this(entity, null)
		{
		}

		public StateMachineState(StateMachineState entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			StateMachineId = entity.StateMachineId;
			if (deep > 0 && entity.StateMachine != null)
			{
				StateMachine = new StateMachine(entity.StateMachine, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public StateMachineState CreateCopy()
		{
			var res = new StateMachineState(this);
			if (StateMachine != null)
			{
				res.StateMachine = new StateMachine{Id=StateMachine.Id, Eid=StateMachine.Eid};
			}
			res.Actions = Actions?.Select(p=>new StateMachineAction {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(StateMachineState entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			StateMachineId = entity.StateMachineId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Status : ILastUpdateTick
	{
		public Status()
		{
		}

		public Status(Status entity) : this(entity, null)
		{
		}

		public Status(Status entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			ExternalUid = entity.ExternalUid;
			MpguName = entity.MpguName;
			MpguDescription = entity.MpguDescription;
			MpguComment = entity.MpguComment;
			IsFinal = entity.IsFinal;
			SmsMessage = entity.SmsMessage;
			ForPreferential = entity.ForPreferential;
			ForCommerce = entity.ForCommerce;
			CommerceName = entity.CommerceName;
			CreateUserId = entity.CreateUserId;
			if (deep > 0 && entity.CreateUser != null)
			{
				CreateUser = new Account(entity.CreateUser, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Status CreateCopy()
		{
			var res = new Status(this);
			if (CreateUser != null)
			{
				res.CreateUser = new Account{Id=CreateUser.Id, Eid=CreateUser.Eid};
			}
			res.Action = Action?.Select(p=>new StatusAction {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Status entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			ExternalUid = entity.ExternalUid;
			MpguName = entity.MpguName;
			MpguDescription = entity.MpguDescription;
			MpguComment = entity.MpguComment;
			IsFinal = entity.IsFinal;
			SmsMessage = entity.SmsMessage;
			ForPreferential = entity.ForPreferential;
			ForCommerce = entity.ForCommerce;
			CommerceName = entity.CommerceName;
			CreateUserId = entity.CreateUserId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class StatusAction : ILastUpdateTick
	{
		public StatusAction()
		{
		}

		public StatusAction(StatusAction entity) : this(entity, null)
		{
		}

		public StatusAction(StatusAction entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Code = entity.Code;
			Name = entity.Name;
			IsFirstCompany = entity.IsFirstCompany;
			RequestOnMoney = entity.RequestOnMoney;
			ToStatusId = entity.ToStatusId;
			if (deep > 0 && entity.ToStatus != null)
			{
				ToStatus = new Status(entity.ToStatus, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public StatusAction CreateCopy()
		{
			var res = new StatusAction(this);
			if (ToStatus != null)
			{
				res.ToStatus = new Status{Id=ToStatus.Id, Eid=ToStatus.Eid};
			}
			res.FromStatus = FromStatus?.Select(p=>new Status {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(StatusAction entity)
		{
			Id = entity.Id;
			Code = entity.Code;
			Name = entity.Name;
			IsFirstCompany = entity.IsFirstCompany;
			RequestOnMoney = entity.RequestOnMoney;
			ToStatusId = entity.ToStatusId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class StatusByChild : ILastUpdateTick
	{
		public StatusByChild()
		{
		}

		public StatusByChild(StatusByChild entity) : this(entity, null)
		{
		}

		public StatusByChild(StatusByChild entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			ForAgent = entity.ForAgent;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public StatusByChild CreateCopy()
		{
			var res = new StatusByChild(this);
			return res;
		}

		public void CopyEntity(StatusByChild entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			ForAgent = entity.ForAgent;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class StatusInteragencyRequest : ILastUpdateTick
	{
		public StatusInteragencyRequest()
		{
		}

		public StatusInteragencyRequest(StatusInteragencyRequest entity) : this(entity, null)
		{
		}

		public StatusInteragencyRequest(StatusInteragencyRequest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public StatusInteragencyRequest CreateCopy()
		{
			var res = new StatusInteragencyRequest(this);
			return res;
		}

		public void CopyEntity(StatusInteragencyRequest entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class StatusResult : ILastUpdateTick
	{
		public StatusResult()
		{
		}

		public StatusResult(StatusResult entity) : this(entity, null)
		{
		}

		public StatusResult(StatusResult entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public StatusResult CreateCopy()
		{
			var res = new StatusResult(this);
			return res;
		}

		public void CopyEntity(StatusResult entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SubjectOfRest : ILastUpdateTick
	{
		public SubjectOfRest()
		{
		}

		public SubjectOfRest(SubjectOfRest entity) : this(entity, null)
		{
		}

		public SubjectOfRest(SubjectOfRest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Description = entity.Description;
			PhotoUrl = entity.PhotoUrl;
			DescriptionHtml = entity.DescriptionHtml;
			IsActive = entity.IsActive;
			ViewOnSite = entity.ViewOnSite;
			ViewOnMpgu = entity.ViewOnMpgu;
			LinkToFileId = entity.LinkToFileId;
			if (deep > 0 && entity.LinkToFile != null)
			{
				LinkToFile = new LinkToFile(entity.LinkToFile, deep - 1);
			}

			CreateUserId = entity.CreateUserId;
			if (deep > 0 && entity.CreateUser != null)
			{
				CreateUser = new Account(entity.CreateUser, deep - 1);
			}

			SubjectOfRestClassificationId = entity.SubjectOfRestClassificationId;
			if (deep > 0 && entity.SubjectOfRestClassification != null)
			{
				SubjectOfRestClassification = new SubjectOfRestClassification(entity.SubjectOfRestClassification, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SubjectOfRest CreateCopy()
		{
			var res = new SubjectOfRest(this);
			if (LinkToFile != null)
			{
				res.LinkToFile = new LinkToFile{Id=LinkToFile.Id, Eid=LinkToFile.Eid};
			}
			if (CreateUser != null)
			{
				res.CreateUser = new Account{Id=CreateUser.Id, Eid=CreateUser.Eid};
			}
			if (SubjectOfRestClassification != null)
			{
				res.SubjectOfRestClassification = new SubjectOfRestClassification{Id=SubjectOfRestClassification.Id, Eid=SubjectOfRestClassification.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			return res;
		}

		public void CopyEntity(SubjectOfRest entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Description = entity.Description;
			PhotoUrl = entity.PhotoUrl;
			DescriptionHtml = entity.DescriptionHtml;
			IsActive = entity.IsActive;
			ViewOnSite = entity.ViewOnSite;
			ViewOnMpgu = entity.ViewOnMpgu;
			LinkToFileId = entity.LinkToFileId;
			CreateUserId = entity.CreateUserId;
			SubjectOfRestClassificationId = entity.SubjectOfRestClassificationId;
			HistoryLinkId = entity.HistoryLinkId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class SubjectOfRestClassification : ILastUpdateTick
	{
		public SubjectOfRestClassification()
		{
		}

		public SubjectOfRestClassification(SubjectOfRestClassification entity) : this(entity, null)
		{
		}

		public SubjectOfRestClassification(SubjectOfRestClassification entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			ViewOnSite = entity.ViewOnSite;
			IsArchive = entity.IsArchive;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			FileOrLinkId = entity.FileOrLinkId;
			if (deep > 0 && entity.FileOrLink != null)
			{
				FileOrLink = new FileOrLink(entity.FileOrLink, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public SubjectOfRestClassification CreateCopy()
		{
			var res = new SubjectOfRestClassification(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (FileOrLink != null)
			{
				res.FileOrLink = new FileOrLink{Id=FileOrLink.Id, Eid=FileOrLink.Eid};
			}
			return res;
		}

		public void CopyEntity(SubjectOfRestClassification entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			ViewOnSite = entity.ViewOnSite;
			IsArchive = entity.IsArchive;
			HistoryLinkId = entity.HistoryLinkId;
			FileOrLinkId = entity.FileOrLinkId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Tag : ILastUpdateTick
	{
		public Tag()
		{
		}

		public Tag(Tag entity) : this(entity, null)
		{
		}

		public Tag(Tag entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Description = entity.Description;
			IsDeleted = entity.IsDeleted;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Tag CreateCopy()
		{
			var res = new Tag(this);
			res.Tours = Tours?.Select(p=>new Tour {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Services = Services?.Select(p=>new AddonServices {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Tag entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Description = entity.Description;
			IsDeleted = entity.IsDeleted;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Ticket : ILastUpdateTick
	{
		public Ticket()
		{
		}

		public Ticket(Ticket entity) : this(entity, null)
		{
		}

		public Ticket(Ticket entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			FlightNumber = entity.FlightNumber;
			DateOfDeparture = entity.DateOfDeparture;
			DateOfArrival = entity.DateOfArrival;
			PlaceOfDeparture = entity.PlaceOfDeparture;
			PlaceOfArrival = entity.PlaceOfArrival;
			Approved = entity.Approved;
			ForCalculation = entity.ForCalculation;
			DirectoryFlightsId = entity.DirectoryFlightsId;
			if (deep > 0 && entity.DirectoryFlights != null)
			{
				DirectoryFlights = new DirectoryFlights(entity.DirectoryFlights, deep - 1);
			}

			AddonServicesId = entity.AddonServicesId;
			if (deep > 0 && entity.AddonServices != null)
			{
				AddonServices = new AddonServices(entity.AddonServices, deep - 1);
			}

			OrganizationId = entity.OrganizationId;
			if (deep > 0 && entity.Organization != null)
			{
				Organization = new Organization(entity.Organization, deep - 1);
			}

			RequestId = entity.RequestId;
			if (deep > 0 && entity.Request != null)
			{
				Request = new Request(entity.Request, deep - 1);
			}

			CityOfArrivalId = entity.CityOfArrivalId;
			if (deep > 0 && entity.CityOfArrival != null)
			{
				CityOfArrival = new City(entity.CityOfArrival, deep - 1);
			}

			CityOfDepartureId = entity.CityOfDepartureId;
			if (deep > 0 && entity.CityOfDeparture != null)
			{
				CityOfDeparture = new City(entity.CityOfDeparture, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Ticket CreateCopy()
		{
			var res = new Ticket(this);
			if (DirectoryFlights != null)
			{
				res.DirectoryFlights = new DirectoryFlights{Id=DirectoryFlights.Id, Eid=DirectoryFlights.Eid};
			}
			if (AddonServices != null)
			{
				res.AddonServices = new AddonServices{Id=AddonServices.Id, Eid=AddonServices.Eid};
			}
			if (Organization != null)
			{
				res.Organization = new Organization{Id=Organization.Id, Eid=Organization.Eid};
			}
			if (Request != null)
			{
				res.Request = new Request{Id=Request.Id, Eid=Request.Eid};
			}
			if (CityOfArrival != null)
			{
				res.CityOfArrival = new City{Id=CityOfArrival.Id, Eid=CityOfArrival.Eid};
			}
			if (CityOfDeparture != null)
			{
				res.CityOfDeparture = new City{Id=CityOfDeparture.Id, Eid=CityOfDeparture.Eid};
			}
			res.Calculations = Calculations?.Select(p=>new Calculation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Persons = Persons?.Select(p=>new TicketLink {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Ticket entity)
		{
			Id = entity.Id;
			FlightNumber = entity.FlightNumber;
			DateOfDeparture = entity.DateOfDeparture;
			DateOfArrival = entity.DateOfArrival;
			PlaceOfDeparture = entity.PlaceOfDeparture;
			PlaceOfArrival = entity.PlaceOfArrival;
			Approved = entity.Approved;
			ForCalculation = entity.ForCalculation;
			DirectoryFlightsId = entity.DirectoryFlightsId;
			AddonServicesId = entity.AddonServicesId;
			OrganizationId = entity.OrganizationId;
			RequestId = entity.RequestId;
			CityOfArrivalId = entity.CityOfArrivalId;
			CityOfDepartureId = entity.CityOfDepartureId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TicketLink : ILastUpdateTick
	{
		public TicketLink()
		{
		}

		public TicketLink(TicketLink entity) : this(entity, null)
		{
		}

		public TicketLink(TicketLink entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			Commentary = entity.Commentary;
			Approved = entity.Approved;
			ForCalculation = entity.ForCalculation;
			ChildId = entity.ChildId;
			if (deep > 0 && entity.Child != null)
			{
				Child = new Child(entity.Child, deep - 1);
			}

			ApplicantId = entity.ApplicantId;
			if (deep > 0 && entity.Applicant != null)
			{
				Applicant = new Applicant(entity.Applicant, deep - 1);
			}

			TicketId = entity.TicketId;
			if (deep > 0 && entity.Ticket != null)
			{
				Ticket = new Ticket(entity.Ticket, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TicketLink CreateCopy()
		{
			var res = new TicketLink(this);
			if (Child != null)
			{
				res.Child = new Child{Id=Child.Id, Eid=Child.Eid};
			}
			if (Applicant != null)
			{
				res.Applicant = new Applicant{Id=Applicant.Id, Eid=Applicant.Eid};
			}
			if (Ticket != null)
			{
				res.Ticket = new Ticket{Id=Ticket.Id, Eid=Ticket.Eid};
			}
			return res;
		}

		public void CopyEntity(TicketLink entity)
		{
			Id = entity.Id;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			Commentary = entity.Commentary;
			Approved = entity.Approved;
			ForCalculation = entity.ForCalculation;
			ChildId = entity.ChildId;
			ApplicantId = entity.ApplicantId;
			TicketId = entity.TicketId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TieColor : ILastUpdateTick
	{
		public TieColor()
		{
		}

		public TieColor(TieColor entity) : this(entity, null)
		{
		}

		public TieColor(TieColor entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			Raiting = entity.Raiting;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TieColor CreateCopy()
		{
			var res = new TieColor(this);
			return res;
		}

		public void CopyEntity(TieColor entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			Raiting = entity.Raiting;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TimeOfRest : ILastUpdateTick
	{
		public TimeOfRest()
		{
		}

		public TimeOfRest(TimeOfRest entity) : this(entity, null)
		{
		}

		public TimeOfRest(TimeOfRest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			FactorDependence = entity.FactorDependence;
			DayOfMonth = entity.DayOfMonth;
			Month = entity.Month;
			PeriodLength = entity.PeriodLength;
			Year = entity.Year;
			IsActive = entity.IsActive;
			TypeOfRestId = entity.TypeOfRestId;
			if (deep > 0 && entity.TypeOfRest != null)
			{
				TypeOfRest = new TypeOfRest(entity.TypeOfRest, deep - 1);
			}

			CreateUserId = entity.CreateUserId;
			if (deep > 0 && entity.CreateUser != null)
			{
				CreateUser = new Account(entity.CreateUser, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			GroupedTimeOfRestId = entity.GroupedTimeOfRestId;
			if (deep > 0 && entity.GroupedTimeOfRest != null)
			{
				GroupedTimeOfRest = new GroupedTimeOfRest(entity.GroupedTimeOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TimeOfRest CreateCopy()
		{
			var res = new TimeOfRest(this);
			if (TypeOfRest != null)
			{
				res.TypeOfRest = new TypeOfRest{Id=TypeOfRest.Id, Eid=TypeOfRest.Eid};
			}
			if (CreateUser != null)
			{
				res.CreateUser = new Account{Id=CreateUser.Id, Eid=CreateUser.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (GroupedTimeOfRest != null)
			{
				res.GroupedTimeOfRest = new GroupedTimeOfRest{Id=GroupedTimeOfRest.Id, Eid=GroupedTimeOfRest.Eid};
			}
			res.Requests = Requests?.Select(p=>new RequestsTimeOfRest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TimeOfRest entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			FactorDependence = entity.FactorDependence;
			DayOfMonth = entity.DayOfMonth;
			Month = entity.Month;
			PeriodLength = entity.PeriodLength;
			Year = entity.Year;
			IsActive = entity.IsActive;
			TypeOfRestId = entity.TypeOfRestId;
			CreateUserId = entity.CreateUserId;
			YearOfRestId = entity.YearOfRestId;
			GroupedTimeOfRestId = entity.GroupedTimeOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class Tour : ILastUpdateTick
	{
		public Tour()
		{
		}

		public Tour(Tour entity) : this(entity, null)
		{
		}

		public Tour(Tour entity, int? deep)
		{
			if (entity == null) return;

			ChildrenCount = entity.ChildrenCount;
			Id = entity.Id;
			Name = entity.Name;
			Descr = entity.Descr;
			IsActive = entity.IsActive;
			DateIncome = entity.DateIncome;
			DateOutcome = entity.DateOutcome;
			ForList = entity.ForList;
			TourPrice = entity.TourPrice;
			TourPriceAttendant = entity.TourPriceAttendant;
			StartBooking = entity.StartBooking;
			EndBooking = entity.EndBooking;
			SurrogateKey = entity.SurrogateKey;
			CorpusNumber = entity.CorpusNumber;
			PaymentForAdult = entity.PaymentForAdult;
			PaymentForChild = entity.PaymentForChild;
			ChildAgeFrom = entity.ChildAgeFrom;
			ChildAgeTo = entity.ChildAgeTo;
			NotSelf = entity.NotSelf;
			EkisId = entity.EkisId;
			EkisNeedSend = entity.EkisNeedSend;
			NeedApprove = entity.NeedApprove;
			AnnouncementEvent = entity.AnnouncementEvent;
			ConditionsForAccompanying = entity.ConditionsForAccompanying;
			SizeMin = entity.SizeMin;
			SizeMax = entity.SizeMax;
			MultiEventGeography = entity.MultiEventGeography;
			CountRequestLimited = entity.CountRequestLimited;
			MinPrepaymentAmount = entity.MinPrepaymentAmount;
			NotFixedDate = entity.NotFixedDate;
			DurationHour = entity.DurationHour;
			DurationDay = entity.DurationDay;
			DurationMonth = entity.DurationMonth;
			DurationYear = entity.DurationYear;
			ProcentOver = entity.ProcentOver;
			PrepaymentMayBe = entity.PrepaymentMayBe;
			PrepaymentProcent = entity.PrepaymentProcent;
			NotForSite = entity.NotForSite;
			ForMultipleStageCompany = entity.ForMultipleStageCompany;
			ForInvalid = entity.ForInvalid;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			LimitOnVedomstvoId = entity.LimitOnVedomstvoId;
			if (deep > 0 && entity.LimitOnVedomstvo != null)
			{
				LimitOnVedomstvo = new LimitOnVedomstvo(entity.LimitOnVedomstvo, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			TypeOfRestId = entity.TypeOfRestId;
			if (deep > 0 && entity.TypeOfRest != null)
			{
				TypeOfRest = new TypeOfRest(entity.TypeOfRest, deep - 1);
			}

			SubjectOfRestId = entity.SubjectOfRestId;
			if (deep > 0 && entity.SubjectOfRest != null)
			{
				SubjectOfRest = new SubjectOfRest(entity.SubjectOfRest, deep - 1);
			}

			TimeOfRestId = entity.TimeOfRestId;
			if (deep > 0 && entity.TimeOfRest != null)
			{
				TimeOfRest = new TimeOfRest(entity.TimeOfRest, deep - 1);
			}

			HotelsId = entity.HotelsId;
			if (deep > 0 && entity.Hotels != null)
			{
				Hotels = new Hotels(entity.Hotels, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			BoutId = entity.BoutId;
			if (deep > 0 && entity.Bout != null)
			{
				Bout = new Bout(entity.Bout, deep - 1);
			}

			ComplexItemId = entity.ComplexItemId;
			if (deep > 0 && entity.ComplexItem != null)
			{
				ComplexItem = new Tour(entity.ComplexItem, deep - 1);
			}

			LinkToFileId = entity.LinkToFileId;
			if (deep > 0 && entity.LinkToFile != null)
			{
				LinkToFile = new LinkToFile(entity.LinkToFile, deep - 1);
			}

			GroupedTimeOfRestId = entity.GroupedTimeOfRestId;
			if (deep > 0 && entity.GroupedTimeOfRest != null)
			{
				GroupedTimeOfRest = new GroupedTimeOfRest(entity.GroupedTimeOfRest, deep - 1);
			}

			RestrictionGroupId = entity.RestrictionGroupId;
			if (deep > 0 && entity.RestrictionGroup != null)
			{
				RestrictionGroup = new RestrictionGroup(entity.RestrictionGroup, deep - 1);
			}

			SignInfoId = entity.SignInfoId;
			if (deep > 0 && entity.SignInfo != null)
			{
				SignInfo = new SignInfo(entity.SignInfo, deep - 1);
			}

			ContractId = entity.ContractId;
			if (deep > 0 && entity.Contract != null)
			{
				Contract = new Contract(entity.Contract, deep - 1);
			}

			PartnerId = entity.PartnerId;
			if (deep > 0 && entity.Partner != null)
			{
				Partner = new Organization(entity.Partner, deep - 1);
			}

			CuratorId = entity.CuratorId;
			if (deep > 0 && entity.Curator != null)
			{
				Curator = new Account(entity.Curator, deep - 1);
			}

			CityId = entity.CityId;
			if (deep > 0 && entity.City != null)
			{
				City = new City(entity.City, deep - 1);
			}

			BaseServiceId = entity.BaseServiceId;
			if (deep > 0 && entity.BaseService != null)
			{
				BaseService = new AddonServices(entity.BaseService, deep - 1);
			}

			TypeOfRestSubtypeId = entity.TypeOfRestSubtypeId;
			if (deep > 0 && entity.TypeOfRestSubtype != null)
			{
				TypeOfRestSubtype = new TypeOfRestSubtype(entity.TypeOfRestSubtype, deep - 1);
			}

			ProductId = entity.ProductId;
			if (deep > 0 && entity.Product != null)
			{
				Product = new Product(entity.Product, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public Tour CreateCopy()
		{
			var res = new Tour(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (LimitOnVedomstvo != null)
			{
				res.LimitOnVedomstvo = new LimitOnVedomstvo{Id=LimitOnVedomstvo.Id, Eid=LimitOnVedomstvo.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (TypeOfRest != null)
			{
				res.TypeOfRest = new TypeOfRest{Id=TypeOfRest.Id, Eid=TypeOfRest.Eid};
			}
			if (SubjectOfRest != null)
			{
				res.SubjectOfRest = new SubjectOfRest{Id=SubjectOfRest.Id, Eid=SubjectOfRest.Eid};
			}
			if (TimeOfRest != null)
			{
				res.TimeOfRest = new TimeOfRest{Id=TimeOfRest.Id, Eid=TimeOfRest.Eid};
			}
			if (Hotels != null)
			{
				res.Hotels = new Hotels{Id=Hotels.Id, Eid=Hotels.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (Bout != null)
			{
				res.Bout = new Bout{Id=Bout.Id, Eid=Bout.Eid};
			}
			if (ComplexItem != null)
			{
				res.ComplexItem = new Tour{Id=ComplexItem.Id, Eid=ComplexItem.Eid};
			}
			if (LinkToFile != null)
			{
				res.LinkToFile = new LinkToFile{Id=LinkToFile.Id, Eid=LinkToFile.Eid};
			}
			if (GroupedTimeOfRest != null)
			{
				res.GroupedTimeOfRest = new GroupedTimeOfRest{Id=GroupedTimeOfRest.Id, Eid=GroupedTimeOfRest.Eid};
			}
			if (RestrictionGroup != null)
			{
				res.RestrictionGroup = new RestrictionGroup{Id=RestrictionGroup.Id, Eid=RestrictionGroup.Eid};
			}
			if (SignInfo != null)
			{
				res.SignInfo = new SignInfo{Id=SignInfo.Id, Eid=SignInfo.Eid};
			}
			if (Contract != null)
			{
				res.Contract = new Contract{Id=Contract.Id, Eid=Contract.Eid};
			}
			if (Partner != null)
			{
				res.Partner = new Organization{Id=Partner.Id, Eid=Partner.Eid};
			}
			if (Curator != null)
			{
				res.Curator = new Account{Id=Curator.Id, Eid=Curator.Eid};
			}
			if (City != null)
			{
				res.City = new City{Id=City.Id, Eid=City.Eid};
			}
			if (BaseService != null)
			{
				res.BaseService = new AddonServices{Id=BaseService.Id, Eid=BaseService.Eid};
			}
			if (TypeOfRestSubtype != null)
			{
				res.TypeOfRestSubtype = new TypeOfRestSubtype{Id=TypeOfRestSubtype.Id, Eid=TypeOfRestSubtype.Eid};
			}
			if (Product != null)
			{
				res.Product = new Product{Id=Product.Id, Eid=Product.Eid};
			}
			res.ChildLists = ChildLists?.Select(p=>new ListOfChilds {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Bookings = Bookings?.Select(p=>new Booking {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Services = Services?.Select(p=>new AddonServices {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.ListOfChilds = ListOfChilds?.Select(p=>new ListOfChilds {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.LimitOnOrganizations = LimitOnOrganizations?.Select(p=>new LimitOnOrganization {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Volumes = Volumes?.Select(p=>new TourVolume {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Files = Files?.Select(p=>new FileOfTour {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.RequestsSingle = RequestsSingle?.Select(p=>new Request {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Prices = Prices?.Select(p=>new TourPrice {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Parts = Parts?.Select(p=>new Tour {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.RoomRates = RoomRates?.Select(p=>new RoomRates {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Requests = Requests?.Select(p=>new Request {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.TourChilds = TourChilds?.Select(p=>new Child {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Applicants = Applicants?.Select(p=>new Applicant {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.TourAccommodations = TourAccommodations?.Select(p=>new TourAccommodation {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.TourTransport = TourTransport?.Select(p=>new TourTransport {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.EventGeographys = EventGeographys?.Select(p=>new EventGeography {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Countrys = Countrys?.Select(p=>new TourCountry {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Partys = Partys?.Select(p=>new Party {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Tags = Tags?.Select(p=>new Tag {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Discounts = Discounts?.Select(p=>new Discount {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(Tour entity)
		{
			ChildrenCount = entity.ChildrenCount;
			Id = entity.Id;
			Name = entity.Name;
			Descr = entity.Descr;
			IsActive = entity.IsActive;
			DateIncome = entity.DateIncome;
			DateOutcome = entity.DateOutcome;
			ForList = entity.ForList;
			TourPrice = entity.TourPrice;
			TourPriceAttendant = entity.TourPriceAttendant;
			StartBooking = entity.StartBooking;
			EndBooking = entity.EndBooking;
			SurrogateKey = entity.SurrogateKey;
			CorpusNumber = entity.CorpusNumber;
			PaymentForAdult = entity.PaymentForAdult;
			PaymentForChild = entity.PaymentForChild;
			ChildAgeFrom = entity.ChildAgeFrom;
			ChildAgeTo = entity.ChildAgeTo;
			NotSelf = entity.NotSelf;
			EkisId = entity.EkisId;
			EkisNeedSend = entity.EkisNeedSend;
			NeedApprove = entity.NeedApprove;
			AnnouncementEvent = entity.AnnouncementEvent;
			ConditionsForAccompanying = entity.ConditionsForAccompanying;
			SizeMin = entity.SizeMin;
			SizeMax = entity.SizeMax;
			MultiEventGeography = entity.MultiEventGeography;
			CountRequestLimited = entity.CountRequestLimited;
			MinPrepaymentAmount = entity.MinPrepaymentAmount;
			NotFixedDate = entity.NotFixedDate;
			DurationHour = entity.DurationHour;
			DurationDay = entity.DurationDay;
			DurationMonth = entity.DurationMonth;
			DurationYear = entity.DurationYear;
			ProcentOver = entity.ProcentOver;
			PrepaymentMayBe = entity.PrepaymentMayBe;
			PrepaymentProcent = entity.PrepaymentProcent;
			NotForSite = entity.NotForSite;
			ForMultipleStageCompany = entity.ForMultipleStageCompany;
			ForInvalid = entity.ForInvalid;
			HistoryLinkId = entity.HistoryLinkId;
			LimitOnVedomstvoId = entity.LimitOnVedomstvoId;
			YearOfRestId = entity.YearOfRestId;
			TypeOfRestId = entity.TypeOfRestId;
			SubjectOfRestId = entity.SubjectOfRestId;
			TimeOfRestId = entity.TimeOfRestId;
			HotelsId = entity.HotelsId;
			StateId = entity.StateId;
			BoutId = entity.BoutId;
			ComplexItemId = entity.ComplexItemId;
			LinkToFileId = entity.LinkToFileId;
			GroupedTimeOfRestId = entity.GroupedTimeOfRestId;
			RestrictionGroupId = entity.RestrictionGroupId;
			SignInfoId = entity.SignInfoId;
			ContractId = entity.ContractId;
			PartnerId = entity.PartnerId;
			CuratorId = entity.CuratorId;
			CityId = entity.CityId;
			BaseServiceId = entity.BaseServiceId;
			TypeOfRestSubtypeId = entity.TypeOfRestSubtypeId;
			ProductId = entity.ProductId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TourAccommodation : ILastUpdateTick
	{
		public TourAccommodation()
		{
		}

		public TourAccommodation(TourAccommodation entity) : this(entity, null)
		{
		}

		public TourAccommodation(TourAccommodation entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			NeedApprove = entity.NeedApprove;
			SubjectOfRestId = entity.SubjectOfRestId;
			if (deep > 0 && entity.SubjectOfRest != null)
			{
				SubjectOfRest = new SubjectOfRest(entity.SubjectOfRest, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			HotelId = entity.HotelId;
			if (deep > 0 && entity.Hotel != null)
			{
				Hotel = new Hotels(entity.Hotel, deep - 1);
			}

			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			EventGeographyId = entity.EventGeographyId;
			if (deep > 0 && entity.EventGeography != null)
			{
				EventGeography = new EventGeography(entity.EventGeography, deep - 1);
			}

			TypePriceCalculationId = entity.TypePriceCalculationId;
			if (deep > 0 && entity.TypePriceCalculation != null)
			{
				TypePriceCalculation = new TypePriceCalculation(entity.TypePriceCalculation, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TourAccommodation CreateCopy()
		{
			var res = new TourAccommodation(this);
			if (SubjectOfRest != null)
			{
				res.SubjectOfRest = new SubjectOfRest{Id=SubjectOfRest.Id, Eid=SubjectOfRest.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (Hotel != null)
			{
				res.Hotel = new Hotels{Id=Hotel.Id, Eid=Hotel.Eid};
			}
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			if (EventGeography != null)
			{
				res.EventGeography = new EventGeography{Id=EventGeography.Id, Eid=EventGeography.Eid};
			}
			if (TypePriceCalculation != null)
			{
				res.TypePriceCalculation = new TypePriceCalculation{Id=TypePriceCalculation.Id, Eid=TypePriceCalculation.Eid};
			}
			res.RoomRates = RoomRates?.Select(p=>new RoomRates {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Volumes = Volumes?.Select(p=>new TourVolume {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TourAccommodation entity)
		{
			Id = entity.Id;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			NeedApprove = entity.NeedApprove;
			SubjectOfRestId = entity.SubjectOfRestId;
			YearOfRestId = entity.YearOfRestId;
			HotelId = entity.HotelId;
			TourId = entity.TourId;
			EventGeographyId = entity.EventGeographyId;
			TypePriceCalculationId = entity.TypePriceCalculationId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TourCountry : ILastUpdateTick
	{
		public TourCountry()
		{
		}

		public TourCountry(TourCountry entity) : this(entity, null)
		{
		}

		public TourCountry(TourCountry entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			IsMain = entity.IsMain;
			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			CountryId = entity.CountryId;
			if (deep > 0 && entity.Country != null)
			{
				Country = new Country(entity.Country, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TourCountry CreateCopy()
		{
			var res = new TourCountry(this);
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			if (Country != null)
			{
				res.Country = new Country{Id=Country.Id, Eid=Country.Eid};
			}
			return res;
		}

		public void CopyEntity(TourCountry entity)
		{
			Id = entity.Id;
			IsMain = entity.IsMain;
			TourId = entity.TourId;
			CountryId = entity.CountryId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TourPrice : ILastUpdateTick
	{
		public TourPrice()
		{
		}

		public TourPrice(TourPrice entity) : this(entity, null)
		{
		}

		public TourPrice(TourPrice entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Price = entity.Price;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TourPrice CreateCopy()
		{
			var res = new TourPrice(this);
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			return res;
		}

		public void CopyEntity(TourPrice entity)
		{
			Id = entity.Id;
			Price = entity.Price;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			TourId = entity.TourId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TourTransport : ILastUpdateTick
	{
		public TourTransport()
		{
		}

		public TourTransport(TourTransport entity) : this(entity, null)
		{
		}

		public TourTransport(TourTransport entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			DateOfDeparture = entity.DateOfDeparture;
			DateOfArrival = entity.DateOfArrival;
			PlaceOfDeparture = entity.PlaceOfDeparture;
			PlaceOfArrival = entity.PlaceOfArrival;
			NeedApprove = entity.NeedApprove;
			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			CityOfArrivalId = entity.CityOfArrivalId;
			if (deep > 0 && entity.CityOfArrival != null)
			{
				CityOfArrival = new City(entity.CityOfArrival, deep - 1);
			}

			CityOfDepartureId = entity.CityOfDepartureId;
			if (deep > 0 && entity.CityOfDeparture != null)
			{
				CityOfDeparture = new City(entity.CityOfDeparture, deep - 1);
			}

			DirectoryFlightsId = entity.DirectoryFlightsId;
			if (deep > 0 && entity.DirectoryFlights != null)
			{
				DirectoryFlights = new DirectoryFlights(entity.DirectoryFlights, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TourTransport CreateCopy()
		{
			var res = new TourTransport(this);
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			if (CityOfArrival != null)
			{
				res.CityOfArrival = new City{Id=CityOfArrival.Id, Eid=CityOfArrival.Eid};
			}
			if (CityOfDeparture != null)
			{
				res.CityOfDeparture = new City{Id=CityOfDeparture.Id, Eid=CityOfDeparture.Eid};
			}
			if (DirectoryFlights != null)
			{
				res.DirectoryFlights = new DirectoryFlights{Id=DirectoryFlights.Id, Eid=DirectoryFlights.Eid};
			}
			res.Prices = Prices?.Select(p=>new TourTransportPrice {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TourTransport entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			DateOfDeparture = entity.DateOfDeparture;
			DateOfArrival = entity.DateOfArrival;
			PlaceOfDeparture = entity.PlaceOfDeparture;
			PlaceOfArrival = entity.PlaceOfArrival;
			NeedApprove = entity.NeedApprove;
			TourId = entity.TourId;
			CityOfArrivalId = entity.CityOfArrivalId;
			CityOfDepartureId = entity.CityOfDepartureId;
			DirectoryFlightsId = entity.DirectoryFlightsId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TourTransportPrice : ILastUpdateTick
	{
		public TourTransportPrice()
		{
		}

		public TourTransportPrice(TourTransportPrice entity) : this(entity, null)
		{
		}

		public TourTransportPrice(TourTransportPrice entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			TourTransportId = entity.TourTransportId;
			if (deep > 0 && entity.TourTransport != null)
			{
				TourTransport = new TourTransport(entity.TourTransport, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TourTransportPrice CreateCopy()
		{
			var res = new TourTransportPrice(this);
			if (TourTransport != null)
			{
				res.TourTransport = new TourTransport{Id=TourTransport.Id, Eid=TourTransport.Eid};
			}
			return res;
		}

		public void CopyEntity(TourTransportPrice entity)
		{
			Id = entity.Id;
			AgeFrom = entity.AgeFrom;
			AgeTo = entity.AgeTo;
			Price = entity.Price;
			PriceInternal = entity.PriceInternal;
			TourTransportId = entity.TourTransportId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TourVolume : ILastUpdateTick
	{
		public TourVolume()
		{
		}

		public TourVolume(TourVolume entity) : this(entity, null)
		{
		}

		public TourVolume(TourVolume entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			CountRooms = entity.CountRooms;
			CountBusyRooms = entity.CountBusyRooms;
			CountPlace = entity.CountPlace;
			CountBusyPlace = entity.CountBusyPlace;
			EventDate = entity.EventDate;
			EndBooking = entity.EndBooking;
			TypeOfRoomsId = entity.TypeOfRoomsId;
			if (deep > 0 && entity.TypeOfRooms != null)
			{
				TypeOfRooms = new TypeOfRooms(entity.TypeOfRooms, deep - 1);
			}

			HotelsId = entity.HotelsId;
			if (deep > 0 && entity.Hotels != null)
			{
				Hotels = new Hotels(entity.Hotels, deep - 1);
			}

			TourId = entity.TourId;
			if (deep > 0 && entity.Tour != null)
			{
				Tour = new Tour(entity.Tour, deep - 1);
			}

			TourAccommodationId = entity.TourAccommodationId;
			if (deep > 0 && entity.TourAccommodation != null)
			{
				TourAccommodation = new TourAccommodation(entity.TourAccommodation, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TourVolume CreateCopy()
		{
			var res = new TourVolume(this);
			if (TypeOfRooms != null)
			{
				res.TypeOfRooms = new TypeOfRooms{Id=TypeOfRooms.Id, Eid=TypeOfRooms.Eid};
			}
			if (Hotels != null)
			{
				res.Hotels = new Hotels{Id=Hotels.Id, Eid=Hotels.Eid};
			}
			if (Tour != null)
			{
				res.Tour = new Tour{Id=Tour.Id, Eid=Tour.Eid};
			}
			if (TourAccommodation != null)
			{
				res.TourAccommodation = new TourAccommodation{Id=TourAccommodation.Id, Eid=TourAccommodation.Eid};
			}
			res.Bookings = Bookings?.Select(p=>new Booking {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TourVolume entity)
		{
			Id = entity.Id;
			CountRooms = entity.CountRooms;
			CountBusyRooms = entity.CountBusyRooms;
			CountPlace = entity.CountPlace;
			CountBusyPlace = entity.CountBusyPlace;
			EventDate = entity.EventDate;
			EndBooking = entity.EndBooking;
			TypeOfRoomsId = entity.TypeOfRoomsId;
			HotelsId = entity.HotelsId;
			TourId = entity.TourId;
			TourAccommodationId = entity.TourAccommodationId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TradeUnionCamper : ILastUpdateTick
	{
		public TradeUnionCamper()
		{
		}

		public TradeUnionCamper(TradeUnionCamper entity) : this(entity, null)
		{
		}

		public TradeUnionCamper(TradeUnionCamper entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			AddressChild = entity.AddressChild;
			School = entity.School;
			ParentPlaceWork = entity.ParentPlaceWork;
			IsParentUnionist = entity.IsParentUnionist;
			IsRelativeUnionist = entity.IsRelativeUnionist;
			Summa = entity.Summa;
			SummaParent = entity.SummaParent;
			SummaTradeUnion = entity.SummaTradeUnion;
			SummaBudget = entity.SummaBudget;
			SummaOrganization = entity.SummaOrganization;
			RelativePlaceWork = entity.RelativePlaceWork;
			IsChecked = entity.IsChecked;
			IsScoolNotPresent = entity.IsScoolNotPresent;
			TradeUnionOrganizationOther = entity.TradeUnionOrganizationOther;
			CashbackEstimatedAmount = entity.CashbackEstimatedAmount;
			CashbackBaseEstimatedAmount = entity.CashbackBaseEstimatedAmount;
			ContractDate = entity.ContractDate;
			ContractNumber = entity.ContractNumber;
			FactDateIn = entity.FactDateIn;
			FactDateOut = entity.FactDateOut;
			CashbackRequested = entity.CashbackRequested;
			TradeUnionId = entity.TradeUnionId;
			if (deep > 0 && entity.TradeUnion != null)
			{
				TradeUnion = new TradeUnionList(entity.TradeUnion, deep - 1);
			}

			ChildId = entity.ChildId;
			if (deep > 0 && entity.Child != null)
			{
				Child = new Person(entity.Child, deep - 1);
			}

			ParentId = entity.ParentId;
			if (deep > 0 && entity.Parent != null)
			{
				Parent = new Person(entity.Parent, deep - 1);
			}

			UnionistId = entity.UnionistId;
			if (deep > 0 && entity.Unionist != null)
			{
				Unionist = new Person(entity.Unionist, deep - 1);
			}

			TradeUnionStatusByChildId = entity.TradeUnionStatusByChildId;
			if (deep > 0 && entity.TradeUnionStatusByChild != null)
			{
				TradeUnionStatusByChild = new TradeUnionStatusByChild(entity.TradeUnionStatusByChild, deep - 1);
			}

			SelectedSchoolId = entity.SelectedSchoolId;
			if (deep > 0 && entity.SelectedSchool != null)
			{
				SelectedSchool = new School(entity.SelectedSchool, deep - 1);
			}

			LinkToFileId = entity.LinkToFileId;
			if (deep > 0 && entity.LinkToFile != null)
			{
				LinkToFile = new LinkToFile(entity.LinkToFile, deep - 1);
			}

			TradeUnionOrganizationId = entity.TradeUnionOrganizationId;
			if (deep > 0 && entity.TradeUnionOrganization != null)
			{
				TradeUnionOrganization = new Organization(entity.TradeUnionOrganization, deep - 1);
			}

			PrivilegePartId = entity.PrivilegePartId;
			if (deep > 0 && entity.PrivilegePart != null)
			{
				PrivilegePart = new TradeUnionCamperPrivilegePart(entity.PrivilegePart, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TradeUnionCamper CreateCopy()
		{
			var res = new TradeUnionCamper(this);
			if (TradeUnion != null)
			{
				res.TradeUnion = new TradeUnionList{Id=TradeUnion.Id, Eid=TradeUnion.Eid};
			}
			if (Child != null)
			{
				res.Child = new Person{Id=Child.Id, Eid=Child.Eid};
			}
			if (Parent != null)
			{
				res.Parent = new Person{Id=Parent.Id, Eid=Parent.Eid};
			}
			if (Unionist != null)
			{
				res.Unionist = new Person{Id=Unionist.Id, Eid=Unionist.Eid};
			}
			if (TradeUnionStatusByChild != null)
			{
				res.TradeUnionStatusByChild = new TradeUnionStatusByChild{Id=TradeUnionStatusByChild.Id, Eid=TradeUnionStatusByChild.Eid};
			}
			if (SelectedSchool != null)
			{
				res.SelectedSchool = new School{Id=SelectedSchool.Id, Eid=SelectedSchool.Eid};
			}
			if (LinkToFile != null)
			{
				res.LinkToFile = new LinkToFile{Id=LinkToFile.Id, Eid=LinkToFile.Eid};
			}
			if (TradeUnionOrganization != null)
			{
				res.TradeUnionOrganization = new Organization{Id=TradeUnionOrganization.Id, Eid=TradeUnionOrganization.Eid};
			}
			if (PrivilegePart != null)
			{
				res.PrivilegePart = new TradeUnionCamperPrivilegePart{Id=PrivilegePart.Id, Eid=PrivilegePart.Eid};
			}
			return res;
		}

		public void CopyEntity(TradeUnionCamper entity)
		{
			Id = entity.Id;
			AddressChild = entity.AddressChild;
			School = entity.School;
			ParentPlaceWork = entity.ParentPlaceWork;
			IsParentUnionist = entity.IsParentUnionist;
			IsRelativeUnionist = entity.IsRelativeUnionist;
			Summa = entity.Summa;
			SummaParent = entity.SummaParent;
			SummaTradeUnion = entity.SummaTradeUnion;
			SummaBudget = entity.SummaBudget;
			SummaOrganization = entity.SummaOrganization;
			RelativePlaceWork = entity.RelativePlaceWork;
			IsChecked = entity.IsChecked;
			IsScoolNotPresent = entity.IsScoolNotPresent;
			TradeUnionOrganizationOther = entity.TradeUnionOrganizationOther;
			CashbackEstimatedAmount = entity.CashbackEstimatedAmount;
			CashbackBaseEstimatedAmount = entity.CashbackBaseEstimatedAmount;
			ContractDate = entity.ContractDate;
			ContractNumber = entity.ContractNumber;
			FactDateIn = entity.FactDateIn;
			FactDateOut = entity.FactDateOut;
			CashbackRequested = entity.CashbackRequested;
			TradeUnionId = entity.TradeUnionId;
			ChildId = entity.ChildId;
			ParentId = entity.ParentId;
			UnionistId = entity.UnionistId;
			TradeUnionStatusByChildId = entity.TradeUnionStatusByChildId;
			SelectedSchoolId = entity.SelectedSchoolId;
			LinkToFileId = entity.LinkToFileId;
			TradeUnionOrganizationId = entity.TradeUnionOrganizationId;
			PrivilegePartId = entity.PrivilegePartId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TradeUnionCamperPrivilegePart : ILastUpdateTick
	{
		public TradeUnionCamperPrivilegePart()
		{
		}

		public TradeUnionCamperPrivilegePart(TradeUnionCamperPrivilegePart entity) : this(entity, null)
		{
		}

		public TradeUnionCamperPrivilegePart(TradeUnionCamperPrivilegePart entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TradeUnionCamperPrivilegePart CreateCopy()
		{
			var res = new TradeUnionCamperPrivilegePart(this);
			res.Campers = Campers?.Select(p=>new TradeUnionCamper {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TradeUnionCamperPrivilegePart entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TradeUnionList : ILastUpdateTick
	{
		public TradeUnionList()
		{
		}

		public TradeUnionList(TradeUnionList entity) : this(entity, null)
		{
		}

		public TradeUnionList(TradeUnionList entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			IsCashbackUse = entity.IsCashbackUse;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			CampId = entity.CampId;
			if (deep > 0 && entity.Camp != null)
			{
				Camp = new Organization(entity.Camp, deep - 1);
			}

			TradeUnionId = entity.TradeUnionId;
			if (deep > 0 && entity.TradeUnion != null)
			{
				TradeUnion = new Organization(entity.TradeUnion, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			GroupedTimeOfRestId = entity.GroupedTimeOfRestId;
			if (deep > 0 && entity.GroupedTimeOfRest != null)
			{
				GroupedTimeOfRest = new GroupedTimeOfRest(entity.GroupedTimeOfRest, deep - 1);
			}

			LinkToFileId = entity.LinkToFileId;
			if (deep > 0 && entity.LinkToFile != null)
			{
				LinkToFile = new LinkToFile(entity.LinkToFile, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TradeUnionList CreateCopy()
		{
			var res = new TradeUnionList(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (Camp != null)
			{
				res.Camp = new Organization{Id=Camp.Id, Eid=Camp.Eid};
			}
			if (TradeUnion != null)
			{
				res.TradeUnion = new Organization{Id=TradeUnion.Id, Eid=TradeUnion.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (GroupedTimeOfRest != null)
			{
				res.GroupedTimeOfRest = new GroupedTimeOfRest{Id=GroupedTimeOfRest.Id, Eid=GroupedTimeOfRest.Eid};
			}
			if (LinkToFile != null)
			{
				res.LinkToFile = new LinkToFile{Id=LinkToFile.Id, Eid=LinkToFile.Eid};
			}
			res.Campers = Campers?.Select(p=>new TradeUnionCamper {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TradeUnionList entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			DateFrom = entity.DateFrom;
			DateTo = entity.DateTo;
			IsCashbackUse = entity.IsCashbackUse;
			HistoryLinkId = entity.HistoryLinkId;
			YearOfRestId = entity.YearOfRestId;
			CampId = entity.CampId;
			TradeUnionId = entity.TradeUnionId;
			StateId = entity.StateId;
			GroupedTimeOfRestId = entity.GroupedTimeOfRestId;
			LinkToFileId = entity.LinkToFileId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TradeUnionPersonCheck : ILastUpdateTick
	{
		public TradeUnionPersonCheck()
		{
		}

		public TradeUnionPersonCheck(TradeUnionPersonCheck entity) : this(entity, null)
		{
		}

		public TradeUnionPersonCheck(TradeUnionPersonCheck entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			PersonCheckType = entity.PersonCheckType;
			IsProcessed = entity.IsProcessed;
			NotActual = entity.NotActual;
			PersonId = entity.PersonId;
			if (deep > 0 && entity.Person != null)
			{
				Person = new Person(entity.Person, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TradeUnionPersonCheck CreateCopy()
		{
			var res = new TradeUnionPersonCheck(this);
			if (Person != null)
			{
				res.Person = new Person{Id=Person.Id, Eid=Person.Eid};
			}
			res.PersonCheckResults = PersonCheckResults?.Select(p=>new Person {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TradeUnionPersonCheck entity)
		{
			Id = entity.Id;
			PersonCheckType = entity.PersonCheckType;
			IsProcessed = entity.IsProcessed;
			NotActual = entity.NotActual;
			PersonId = entity.PersonId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TradeUnionStatusByChild : ILastUpdateTick
	{
		public TradeUnionStatusByChild()
		{
		}

		public TradeUnionStatusByChild(TradeUnionStatusByChild entity) : this(entity, null)
		{
		}

		public TradeUnionStatusByChild(TradeUnionStatusByChild entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TradeUnionStatusByChild CreateCopy()
		{
			var res = new TradeUnionStatusByChild(this);
			return res;
		}

		public void CopyEntity(TradeUnionStatusByChild entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TrainingCounselors : ILastUpdateTick
	{
		public TrainingCounselors()
		{
		}

		public TrainingCounselors(TrainingCounselors entity) : this(entity, null)
		{
		}

		public TrainingCounselors(TrainingCounselors entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Description = entity.Description;
			Value = entity.Value;
			Timetable = entity.Timetable;
			StartTraining = entity.StartTraining;
			EndTraining = entity.EndTraining;
			Duration = entity.Duration;
			ForSite = entity.ForSite;
			LinkToFileId = entity.LinkToFileId;
			if (deep > 0 && entity.LinkToFile != null)
			{
				LinkToFile = new LinkToFile(entity.LinkToFile, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			TrainingCounselorsPlaceId = entity.TrainingCounselorsPlaceId;
			if (deep > 0 && entity.TrainingCounselorsPlace != null)
			{
				TrainingCounselorsPlace = new TrainingCounselorsPlace(entity.TrainingCounselorsPlace, deep - 1);
			}

			TrainingCounselorsTypeId = entity.TrainingCounselorsTypeId;
			if (deep > 0 && entity.TrainingCounselorsType != null)
			{
				TrainingCounselorsType = new TrainingCounselorsType(entity.TrainingCounselorsType, deep - 1);
			}

			TrainingCounselorsTimeId = entity.TrainingCounselorsTimeId;
			if (deep > 0 && entity.TrainingCounselorsTime != null)
			{
				TrainingCounselorsTime = new TrainingCounselorsTime(entity.TrainingCounselorsTime, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TrainingCounselors CreateCopy()
		{
			var res = new TrainingCounselors(this);
			if (LinkToFile != null)
			{
				res.LinkToFile = new LinkToFile{Id=LinkToFile.Id, Eid=LinkToFile.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (TrainingCounselorsPlace != null)
			{
				res.TrainingCounselorsPlace = new TrainingCounselorsPlace{Id=TrainingCounselorsPlace.Id, Eid=TrainingCounselorsPlace.Eid};
			}
			if (TrainingCounselorsType != null)
			{
				res.TrainingCounselorsType = new TrainingCounselorsType{Id=TrainingCounselorsType.Id, Eid=TrainingCounselorsType.Eid};
			}
			if (TrainingCounselorsTime != null)
			{
				res.TrainingCounselorsTime = new TrainingCounselorsTime{Id=TrainingCounselorsTime.Id, Eid=TrainingCounselorsTime.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			res.Results = Results?.Select(p=>new TrainingCounselorsResult {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Tests = Tests?.Select(p=>new TrainingCounselorsGroupTest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TrainingCounselors entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Description = entity.Description;
			Value = entity.Value;
			Timetable = entity.Timetable;
			StartTraining = entity.StartTraining;
			EndTraining = entity.EndTraining;
			Duration = entity.Duration;
			ForSite = entity.ForSite;
			LinkToFileId = entity.LinkToFileId;
			HistoryLinkId = entity.HistoryLinkId;
			TrainingCounselorsPlaceId = entity.TrainingCounselorsPlaceId;
			TrainingCounselorsTypeId = entity.TrainingCounselorsTypeId;
			TrainingCounselorsTimeId = entity.TrainingCounselorsTimeId;
			StateId = entity.StateId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TrainingCounselorsGroupTest : ILastUpdateTick
	{
		public TrainingCounselorsGroupTest()
		{
		}

		public TrainingCounselorsGroupTest(TrainingCounselorsGroupTest entity) : this(entity, null)
		{
		}

		public TrainingCounselorsGroupTest(TrainingCounselorsGroupTest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateStart = entity.DateStart;
			DateEnd = entity.DateEnd;
			IsDeleted = entity.IsDeleted;
			CountAttempts = entity.CountAttempts;
			IsCountLimited = entity.IsCountLimited;
			TrainingCounselorsId = entity.TrainingCounselorsId;
			if (deep > 0 && entity.TrainingCounselors != null)
			{
				TrainingCounselors = new TrainingCounselors(entity.TrainingCounselors, deep - 1);
			}

			CounselorTestId = entity.CounselorTestId;
			if (deep > 0 && entity.CounselorTest != null)
			{
				CounselorTest = new CounselorTest(entity.CounselorTest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TrainingCounselorsGroupTest CreateCopy()
		{
			var res = new TrainingCounselorsGroupTest(this);
			if (TrainingCounselors != null)
			{
				res.TrainingCounselors = new TrainingCounselors{Id=TrainingCounselors.Id, Eid=TrainingCounselors.Eid};
			}
			if (CounselorTest != null)
			{
				res.CounselorTest = new CounselorTest{Id=CounselorTest.Id, Eid=CounselorTest.Eid};
			}
			res.Students = Students?.Select(p=>new TrainingCounselorsTest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TrainingCounselorsGroupTest entity)
		{
			Id = entity.Id;
			DateStart = entity.DateStart;
			DateEnd = entity.DateEnd;
			IsDeleted = entity.IsDeleted;
			CountAttempts = entity.CountAttempts;
			IsCountLimited = entity.IsCountLimited;
			TrainingCounselorsId = entity.TrainingCounselorsId;
			CounselorTestId = entity.CounselorTestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TrainingCounselorsPlace : ILastUpdateTick
	{
		public TrainingCounselorsPlace()
		{
		}

		public TrainingCounselorsPlace(TrainingCounselorsPlace entity) : this(entity, null)
		{
		}

		public TrainingCounselorsPlace(TrainingCounselorsPlace entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			LinkToFileId = entity.LinkToFileId;
			if (deep > 0 && entity.LinkToFile != null)
			{
				LinkToFile = new LinkToFile(entity.LinkToFile, deep - 1);
			}

			AddressId = entity.AddressId;
			if (deep > 0 && entity.Address != null)
			{
				Address = new Address(entity.Address, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TrainingCounselorsPlace CreateCopy()
		{
			var res = new TrainingCounselorsPlace(this);
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (LinkToFile != null)
			{
				res.LinkToFile = new LinkToFile{Id=LinkToFile.Id, Eid=LinkToFile.Eid};
			}
			if (Address != null)
			{
				res.Address = new Address{Id=Address.Id, Eid=Address.Eid};
			}
			return res;
		}

		public void CopyEntity(TrainingCounselorsPlace entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			HistoryLinkId = entity.HistoryLinkId;
			LinkToFileId = entity.LinkToFileId;
			AddressId = entity.AddressId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TrainingCounselorsResult : ILastUpdateTick
	{
		public TrainingCounselorsResult()
		{
		}

		public TrainingCounselorsResult(TrainingCounselorsResult entity) : this(entity, null)
		{
		}

		public TrainingCounselorsResult(TrainingCounselorsResult entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Comment = entity.Comment;
			Rank = entity.Rank;
			DateOfFinalTest = entity.DateOfFinalTest;
			DateInclude = entity.DateInclude;
			DateExclude = entity.DateExclude;
			IsSuccess = entity.IsSuccess;
			CounselorsId = entity.CounselorsId;
			if (deep > 0 && entity.Counselors != null)
			{
				Counselors = new Counselors(entity.Counselors, deep - 1);
			}

			TrainingCounselorsId = entity.TrainingCounselorsId;
			if (deep > 0 && entity.TrainingCounselors != null)
			{
				TrainingCounselors = new TrainingCounselors(entity.TrainingCounselors, deep - 1);
			}

			StatusId = entity.StatusId;
			if (deep > 0 && entity.Status != null)
			{
				Status = new TrainingCounselorsResultStatus(entity.Status, deep - 1);
			}

			AdministratorTourId = entity.AdministratorTourId;
			if (deep > 0 && entity.AdministratorTour != null)
			{
				AdministratorTour = new AdministratorTour(entity.AdministratorTour, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TrainingCounselorsResult CreateCopy()
		{
			var res = new TrainingCounselorsResult(this);
			if (Counselors != null)
			{
				res.Counselors = new Counselors{Id=Counselors.Id, Eid=Counselors.Eid};
			}
			if (TrainingCounselors != null)
			{
				res.TrainingCounselors = new TrainingCounselors{Id=TrainingCounselors.Id, Eid=TrainingCounselors.Eid};
			}
			if (Status != null)
			{
				res.Status = new TrainingCounselorsResultStatus{Id=Status.Id, Eid=Status.Eid};
			}
			if (AdministratorTour != null)
			{
				res.AdministratorTour = new AdministratorTour{Id=AdministratorTour.Id, Eid=AdministratorTour.Eid};
			}
			res.Answers = Answers?.Select(p=>new CounselorTestAnswer {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Tests = Tests?.Select(p=>new TrainingCounselorsTest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TrainingCounselorsResult entity)
		{
			Id = entity.Id;
			Comment = entity.Comment;
			Rank = entity.Rank;
			DateOfFinalTest = entity.DateOfFinalTest;
			DateInclude = entity.DateInclude;
			DateExclude = entity.DateExclude;
			IsSuccess = entity.IsSuccess;
			CounselorsId = entity.CounselorsId;
			TrainingCounselorsId = entity.TrainingCounselorsId;
			StatusId = entity.StatusId;
			AdministratorTourId = entity.AdministratorTourId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TrainingCounselorsResultStatus : ILastUpdateTick
	{
		public TrainingCounselorsResultStatus()
		{
		}

		public TrainingCounselorsResultStatus(TrainingCounselorsResultStatus entity) : this(entity, null)
		{
		}

		public TrainingCounselorsResultStatus(TrainingCounselorsResultStatus entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TrainingCounselorsResultStatus CreateCopy()
		{
			var res = new TrainingCounselorsResultStatus(this);
			return res;
		}

		public void CopyEntity(TrainingCounselorsResultStatus entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TrainingCounselorsTest : ILastUpdateTick
	{
		public TrainingCounselorsTest()
		{
		}

		public TrainingCounselorsTest(TrainingCounselorsTest entity) : this(entity, null)
		{
		}

		public TrainingCounselorsTest(TrainingCounselorsTest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Rating = entity.Rating;
			DateTesting = entity.DateTesting;
			TestGuid = entity.TestGuid;
			IsComplited = entity.IsComplited;
			IsLastAttempt = entity.IsLastAttempt;
			TrainingCounselorsResultId = entity.TrainingCounselorsResultId;
			if (deep > 0 && entity.TrainingCounselorsResult != null)
			{
				TrainingCounselorsResult = new TrainingCounselorsResult(entity.TrainingCounselorsResult, deep - 1);
			}

			GroupTestId = entity.GroupTestId;
			if (deep > 0 && entity.GroupTest != null)
			{
				GroupTest = new TrainingCounselorsGroupTest(entity.GroupTest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TrainingCounselorsTest CreateCopy()
		{
			var res = new TrainingCounselorsTest(this);
			if (TrainingCounselorsResult != null)
			{
				res.TrainingCounselorsResult = new TrainingCounselorsResult{Id=TrainingCounselorsResult.Id, Eid=TrainingCounselorsResult.Eid};
			}
			if (GroupTest != null)
			{
				res.GroupTest = new TrainingCounselorsGroupTest{Id=GroupTest.Id, Eid=GroupTest.Eid};
			}
			res.Answers = Answers?.Select(p=>new CounselorTestAnswer {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TrainingCounselorsTest entity)
		{
			Id = entity.Id;
			Rating = entity.Rating;
			DateTesting = entity.DateTesting;
			TestGuid = entity.TestGuid;
			IsComplited = entity.IsComplited;
			IsLastAttempt = entity.IsLastAttempt;
			TrainingCounselorsResultId = entity.TrainingCounselorsResultId;
			GroupTestId = entity.GroupTestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TrainingCounselorsTime : ILastUpdateTick
	{
		public TrainingCounselorsTime()
		{
		}

		public TrainingCounselorsTime(TrainingCounselorsTime entity) : this(entity, null)
		{
		}

		public TrainingCounselorsTime(TrainingCounselorsTime entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TrainingCounselorsTime CreateCopy()
		{
			var res = new TrainingCounselorsTime(this);
			return res;
		}

		public void CopyEntity(TrainingCounselorsTime entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TrainingCounselorsType : ILastUpdateTick
	{
		public TrainingCounselorsType()
		{
		}

		public TrainingCounselorsType(TrainingCounselorsType entity) : this(entity, null)
		{
		}

		public TrainingCounselorsType(TrainingCounselorsType entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TrainingCounselorsType CreateCopy()
		{
			var res = new TrainingCounselorsType(this);
			return res;
		}

		public void CopyEntity(TrainingCounselorsType entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TransportInfo : ILastUpdateTick
	{
		public TransportInfo()
		{
		}

		public TransportInfo(TransportInfo entity) : this(entity, null)
		{
		}

		public TransportInfo(TransportInfo entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			DateOfDeparture = entity.DateOfDeparture;
			Venue = entity.Venue;
			DateCollection = entity.DateCollection;
			DateArrival = entity.DateArrival;
			Memo = entity.Memo;
			MemoFile = entity.MemoFile;
			MemoLink = entity.MemoLink;
			ArrivalId = entity.ArrivalId;
			if (deep > 0 && entity.Arrival != null)
			{
				Arrival = new City(entity.Arrival, deep - 1);
			}

			DepartureId = entity.DepartureId;
			if (deep > 0 && entity.Departure != null)
			{
				Departure = new City(entity.Departure, deep - 1);
			}

			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			HistoryLinkId = entity.HistoryLinkId;
			if (deep > 0 && entity.HistoryLink != null)
			{
				HistoryLink = new HistoryLink(entity.HistoryLink, deep - 1);
			}

			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			BoutId = entity.BoutId;
			if (deep > 0 && entity.Bout != null)
			{
				Bout = new Bout(entity.Bout, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TransportInfo CreateCopy()
		{
			var res = new TransportInfo(this);
			if (Arrival != null)
			{
				res.Arrival = new City{Id=Arrival.Id, Eid=Arrival.Eid};
			}
			if (Departure != null)
			{
				res.Departure = new City{Id=Departure.Id, Eid=Departure.Eid};
			}
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (HistoryLink != null)
			{
				res.HistoryLink = new HistoryLink{Id=HistoryLink.Id, Eid=HistoryLink.Eid};
			}
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			if (Bout != null)
			{
				res.Bout = new Bout{Id=Bout.Id, Eid=Bout.Eid};
			}
			res.People = People?.Select(p=>new LinkToPeople {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TransportInfo entity)
		{
			Id = entity.Id;
			DateOfDeparture = entity.DateOfDeparture;
			Venue = entity.Venue;
			DateCollection = entity.DateCollection;
			DateArrival = entity.DateArrival;
			Memo = entity.Memo;
			MemoFile = entity.MemoFile;
			MemoLink = entity.MemoLink;
			ArrivalId = entity.ArrivalId;
			DepartureId = entity.DepartureId;
			StateId = entity.StateId;
			HistoryLinkId = entity.HistoryLinkId;
			YearOfRestId = entity.YearOfRestId;
			BoutId = entity.BoutId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfCalculation : ILastUpdateTick
	{
		public TypeOfCalculation()
		{
		}

		public TypeOfCalculation(TypeOfCalculation entity) : this(entity, null)
		{
		}

		public TypeOfCalculation(TypeOfCalculation entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfCalculation CreateCopy()
		{
			var res = new TypeOfCalculation(this);
			return res;
		}

		public void CopyEntity(TypeOfCalculation entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfCamp : ILastUpdateTick
	{
		public TypeOfCamp()
		{
		}

		public TypeOfCamp(TypeOfCamp entity) : this(entity, null)
		{
		}

		public TypeOfCamp(TypeOfCamp entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfCamp CreateCopy()
		{
			var res = new TypeOfCamp(this);
			return res;
		}

		public void CopyEntity(TypeOfCamp entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfDrug : ILastUpdateTick
	{
		public TypeOfDrug()
		{
		}

		public TypeOfDrug(TypeOfDrug entity) : this(entity, null)
		{
		}

		public TypeOfDrug(TypeOfDrug entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfDrug CreateCopy()
		{
			var res = new TypeOfDrug(this);
			res.Drugs = Drugs?.Select(p=>new Drug {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TypeOfDrug entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfEducation : ILastUpdateTick
	{
		public TypeOfEducation()
		{
		}

		public TypeOfEducation(TypeOfEducation entity) : this(entity, null)
		{
		}

		public TypeOfEducation(TypeOfEducation entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfEducation CreateCopy()
		{
			var res = new TypeOfEducation(this);
			return res;
		}

		public void CopyEntity(TypeOfEducation entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfGroupCheck : ILastUpdateTick
	{
		public TypeOfGroupCheck()
		{
		}

		public TypeOfGroupCheck(TypeOfGroupCheck entity) : this(entity, null)
		{
		}

		public TypeOfGroupCheck(TypeOfGroupCheck entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Period = entity.Period;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfGroupCheck CreateCopy()
		{
			var res = new TypeOfGroupCheck(this);
			return res;
		}

		public void CopyEntity(TypeOfGroupCheck entity)
		{
			Id = entity.Id;
			Period = entity.Period;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfLimitList : ILastUpdateTick
	{
		public TypeOfLimitList()
		{
		}

		public TypeOfLimitList(TypeOfLimitList entity) : this(entity, null)
		{
		}

		public TypeOfLimitList(TypeOfLimitList entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfLimitList CreateCopy()
		{
			var res = new TypeOfLimitList(this);
			return res;
		}

		public void CopyEntity(TypeOfLimitList entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfLinkPeople : ILastUpdateTick
	{
		public TypeOfLinkPeople()
		{
		}

		public TypeOfLinkPeople(TypeOfLinkPeople entity) : this(entity, null)
		{
		}

		public TypeOfLinkPeople(TypeOfLinkPeople entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfLinkPeople CreateCopy()
		{
			var res = new TypeOfLinkPeople(this);
			res.OrganisatonCollaborator = OrganisatonCollaborator?.Select(p=>new OrganisatorCollaborator {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TypeOfLinkPeople entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfRest : ILastUpdateTick
	{
		public TypeOfRest()
		{
		}

		public TypeOfRest(TypeOfRest entity) : this(entity, null)
		{
		}

		public TypeOfRest(TypeOfRest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			ServiceCode = entity.ServiceCode;
			ForMPGU = entity.ForMPGU;
			NeedPlace = entity.NeedPlace;
			NeedPlacment = entity.NeedPlacment;
			NeedSubject = entity.NeedSubject;
			NeedApplicant = entity.NeedApplicant;
			NeedAttendant = entity.NeedAttendant;
			MinAge = entity.MinAge;
			MaxAge = entity.MaxAge;
			UrlToRulesOfRest = entity.UrlToRulesOfRest;
			ForTour = entity.ForTour;
			Commercial = entity.Commercial;
			IsAddon = entity.IsAddon;
			NeedPrice = entity.NeedPrice;
			NeedAccomodation = entity.NeedAccomodation;
			NeedBookingDate = entity.NeedBookingDate;
			NeedTransport = entity.NeedTransport;
			NeedRecordingDate = entity.NeedRecordingDate;
			HaveMainService = entity.HaveMainService;
			HaveAddonService = entity.HaveAddonService;
			HiddenMainService = entity.HiddenMainService;
			NumberCode = entity.NumberCode;
			ResponsibleText = entity.ResponsibleText;
			NeedGeneratePermit = entity.NeedGeneratePermit;
			UrlToListRestriction = entity.UrlToListRestriction;
			UrlToRoolAttendant = entity.UrlToRoolAttendant;
			FirstRequestCompanySelect = entity.FirstRequestCompanySelect;
			ServiceCodeFirstCompany = entity.ServiceCodeFirstCompany;
			MayBeMoney = entity.MayBeMoney;
			NotChildren = entity.NotChildren;
			NeedTypeOfTransport = entity.NeedTypeOfTransport;
			UrlToStationaryTypeOfCampPhoto = entity.UrlToStationaryTypeOfCampPhoto;
			UrlToCampTypeOfCampPhoto = entity.UrlToCampTypeOfCampPhoto;
			TypeOfRestERLId = entity.TypeOfRestERLId;
			if (deep > 0 && entity.TypeOfRestERL != null)
			{
				TypeOfRestERL = new TypeOfRestERL(entity.TypeOfRestERL, deep - 1);
			}

			ParentId = entity.ParentId;
			if (deep > 0 && entity.Parent != null)
			{
				Parent = new TypeOfRest(entity.Parent, deep - 1);
			}

			TypeOfGroupCheckId = entity.TypeOfGroupCheckId;
			if (deep > 0 && entity.TypeOfGroupCheck != null)
			{
				TypeOfGroupCheck = new TypeOfGroupCheck(entity.TypeOfGroupCheck, deep - 1);
			}

			ResponsibleId = entity.ResponsibleId;
			if (deep > 0 && entity.Responsible != null)
			{
				Responsible = new Account(entity.Responsible, deep - 1);
			}

			CreateUserId = entity.CreateUserId;
			if (deep > 0 && entity.CreateUser != null)
			{
				CreateUser = new Account(entity.CreateUser, deep - 1);
			}

			HotelTypeId = entity.HotelTypeId;
			if (deep > 0 && entity.HotelType != null)
			{
				HotelType = new HotelType(entity.HotelType, deep - 1);
			}

			TypeOfServiceId = entity.TypeOfServiceId;
			if (deep > 0 && entity.TypeOfService != null)
			{
				TypeOfService = new TypeOfService(entity.TypeOfService, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfRest CreateCopy()
		{
			var res = new TypeOfRest(this);
			if (TypeOfRestERL != null)
			{
				res.TypeOfRestERL = new TypeOfRestERL{Id=TypeOfRestERL.Id, Eid=TypeOfRestERL.Eid};
			}
			if (Parent != null)
			{
				res.Parent = new TypeOfRest{Id=Parent.Id, Eid=Parent.Eid};
			}
			if (TypeOfGroupCheck != null)
			{
				res.TypeOfGroupCheck = new TypeOfGroupCheck{Id=TypeOfGroupCheck.Id, Eid=TypeOfGroupCheck.Eid};
			}
			if (Responsible != null)
			{
				res.Responsible = new Account{Id=Responsible.Id, Eid=Responsible.Eid};
			}
			if (CreateUser != null)
			{
				res.CreateUser = new Account{Id=CreateUser.Id, Eid=CreateUser.Eid};
			}
			if (HotelType != null)
			{
				res.HotelType = new HotelType{Id=HotelType.Id, Eid=HotelType.Eid};
			}
			if (TypeOfService != null)
			{
				res.TypeOfService = new TypeOfService{Id=TypeOfService.Id, Eid=TypeOfService.Eid};
			}
			res.TypeOfRestBenefitRestrictions = TypeOfRestBenefitRestrictions?.Select(p=>new TypeOfRestBenefitRestriction {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.BenefitTypes = BenefitTypes?.Select(p=>new BenefitType {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.DeclineReasons = DeclineReasons?.Select(p=>new DeclineReason {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.RequestFileTypes = RequestFileTypes?.Select(p=>new RequestFileType {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.Prices = Prices?.Select(p=>new AverageRestPrice {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.DocumentTypes = DocumentTypes?.Select(p=>new DocumentType {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.BenefitTypesERL = BenefitTypesERL?.Select(p=>new BenefitTypeERL {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TypeOfRest entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			ServiceCode = entity.ServiceCode;
			ForMPGU = entity.ForMPGU;
			NeedPlace = entity.NeedPlace;
			NeedPlacment = entity.NeedPlacment;
			NeedSubject = entity.NeedSubject;
			NeedApplicant = entity.NeedApplicant;
			NeedAttendant = entity.NeedAttendant;
			MinAge = entity.MinAge;
			MaxAge = entity.MaxAge;
			UrlToRulesOfRest = entity.UrlToRulesOfRest;
			ForTour = entity.ForTour;
			Commercial = entity.Commercial;
			IsAddon = entity.IsAddon;
			NeedPrice = entity.NeedPrice;
			NeedAccomodation = entity.NeedAccomodation;
			NeedBookingDate = entity.NeedBookingDate;
			NeedTransport = entity.NeedTransport;
			NeedRecordingDate = entity.NeedRecordingDate;
			HaveMainService = entity.HaveMainService;
			HaveAddonService = entity.HaveAddonService;
			HiddenMainService = entity.HiddenMainService;
			NumberCode = entity.NumberCode;
			ResponsibleText = entity.ResponsibleText;
			NeedGeneratePermit = entity.NeedGeneratePermit;
			UrlToListRestriction = entity.UrlToListRestriction;
			UrlToRoolAttendant = entity.UrlToRoolAttendant;
			FirstRequestCompanySelect = entity.FirstRequestCompanySelect;
			ServiceCodeFirstCompany = entity.ServiceCodeFirstCompany;
			MayBeMoney = entity.MayBeMoney;
			NotChildren = entity.NotChildren;
			NeedTypeOfTransport = entity.NeedTypeOfTransport;
			UrlToStationaryTypeOfCampPhoto = entity.UrlToStationaryTypeOfCampPhoto;
			UrlToCampTypeOfCampPhoto = entity.UrlToCampTypeOfCampPhoto;
			TypeOfRestERLId = entity.TypeOfRestERLId;
			ParentId = entity.ParentId;
			TypeOfGroupCheckId = entity.TypeOfGroupCheckId;
			ResponsibleId = entity.ResponsibleId;
			CreateUserId = entity.CreateUserId;
			HotelTypeId = entity.HotelTypeId;
			TypeOfServiceId = entity.TypeOfServiceId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfRestBenefitRestriction : ILastUpdateTick
	{
		public TypeOfRestBenefitRestriction()
		{
		}

		public TypeOfRestBenefitRestriction(TypeOfRestBenefitRestriction entity) : this(entity, null)
		{
		}

		public TypeOfRestBenefitRestriction(TypeOfRestBenefitRestriction entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			MinAge = entity.MinAge;
			MaxAge = entity.MaxAge;
			BenefitTypeId = entity.BenefitTypeId;
			if (deep > 0 && entity.BenefitType != null)
			{
				BenefitType = new BenefitType(entity.BenefitType, deep - 1);
			}

			TypeOfRestId = entity.TypeOfRestId;
			if (deep > 0 && entity.TypeOfRest != null)
			{
				TypeOfRest = new TypeOfRest(entity.TypeOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfRestBenefitRestriction CreateCopy()
		{
			var res = new TypeOfRestBenefitRestriction(this);
			if (BenefitType != null)
			{
				res.BenefitType = new BenefitType{Id=BenefitType.Id, Eid=BenefitType.Eid};
			}
			if (TypeOfRest != null)
			{
				res.TypeOfRest = new TypeOfRest{Id=TypeOfRest.Id, Eid=TypeOfRest.Eid};
			}
			return res;
		}

		public void CopyEntity(TypeOfRestBenefitRestriction entity)
		{
			Id = entity.Id;
			MinAge = entity.MinAge;
			MaxAge = entity.MaxAge;
			BenefitTypeId = entity.BenefitTypeId;
			TypeOfRestId = entity.TypeOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfRestERL : ILastUpdateTick
	{
		public TypeOfRestERL()
		{
		}

		public TypeOfRestERL(TypeOfRestERL entity) : this(entity, null)
		{
		}

		public TypeOfRestERL(TypeOfRestERL entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			UseApplicant = entity.UseApplicant;
			MSPCode = entity.MSPCode;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfRestERL CreateCopy()
		{
			var res = new TypeOfRestERL(this);
			res.BenefitTypesERL = BenefitTypesERL?.Select(p=>new BenefitTypeERL {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			res.TypesOfRest = TypesOfRest?.Select(p=>new TypeOfRest {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TypeOfRestERL entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			UseApplicant = entity.UseApplicant;
			MSPCode = entity.MSPCode;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfRestriction : ILastUpdateTick
	{
		public TypeOfRestriction()
		{
		}

		public TypeOfRestriction(TypeOfRestriction entity) : this(entity, null)
		{
		}

		public TypeOfRestriction(TypeOfRestriction entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			RestrictionGroupId = entity.RestrictionGroupId;
			if (deep > 0 && entity.RestrictionGroup != null)
			{
				RestrictionGroup = new RestrictionGroup(entity.RestrictionGroup, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfRestriction CreateCopy()
		{
			var res = new TypeOfRestriction(this);
			if (RestrictionGroup != null)
			{
				res.RestrictionGroup = new RestrictionGroup{Id=RestrictionGroup.Id, Eid=RestrictionGroup.Eid};
			}
			res.Subs = Subs?.Select(p=>new TypeOfSubRestriction {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TypeOfRestriction entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			RestrictionGroupId = entity.RestrictionGroupId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfRestSubtype : ILastUpdateTick
	{
		public TypeOfRestSubtype()
		{
		}

		public TypeOfRestSubtype(TypeOfRestSubtype entity) : this(entity, null)
		{
		}

		public TypeOfRestSubtype(TypeOfRestSubtype entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			TypeOfRestId = entity.TypeOfRestId;
			if (deep > 0 && entity.TypeOfRest != null)
			{
				TypeOfRest = new TypeOfRest(entity.TypeOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfRestSubtype CreateCopy()
		{
			var res = new TypeOfRestSubtype(this);
			if (TypeOfRest != null)
			{
				res.TypeOfRest = new TypeOfRest{Id=TypeOfRest.Id, Eid=TypeOfRest.Eid};
			}
			return res;
		}

		public void CopyEntity(TypeOfRestSubtype entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			TypeOfRestId = entity.TypeOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfRooms : ILastUpdateTick
	{
		public TypeOfRooms()
		{
		}

		public TypeOfRooms(TypeOfRooms entity) : this(entity, null)
		{
		}

		public TypeOfRooms(TypeOfRooms entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			HaveFurniture = entity.HaveFurniture;
			HaveBalcony = entity.HaveBalcony;
			HaveTv = entity.HaveTv;
			HaveBath = entity.HaveBath;
			HaveSatelliteTv = entity.HaveSatelliteTv;
			HaveShower = entity.HaveShower;
			HaveLocalTv = entity.HaveLocalTv;
			HaveHairDryer = entity.HaveHairDryer;
			HaveRadio = entity.HaveRadio;
			HaveWc = entity.HaveWc;
			HavePhone = entity.HavePhone;
			HaveBidet = entity.HaveBidet;
			HaveBar = entity.HaveBar;
			HaveAirConditioning = entity.HaveAirConditioning;
			HaveSafe = entity.HaveSafe;
			HaveKitchen = entity.HaveKitchen;
			HaveRefrigerator = entity.HaveRefrigerator;
			CountBasePlace = entity.CountBasePlace;
			CountAddonPlace = entity.CountAddonPlace;
			MaximumCount = entity.MaximumCount;
			RoomSize = entity.RoomSize;
			RoomSizePerPerson = entity.RoomSizePerPerson;
			HotelId = entity.HotelId;
			if (deep > 0 && entity.Hotel != null)
			{
				Hotel = new Hotels(entity.Hotel, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfRooms CreateCopy()
		{
			var res = new TypeOfRooms(this);
			if (Hotel != null)
			{
				res.Hotel = new Hotels{Id=Hotel.Id, Eid=Hotel.Eid};
			}
			res.Files = Files?.Select(p=>new FileHotel {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TypeOfRooms entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			HaveFurniture = entity.HaveFurniture;
			HaveBalcony = entity.HaveBalcony;
			HaveTv = entity.HaveTv;
			HaveBath = entity.HaveBath;
			HaveSatelliteTv = entity.HaveSatelliteTv;
			HaveShower = entity.HaveShower;
			HaveLocalTv = entity.HaveLocalTv;
			HaveHairDryer = entity.HaveHairDryer;
			HaveRadio = entity.HaveRadio;
			HaveWc = entity.HaveWc;
			HavePhone = entity.HavePhone;
			HaveBidet = entity.HaveBidet;
			HaveBar = entity.HaveBar;
			HaveAirConditioning = entity.HaveAirConditioning;
			HaveSafe = entity.HaveSafe;
			HaveKitchen = entity.HaveKitchen;
			HaveRefrigerator = entity.HaveRefrigerator;
			CountBasePlace = entity.CountBasePlace;
			CountAddonPlace = entity.CountAddonPlace;
			MaximumCount = entity.MaximumCount;
			RoomSize = entity.RoomSize;
			RoomSizePerPerson = entity.RoomSizePerPerson;
			HotelId = entity.HotelId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfService : ILastUpdateTick
	{
		public TypeOfService()
		{
		}

		public TypeOfService(TypeOfService entity) : this(entity, null)
		{
		}

		public TypeOfService(TypeOfService entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			Single = entity.Single;
			NeedSize = entity.NeedSize;
			NeedConditions = entity.NeedConditions;
			NeedAnnouncement = entity.NeedAnnouncement;
			NeedName = entity.NeedName;
			NeedDescription = entity.NeedDescription;
			NeedDurationHour = entity.NeedDurationHour;
			NeedDurationDay = entity.NeedDurationDay;
			NeedDurationMonth = entity.NeedDurationMonth;
			NeedDurationYear = entity.NeedDurationYear;
			MayByDefault = entity.MayByDefault;
			MayRequared = entity.MayRequared;
			MayWithAccomodation = entity.MayWithAccomodation;
			MayMustApprove = entity.MayMustApprove;
			NeedTransport = entity.NeedTransport;
			CuratorId = entity.CuratorId;
			if (deep > 0 && entity.Curator != null)
			{
				Curator = new Account(entity.Curator, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfService CreateCopy()
		{
			var res = new TypeOfService(this);
			if (Curator != null)
			{
				res.Curator = new Account{Id=Curator.Id, Eid=Curator.Eid};
			}
			return res;
		}

		public void CopyEntity(TypeOfService entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			Single = entity.Single;
			NeedSize = entity.NeedSize;
			NeedConditions = entity.NeedConditions;
			NeedAnnouncement = entity.NeedAnnouncement;
			NeedName = entity.NeedName;
			NeedDescription = entity.NeedDescription;
			NeedDurationHour = entity.NeedDurationHour;
			NeedDurationDay = entity.NeedDurationDay;
			NeedDurationMonth = entity.NeedDurationMonth;
			NeedDurationYear = entity.NeedDurationYear;
			MayByDefault = entity.MayByDefault;
			MayRequared = entity.MayRequared;
			MayWithAccomodation = entity.MayWithAccomodation;
			MayMustApprove = entity.MayMustApprove;
			NeedTransport = entity.NeedTransport;
			CuratorId = entity.CuratorId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfSubRestriction : ILastUpdateTick
	{
		public TypeOfSubRestriction()
		{
		}

		public TypeOfSubRestriction(TypeOfSubRestriction entity) : this(entity, null)
		{
		}

		public TypeOfSubRestriction(TypeOfSubRestriction entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			TypeOfRestrictionId = entity.TypeOfRestrictionId;
			if (deep > 0 && entity.TypeOfRestriction != null)
			{
				TypeOfRestriction = new TypeOfRestriction(entity.TypeOfRestriction, deep - 1);
			}

			RestrictionGroupId = entity.RestrictionGroupId;
			if (deep > 0 && entity.RestrictionGroup != null)
			{
				RestrictionGroup = new RestrictionGroup(entity.RestrictionGroup, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfSubRestriction CreateCopy()
		{
			var res = new TypeOfSubRestriction(this);
			if (TypeOfRestriction != null)
			{
				res.TypeOfRestriction = new TypeOfRestriction{Id=TypeOfRestriction.Id, Eid=TypeOfRestriction.Eid};
			}
			if (RestrictionGroup != null)
			{
				res.RestrictionGroup = new RestrictionGroup{Id=RestrictionGroup.Id, Eid=RestrictionGroup.Eid};
			}
			return res;
		}

		public void CopyEntity(TypeOfSubRestriction entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsDeleted = entity.IsDeleted;
			TypeOfRestrictionId = entity.TypeOfRestrictionId;
			RestrictionGroupId = entity.RestrictionGroupId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfTransfer : ILastUpdateTick
	{
		public TypeOfTransfer()
		{
		}

		public TypeOfTransfer(TypeOfTransfer entity) : this(entity, null)
		{
		}

		public TypeOfTransfer(TypeOfTransfer entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfTransfer CreateCopy()
		{
			var res = new TypeOfTransfer(this);
			return res;
		}

		public void CopyEntity(TypeOfTransfer entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfTransport : ILastUpdateTick
	{
		public TypeOfTransport()
		{
		}

		public TypeOfTransport(TypeOfTransport entity) : this(entity, null)
		{
		}

		public TypeOfTransport(TypeOfTransport entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Code = entity.Code;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfTransport CreateCopy()
		{
			var res = new TypeOfTransport(this);
			res.Organization = Organization?.Select(p=>new Organization {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(TypeOfTransport entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Code = entity.Code;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeOfTransportInRequest : ILastUpdateTick
	{
		public TypeOfTransportInRequest()
		{
		}

		public TypeOfTransportInRequest(TypeOfTransportInRequest entity) : this(entity, null)
		{
		}

		public TypeOfTransportInRequest(TypeOfTransportInRequest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeOfTransportInRequest CreateCopy()
		{
			var res = new TypeOfTransportInRequest(this);
			return res;
		}

		public void CopyEntity(TypeOfTransportInRequest entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypePriceCalculation : ILastUpdateTick
	{
		public TypePriceCalculation()
		{
		}

		public TypePriceCalculation(TypePriceCalculation entity) : this(entity, null)
		{
		}

		public TypePriceCalculation(TypePriceCalculation entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypePriceCalculation CreateCopy()
		{
			var res = new TypePriceCalculation(this);
			return res;
		}

		public void CopyEntity(TypePriceCalculation entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeRequestInformationVoucher : ILastUpdateTick
	{
		public TypeRequestInformationVoucher()
		{
		}

		public TypeRequestInformationVoucher(TypeRequestInformationVoucher entity) : this(entity, null)
		{
		}

		public TypeRequestInformationVoucher(TypeRequestInformationVoucher entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeRequestInformationVoucher CreateCopy()
		{
			var res = new TypeRequestInformationVoucher(this);
			return res;
		}

		public void CopyEntity(TypeRequestInformationVoucher entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			IsActive = entity.IsActive;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class TypeViolation : ILastUpdateTick
	{
		public TypeViolation()
		{
		}

		public TypeViolation(TypeViolation entity) : this(entity, null)
		{
		}

		public TypeViolation(TypeViolation entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			YearOfRestId = entity.YearOfRestId;
			if (deep > 0 && entity.YearOfRest != null)
			{
				YearOfRest = new YearOfRest(entity.YearOfRest, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public TypeViolation CreateCopy()
		{
			var res = new TypeViolation(this);
			if (YearOfRest != null)
			{
				res.YearOfRest = new YearOfRest{Id=YearOfRest.Id, Eid=YearOfRest.Eid};
			}
			return res;
		}

		public void CopyEntity(TypeViolation entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			YearOfRestId = entity.YearOfRestId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
	public partial class YearOfRest : ILastUpdateTick
	{
		public YearOfRest()
		{
		}

		public YearOfRest(YearOfRest entity) : this(entity, null)
		{
		}

		public YearOfRest(YearOfRest entity, int? deep)
		{
			if (entity == null) return;

			Id = entity.Id;
			Name = entity.Name;
			Year = entity.Year;
			IsClosed = entity.IsClosed;
			DateFirstStage = entity.DateFirstStage;
			DateFirstStageClose = entity.DateFirstStageClose;
			DateSecondStage = entity.DateSecondStage;
			DateSecondStageClose = entity.DateSecondStageClose;
			ReceptionOfApplicationsCompleted = entity.ReceptionOfApplicationsCompleted;
			ListComplited = entity.ListComplited;
			TourOpened = entity.TourOpened;
			StateId = entity.StateId;
			if (deep > 0 && entity.State != null)
			{
				State = new StateMachineState(entity.State, deep - 1);
			}

			SignInfoId = entity.SignInfoId;
			if (deep > 0 && entity.SignInfo != null)
			{
				SignInfo = new SignInfo(entity.SignInfo, deep - 1);
			}

			LastUpdateTick = entity.LastUpdateTick;
			Eid = entity.Eid;
			EidSendStatus = entity.EidSendStatus;
			EidSyncDate = entity.EidSyncDate;
		}

		public YearOfRest CreateCopy()
		{
			var res = new YearOfRest(this);
			if (State != null)
			{
				res.State = new StateMachineState{Id=State.Id, Eid=State.Eid};
			}
			if (SignInfo != null)
			{
				res.SignInfo = new SignInfo{Id=SignInfo.Id, Eid=SignInfo.Eid};
			}
			res.Prices = Prices?.Select(p=>new AverageRestPrice {Id = p.Id, Eid = p.Eid, EidSyncDate = p.EidSyncDate, EidSendStatus = p.EidSendStatus})?.ToList();
			return res;
		}

		public void CopyEntity(YearOfRest entity)
		{
			Id = entity.Id;
			Name = entity.Name;
			Year = entity.Year;
			IsClosed = entity.IsClosed;
			DateFirstStage = entity.DateFirstStage;
			DateFirstStageClose = entity.DateFirstStageClose;
			DateSecondStage = entity.DateSecondStage;
			DateSecondStageClose = entity.DateSecondStageClose;
			ReceptionOfApplicationsCompleted = entity.ReceptionOfApplicationsCompleted;
			ListComplited = entity.ListComplited;
			TourOpened = entity.TourOpened;
			StateId = entity.StateId;
			SignInfoId = entity.SignInfoId;
			LastUpdateTick = entity.LastUpdateTick;
		}
	}
}
